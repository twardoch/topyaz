This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: llms.txt, SPEC.md, .specstory
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.cursor/
  rules/
    data-flow.mdc
    processing-algorithms.mdc
    remote-execution.mdc
.giga/
  specifications.json
.github/
  workflows/
    push.yml
    release.yml
src/
  topyaz/
    core/
      __init__.py
      config.py
      errors.py
      types.py
    execution/
      __init__.py
      base.py
      local.py
      progress.py
      remote.py
    products/
      __init__.py
      base.py
      gigapixel.py
      photo_ai.py
      video_ai.py
    system/
      __init__.py
      environment.py
      gpu.py
      memory.py
      paths.py
      photo_ai_prefs.py
      preferences.py
    utils/
      __init__.py
      logging.py
      validation.py
    __init__.py
    __main__.py
    cli.py
    topyaz.py
tests/
  test_package.py
  test_refactoring.py
.cursorindexingignore
.cursorrules
.gitignore
.pre-commit-config.yaml
AGENT.md
CHANGELOG.md
CLAUDE.md
cleanup.sh
example.sh
LICENSE
package.toml
PLAN.md
pyproject.toml
README.md
TODO.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cursor/rules/data-flow.mdc">
---
description: Documents data movement patterns between local and remote processing components, including file handling and monitoring
globs: topyaz/execution/*.py,topyaz/cli/batch.py,topyaz/error_handling/*.py
alwaysApply: false
---


# Data-Flow

## Core Data Movement Patterns

1. Remote Processing Pipeline
- Location: `topyaz/execution/remote.py`
- Handles bidirectional file transfer between local and remote systems
- Manages SSH-based data streaming for media file processing
- Implements resumable file transfers for large media collections
- Importance Score: 95

2. Batch Operation Data Flow
- Location: `topyaz/cli/batch.py`
- Orchestrates parallel processing streams for multiple files
- Tracks processing status and progress across file groups
- Maintains processing state for recovery scenarios
- Importance Score: 90

3. Error Recovery Data Paths
- Location: `topyaz/error_handling/__init__.py`
- Implements checkpointing for batch processing operations
- Records processing state for interrupted operations
- Manages data integrity during failure scenarios
- Importance Score: 85

## Data Monitoring

1. Progress Tracking
- Location: `topyaz/cli/batch.py`
- Real-time monitoring of file processing status
- Collection of processing metrics per file
- Aggregation of batch operation statistics
- Importance Score: 75

2. Error State Management
- Location: `topyaz/error_handling/__init__.py`
- Tracking of failed operations and their causes
- Recording of partial processing results
- Management of retry queues and recovery states
- Importance Score: 80

## File Handling

1. Media File Processing
- Specialized handling for video and image file formats
- Tracking of file dependencies during batch operations
- Management of temporary processing artifacts
- Importance Score: 85

2. Configuration Data Flow
- YAML-based configuration management
- Remote host configuration synchronization
- Product-specific setting propagation
- Importance Score: 70

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga data-flow".
</file>

<file path=".cursor/rules/processing-algorithms.mdc">
---
description: Core algorithms and transformations for media processing, batch operations, and hardware optimization
globs: **/processing/**,**/algorithms/**,**/batch/**,**/optimization/**
alwaysApply: false
---


# processing-algorithms

## Core Processing Components

### Hardware-Aware Processing Engine
- **File Path**: `topyaz/optimization/hardware.py`
- **Importance**: 95
- Intelligent detection and optimization for Apple Silicon vs Intel architectures
- Dynamic resource allocation based on available GPU capabilities
- Storage speed detection for optimizing batch processing throughput

### Batch Processing Pipeline
- **File Path**: `topyaz/cli/batch.py`
- **Importance**: 90
- Real-time progress monitoring with ETA calculations
- Intelligent job queuing based on hardware capabilities
- Recovery mechanisms for interrupted processing tasks

### Media-Specific Transformations
- **File Paths**: 
  - `topyaz/products/video_ai.py`
  - `topyaz/products/gigapixel_ai.py`
  - `topyaz/products/photo_ai.py`
- **Importance**: 85
- Model-specific processing parameter optimization
- Generative upscaling with AI prompt integration
- Custom enhancement algorithms for face recovery and denoising

### Remote Processing Engine
- **File Path**: `topyaz/execution/remote.py`
- **Importance**: 80
- Distributed processing across remote machines via SSH
- Load balancing for multi-machine batch operations
- Secure file transfer protocols for media processing

## Domain-Specific Algorithms

### AI Model Integration
- **File Path**: `topyaz/products/gigapixel_ai.py`
- **Importance**: 85
- Generative upscaling algorithms with custom creativity settings
- Texture-aware processing pipelines
- Adaptive model selection based on input characteristics

### Performance Optimization
- **File Path**: `topyaz/benchmark/__init__.py`
- **Importance**: 75
- Benchmarking algorithms for processing efficiency
- Comparative analysis against GUI tool performance
- Resource utilization optimization strategies

### Error Recovery Logic
- **File Path**: `topyaz/error_handling/__init__.py`
- **Importance**: 70
- Intelligent retry mechanisms for failed operations
- State preservation during batch processing
- Automatic error classification and recovery procedures

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga processing-algorithms".
</file>

<file path=".cursor/rules/remote-execution.mdc">
---
description: Technical specification for remote execution system enabling distributed processing via SSH with security and hardware optimization
globs: **/remote.py,**/execution/**,**/security/**,**/optimization/hardware.py
alwaysApply: false
---


# remote-execution

The remote execution system implements the following key business components:

### SSH-Based Remote Processing
- Located in `topyaz/execution/remote.py`
- Enables distributed processing of media files across remote machines
- Handles connection management and task distribution
- Supports both synchronous and asynchronous processing modes

### Security Implementation
- Located in `topyaz/security/__init__.py`  
- SSH key-based authentication for secure remote access
- Secure file transfer protocols for media transmission
- Command injection prevention mechanisms
- Validates remote host integrity and permissions

### Hardware Optimization
- Located in `topyaz/optimization/hardware.py`
- Automatically detects and optimizes for remote system capabilities:
  - CPU architecture (Apple Silicon vs Intel)
  - GPU availability and specifications
  - Storage speed and capacity
- Dynamically adjusts processing parameters based on hardware specs

### Remote Configuration
- Managed via YAML configuration
- Stores remote host details
- Defines processing preferences per remote machine
- Handles connection retry policies and timeout settings

Importance Scores:
- SSH Implementation: 85 (Key integration point for distributed processing)
- Security Measures: 90 (Critical for protecting remote operations)
- Hardware Optimization: 75 (Important for processing efficiency)
- Remote Configuration: 65 (Supporting functionality)

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga remote-execution".
</file>

<file path=".giga/specifications.json">
[
  {
    "fileName": "main-overview.mdc",
    "description": "Complete system overview covering the unified CLI architecture, component interactions, and high-level workflow for Topaz product integration"
  },
  {
    "fileName": "processing-algorithms.mdc",
    "description": "Detailed documentation of core processing algorithms including batch operations, hardware optimization strategies, and domain-specific data transformations for media processing"
  },
  {
    "fileName": "data-flow.mdc",
    "description": "Comprehensive documentation of data flow between local and remote processing components, including file handling, progress monitoring, and error recovery mechanisms"
  },
  {
    "fileName": "remote-execution.mdc",
    "description": "Technical details of the remote execution system including SSH implementation, security measures, and hardware optimization for distributed processing"
  }
]
</file>

<file path="src/topyaz/system/photo_ai_prefs.py">
#!/usr/bin/env python3
# this_file: src/topyaz/system/photo_ai_prefs.py
"""
Photo AI preferences manipulation for topyaz.

This module provides comprehensive control over Topaz Photo AI's autopilot
settings by manipulating the macOS preferences file before CLI execution.

Used in:
- src/topyaz/products/photo_ai.py
"""

import platform
from dataclasses import dataclass, field
from pathlib import Path
from typing import Any, Dict, List, Optional

from loguru import logger

from topyaz.system.preferences import PreferenceHandler, PreferenceValidationError


@dataclass
class PhotoAIAutopilotSettings:
    """
    Typed configuration for Photo AI autopilot settings.

    Maps directly to the autopilot preferences in the Photo AI plist file.
    """

    # Face Recovery
    face_strength: int = 80
    face_detection: str = "subject"  # auto, subject, all
    face_parts: list[str] = field(default_factory=lambda: ["hair", "necks"])

    # Denoise
    denoise_model: str = "Auto"
    denoise_levels: list[str] = field(default_factory=lambda: ["medium", "high", "severe"])
    denoise_strength: int = 3
    denoise_raw_model: str = "Auto"
    denoise_raw_levels: list[str] = field(default_factory=lambda: ["low", "medium", "high", "severe"])
    denoise_raw_strength: int = 3

    # Sharpen
    sharpen_model: str = "Auto"
    sharpen_levels: list[str] = field(default_factory=lambda: ["medium", "high"])
    sharpen_strength: int = 3

    # Upscaling
    upscaling_model: str = "High Fidelity V2"
    upscaling_factor: float = 2.0
    upscaling_type: str = "auto"  # auto, scale, width, height
    deblur_strength: int = 3
    denoise_upscale_strength: int = 3

    # Exposure & Lighting
    lighting_strength: int = 25
    raw_exposure_strength: int = 8
    adjust_color: bool = False

    # White Balance
    temperature_value: int = 50
    opacity_value: int = 100

    # Output
    resolution_unit: int = 1  # 1=inches, 2=cm
    default_resolution: float = -1  # -1=auto

    # Processing
    overwrite_files: bool = False
    recurse_directories: bool = False
    append_filters: bool = False


class PhotoAIPreferences(PreferenceHandler):
    """
    Handler for Topaz Photo AI preferences manipulation.

    Provides safe backup/restore and atomic updates of Photo AI's autopilot
    settings stored in the macOS preferences file.
    """

    # Valid values for validation
    VALID_FACE_DETECTION = {"auto", "subject", "all"}
    VALID_FACE_PARTS = {"hair", "necks", "eyes", "mouth"}
    VALID_DENOISE_MODELS = {"Auto", "Low Light Beta", "Severe Noise Beta"}
    VALID_DENOISE_LEVELS = {"low", "medium", "high", "severe"}
    VALID_SHARPEN_MODELS = {"Auto", "Sharpen Standard v2", "Lens Blur v2", "Sharpen Natural", "Sharpen Strong"}
    VALID_UPSCALING_MODELS = {"High Fidelity V2", "Standard V2", "Graphics V2"}
    VALID_UPSCALING_TYPES = {"auto", "scale", "width", "height"}

    def __init__(self, preference_file: Path | None = None):
        """
        Initialize Photo AI preferences handler.

        Args:
            preference_file: Optional custom path to preferences file.
                           If None, uses default Photo AI preferences location.
        """
        if preference_file is None:
            preference_file = self._get_default_preference_path()

        super().__init__(preference_file)

    def _get_default_preference_path(self) -> Path:
        """
        Get default Photo AI preferences file path for current platform.

        Returns:
            Path to Photo AI preferences file

        Raises:
            RuntimeError: If platform is not supported
        """
        if platform.system() == "Darwin":
            # macOS
            return Path.home() / "Library/Preferences/com.topazlabs.Topaz Photo AI.plist"
        if platform.system() == "Windows":
            # Windows - Photo AI uses registry, but this could be adapted
            msg = "Windows preferences manipulation not yet supported"
            raise RuntimeError(msg)
        msg = f"Unsupported platform: {platform.system()}"
        raise RuntimeError(msg)

    def validate_preferences(self, preferences: dict[str, Any]) -> bool:
        """
        Validate Photo AI preferences structure and values.

        Args:
            preferences: Preference dictionary to validate

        Returns:
            True if preferences are valid

        Raises:
            PreferenceValidationError: If preferences are invalid
        """
        try:
            # Basic structure validation
            required_keys = {
                "autopilotFaceDetectOption",
                "autopilotFaceStrength",
                "autopilotDenoisingModel",
                "autopilotUpscalingModel",
                "autopilotUpscalingFactor",
            }

            missing_keys = required_keys - set(preferences.keys())
            if missing_keys:
                msg = f"Missing required keys: {missing_keys}"
                raise PreferenceValidationError(msg)

            # Value validation
            face_detection = preferences.get("autopilotFaceDetectOption", "")
            if face_detection not in self.VALID_FACE_DETECTION:
                msg = f"Invalid face detection: {face_detection}"
                raise PreferenceValidationError(msg)

            face_strength = preferences.get("autopilotFaceStrength", 0)
            if not (0 <= face_strength <= 100):
                msg = f"Face strength must be 0-100: {face_strength}"
                raise PreferenceValidationError(msg)

            upscaling_factor = preferences.get("autopilotUpscalingFactor", 0)
            if not (1.0 <= upscaling_factor <= 6.0):
                msg = f"Upscaling factor must be 1.0-6.0: {upscaling_factor}"
                raise PreferenceValidationError(msg)

            logger.debug("Preferences validation passed")
            return True

        except Exception as e:
            logger.error(f"Preference validation failed: {e}")
            raise

    def get_default_preferences(self) -> dict[str, Any]:
        """
        Get default Photo AI preferences structure.

        Returns:
            Dictionary with default Photo AI preference values
        """
        return {
            # Face Recovery
            "autopilotFaceDetectOption": "subject",
            "autopilotFaceStrength": 80,
            "faceParts": ["hair", "necks"],
            # Denoise
            "autopilotDenoisingModel": "Auto",
            "autopilotDenoiseLevels": ["medium", "high", "severe"],
            "autopilotDenoiseStrength": 3,
            "autopilotDenoisingRawModel": "Auto",
            "autopilotDenoiseRawLevels": ["low", "medium", "high", "severe"],
            "autopilotDenoiseRawStrength": 3,
            # Sharpen
            "autopilotSharpeningModel": "Auto",
            "autopilotSharpenBlurs": ["medium", "high"],
            "autopilotSharpenStrength": 3,
            # Upscaling
            "autopilotUpscalingModel": "High Fidelity V2",
            "autopilotUpscalingFactor": 2.0,
            "autopilotUpscalingType": "auto",
            "autopilotUpscalingParam1Strength": 3,
            "autopilotUpscalingParam2Strength": 3,
            # Exposure & Color
            "autopilotNonRAWExposureStrength": 25,
            "autopilotRAWExposureStrength": 8,
            "autopilotAdjustColor": False,
            # White Balance
            "autopilotTemperatureValue": 50,
            "autopilotOpacityValue": 100,
            # Output
            "autopilotResolutionUnit": 1,
            "autopilotDefaultResolution": -1.0,
            # Processing
            "saveAllowOverwrite": False,
            "autopilotRecommendFilters": True,
            "saveAppendFilters": False,
        }

    def get_current_autopilot_settings(self) -> PhotoAIAutopilotSettings:
        """
        Get current autopilot settings from preferences.

        Returns:
            Current autopilot settings as typed dataclass
        """
        prefs = self.read_preferences()

        return PhotoAIAutopilotSettings(
            # Face Recovery
            face_strength=prefs.get("autopilotFaceStrength", 80),
            face_detection=prefs.get("autopilotFaceDetectOption", "subject"),
            face_parts=prefs.get("faceParts", ["hair", "necks"]),
            # Denoise
            denoise_model=prefs.get("autopilotDenoisingModel", "Auto"),
            denoise_levels=prefs.get("autopilotDenoiseLevels", ["medium", "high", "severe"]),
            denoise_strength=prefs.get("autopilotDenoiseStrength", 3),
            denoise_raw_model=prefs.get("autopilotDenoisingRawModel", "Auto"),
            denoise_raw_levels=prefs.get("autopilotDenoiseRawLevels", ["low", "medium", "high", "severe"]),
            denoise_raw_strength=prefs.get("autopilotDenoiseRawStrength", 3),
            # Sharpen
            sharpen_model=prefs.get("autopilotSharpeningModel", "Auto"),
            sharpen_levels=prefs.get("autopilotSharpenBlurs", ["medium", "high"]),
            sharpen_strength=prefs.get("autopilotSharpenStrength", 3),
            # Upscaling
            upscaling_model=prefs.get("autopilotUpscalingModel", "High Fidelity V2"),
            upscaling_factor=prefs.get("autopilotUpscalingFactor", 2.0),
            upscaling_type=prefs.get("autopilotUpscalingType", "auto"),
            deblur_strength=prefs.get("autopilotUpscalingParam1Strength", 3),
            denoise_upscale_strength=prefs.get("autopilotUpscalingParam2Strength", 3),
            # Exposure & Color
            lighting_strength=prefs.get("autopilotNonRAWExposureStrength", 25),
            raw_exposure_strength=prefs.get("autopilotRAWExposureStrength", 8),
            adjust_color=prefs.get("autopilotAdjustColor", False),
            # White Balance
            temperature_value=prefs.get("autopilotTemperatureValue", 50),
            opacity_value=prefs.get("autopilotOpacityValue", 100),
            # Output
            resolution_unit=prefs.get("autopilotResolutionUnit", 1),
            default_resolution=prefs.get("autopilotDefaultResolution", -1.0),
            # Processing
            overwrite_files=prefs.get("saveAllowOverwrite", False),
            recurse_directories=prefs.get("saveRecurseDirectories", False),
            append_filters=prefs.get("saveAppendFilters", False),
        )

    def update_autopilot_settings(self, settings: PhotoAIAutopilotSettings) -> None:
        """
        Update autopilot settings in preferences.

        Args:
            settings: New autopilot settings to apply
        """
        # Read current preferences
        prefs = self.read_preferences()

        # Update with new settings
        prefs.update(
            {
                # Face Recovery
                "autopilotFaceStrength": settings.face_strength,
                "autopilotFaceDetectOption": settings.face_detection,
                "faceParts": settings.face_parts,
                # Denoise
                "autopilotDenoisingModel": settings.denoise_model,
                "autopilotDenoiseLevels": settings.denoise_levels,
                "autopilotDenoiseStrength": settings.denoise_strength,
                "autopilotDenoisingRawModel": settings.denoise_raw_model,
                "autopilotDenoiseRawLevels": settings.denoise_raw_levels,
                "autopilotDenoiseRawStrength": settings.denoise_raw_strength,
                # Sharpen
                "autopilotSharpeningModel": settings.sharpen_model,
                "autopilotSharpenBlurs": settings.sharpen_levels,
                "autopilotSharpenStrength": settings.sharpen_strength,
                # Upscaling
                "autopilotUpscalingModel": settings.upscaling_model,
                "autopilotUpscalingFactor": settings.upscaling_factor,
                "autopilotUpscalingType": settings.upscaling_type,
                "autopilotUpscalingParam1Strength": settings.deblur_strength,
                "autopilotUpscalingParam2Strength": settings.denoise_upscale_strength,
                # Exposure & Color
                "autopilotNonRAWExposureStrength": settings.lighting_strength,
                "autopilotRAWExposureStrength": settings.raw_exposure_strength,
                "autopilotAdjustColor": settings.adjust_color,
                # White Balance
                "autopilotTemperatureValue": settings.temperature_value,
                "autopilotOpacityValue": settings.opacity_value,
                # Output
                "autopilotResolutionUnit": settings.resolution_unit,
                "autopilotDefaultResolution": settings.default_resolution,
                # Processing
                "saveAllowOverwrite": settings.overwrite_files,
                "saveAppendFilters": settings.append_filters,
            }
        )

        # Write updated preferences
        self.write_preferences(prefs)

        logger.info("Updated Photo AI autopilot settings")

    def validate_setting_values(self, **kwargs) -> None:
        """
        Validate individual setting values.

        Args:
            **kwargs: Settings to validate

        Raises:
            PreferenceValidationError: If any setting is invalid
        """
        # Face detection validation
        if "face_detection" in kwargs:
            if kwargs["face_detection"] not in self.VALID_FACE_DETECTION:
                msg = f"Invalid face_detection: {kwargs['face_detection']}"
                raise PreferenceValidationError(msg)

        # Face parts validation
        if "face_parts" in kwargs:
            invalid_parts = set(kwargs["face_parts"]) - self.VALID_FACE_PARTS
            if invalid_parts:
                msg = f"Invalid face_parts: {invalid_parts}"
                raise PreferenceValidationError(msg)

        # Strength validations (0-100)
        for param in [
            "face_strength",
            "lighting_strength",
            "raw_exposure_strength",
            "temperature_value",
            "opacity_value",
        ]:
            if param in kwargs:
                value = kwargs[param]
                if not (0 <= value <= 100):
                    msg = f"{param} must be 0-100: {value}"
                    raise PreferenceValidationError(msg)

        # Strength validations (0-10)
        for param in [
            "denoise_strength",
            "denoise_raw_strength",
            "sharpen_strength",
            "deblur_strength",
            "denoise_upscale_strength",
        ]:
            if param in kwargs:
                value = kwargs[param]
                if not (0 <= value <= 10):
                    msg = f"{param} must be 0-10: {value}"
                    raise PreferenceValidationError(msg)

        # Upscaling factor validation
        if "upscaling_factor" in kwargs:
            value = kwargs["upscaling_factor"]
            if not (1.0 <= value <= 6.0):
                msg = f"upscaling_factor must be 1.0-6.0: {value}"
                raise PreferenceValidationError(msg)

        # Model validations
        if "denoise_model" in kwargs and kwargs["denoise_model"] not in self.VALID_DENOISE_MODELS:
            msg = f"Invalid denoise_model: {kwargs['denoise_model']}"
            raise PreferenceValidationError(msg)

        if "sharpen_model" in kwargs and kwargs["sharpen_model"] not in self.VALID_SHARPEN_MODELS:
            msg = f"Invalid sharpen_model: {kwargs['sharpen_model']}"
            raise PreferenceValidationError(msg)

        if "upscaling_model" in kwargs and kwargs["upscaling_model"] not in self.VALID_UPSCALING_MODELS:
            msg = f"Invalid upscaling_model: {kwargs['upscaling_model']}"
            raise PreferenceValidationError(msg)

        if "upscaling_type" in kwargs and kwargs["upscaling_type"] not in self.VALID_UPSCALING_TYPES:
            msg = f"Invalid upscaling_type: {kwargs['upscaling_type']}"
            raise PreferenceValidationError(msg)

        # Level validations
        if "denoise_levels" in kwargs:
            invalid_levels = set(kwargs["denoise_levels"]) - self.VALID_DENOISE_LEVELS
            if invalid_levels:
                msg = f"Invalid denoise_levels: {invalid_levels}"
                raise PreferenceValidationError(msg)

        if "sharpen_levels" in kwargs:
            invalid_levels = set(kwargs["sharpen_levels"]) - self.VALID_DENOISE_LEVELS
            if invalid_levels:
                msg = f"Invalid sharpen_levels: {invalid_levels}"
                raise PreferenceValidationError(msg)

        logger.debug("Setting values validation passed")
</file>

<file path="src/topyaz/system/preferences.py">
#!/usr/bin/env python3
# this_file: src/topyaz/system/preferences.py
"""
Base preferences handling system for topyaz.

This module provides base classes and utilities for handling macOS
preference files and other configuration systems across different platforms.

Used in:
- src/topyaz/system/photo_ai_prefs.py
- src/topyaz/products/photo_ai.py
"""

import plistlib
import tempfile
import uuid
from abc import ABC, abstractmethod
from pathlib import Path
from typing import Any, Dict

from loguru import logger


class PreferenceError(Exception):
    """Base exception for preference-related errors."""

    pass


class PreferenceBackupError(PreferenceError):
    """Errors related to preference backup operations."""

    pass


class PreferenceRestoreError(PreferenceError):
    """Errors related to preference restore operations."""

    pass


class PreferenceValidationError(PreferenceError):
    """Errors related to preference validation."""

    pass


class PreferenceHandler(ABC):
    """
    Abstract base class for handling application preferences.

    Provides a framework for safely backing up, modifying, and restoring
    application preference files with atomic operations and error handling.
    """

    def __init__(self, preference_file: Path):
        """
        Initialize preference handler.

        Args:
            preference_file: Path to the preference file to manage
        """
        self.preference_file = Path(preference_file)
        self._backups: dict[str, Path] = {}

    @abstractmethod
    def validate_preferences(self, preferences: dict[str, Any]) -> bool:
        """
        Validate preference structure and values.

        Args:
            preferences: Preference dictionary to validate

        Returns:
            True if preferences are valid

        Raises:
            PreferenceValidationError: If preferences are invalid
        """
        pass

    @abstractmethod
    def get_default_preferences(self) -> dict[str, Any]:
        """
        Get default preferences structure.

        Returns:
            Dictionary with default preference values
        """
        pass

    def read_preferences(self) -> dict[str, Any]:
        """
        Read preferences from file.

        Returns:
            Dictionary with current preferences

        Raises:
            PreferenceError: If preferences cannot be read
        """
        try:
            if not self.preference_file.exists():
                logger.warning(f"Preference file not found: {self.preference_file}")
                return self.get_default_preferences()

            with open(self.preference_file, "rb") as f:
                preferences = plistlib.load(f)

            logger.debug(f"Successfully read preferences from {self.preference_file}")
            return preferences

        except Exception as e:
            error_msg = f"Failed to read preferences from {self.preference_file}: {e}"
            logger.error(error_msg)
            raise PreferenceError(error_msg) from e

    def write_preferences(self, preferences: dict[str, Any]) -> None:
        """
        Write preferences to file atomically.

        Args:
            preferences: Preference dictionary to write

        Raises:
            PreferenceError: If preferences cannot be written
        """
        try:
            # Validate preferences before writing
            self.validate_preferences(preferences)

            # Ensure parent directory exists
            self.preference_file.parent.mkdir(parents=True, exist_ok=True)

            # Write to temporary file first for atomic operation
            temp_file = self.preference_file.with_suffix(".tmp")

            with open(temp_file, "wb") as f:
                plistlib.dump(preferences, f)

            # Atomic move
            temp_file.replace(self.preference_file)

            logger.debug(f"Successfully wrote preferences to {self.preference_file}")

        except Exception as e:
            # Clean up temp file if it exists
            temp_file = self.preference_file.with_suffix(".tmp")
            if temp_file.exists():
                temp_file.unlink()

            error_msg = f"Failed to write preferences to {self.preference_file}: {e}"
            logger.error(error_msg)
            raise PreferenceError(error_msg) from e

    def backup(self) -> str:
        """
        Create a backup of current preferences.

        Returns:
            Backup ID for later restoration

        Raises:
            PreferenceBackupError: If backup cannot be created
        """
        try:
            backup_id = str(uuid.uuid4())

            if not self.preference_file.exists():
                logger.info(f"No preference file to backup: {self.preference_file}")
                # Store empty backup to indicate file didn't exist
                self._backups[backup_id] = None
                return backup_id

            # Create backup in temp directory
            backup_dir = Path(tempfile.gettempdir()) / "topyaz_backups"
            backup_dir.mkdir(exist_ok=True)

            backup_file = backup_dir / f"{self.preference_file.name}_{backup_id}.bak"

            # Copy current preferences to backup
            with open(self.preference_file, "rb") as src, open(backup_file, "wb") as dst:
                dst.write(src.read())

            self._backups[backup_id] = backup_file

            logger.info(f"Created preference backup: {backup_id}")
            return backup_id

        except Exception as e:
            error_msg = f"Failed to create backup: {e}"
            logger.error(error_msg)
            raise PreferenceBackupError(error_msg) from e

    def restore(self, backup_id: str) -> None:
        """
        Restore preferences from backup.

        Args:
            backup_id: Backup ID returned from backup()

        Raises:
            PreferenceRestoreError: If backup cannot be restored
        """
        try:
            if backup_id not in self._backups:
                msg = f"Unknown backup ID: {backup_id}"
                raise PreferenceRestoreError(msg)

            backup_file = self._backups[backup_id]

            if backup_file is None:
                # Original file didn't exist, remove current file
                if self.preference_file.exists():
                    self.preference_file.unlink()
                    logger.info(f"Removed preference file (original didn't exist): {self.preference_file}")
            else:
                # Restore from backup file
                if not backup_file.exists():
                    msg = f"Backup file not found: {backup_file}"
                    raise PreferenceRestoreError(msg)

                with open(backup_file, "rb") as src, open(self.preference_file, "wb") as dst:
                    dst.write(src.read())

                logger.info(f"Restored preferences from backup: {backup_id}")

            # Clean up backup
            self._cleanup_backup(backup_id)

        except Exception as e:
            error_msg = f"Failed to restore backup {backup_id}: {e}"
            logger.error(error_msg)
            raise PreferenceRestoreError(error_msg) from e

    def _cleanup_backup(self, backup_id: str) -> None:
        """
        Clean up backup file.

        Args:
            backup_id: Backup ID to clean up
        """
        try:
            if backup_id in self._backups:
                backup_file = self._backups[backup_id]
                if backup_file and backup_file.exists():
                    backup_file.unlink()
                    logger.debug(f"Cleaned up backup file: {backup_file}")
                del self._backups[backup_id]
        except Exception as e:
            logger.warning(f"Failed to clean up backup {backup_id}: {e}")

    def cleanup_all_backups(self) -> None:
        """Clean up all backup files."""
        for backup_id in list(self._backups.keys()):
            self._cleanup_backup(backup_id)

    def __enter__(self):
        """Context manager entry."""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit - cleanup all backups."""
        self.cleanup_all_backups()
</file>

<file path="src/topyaz/utils/validation.py">
#!/usr/bin/env python3
# this_file: src/topyaz/utils/validation.py
"""
File validation utilities for topyaz.

This module provides utilities for validating output files generated by
Topaz products, including file integrity checks and comparison with input files.
"""

import mimetypes
import os
import subprocess
from pathlib import Path
from typing import Any, Optional

from loguru import logger

from topyaz.core.types import ProcessingResult


def validate_output_file(input_path: Path, output_path: Path) -> dict[str, Any]:
    """
    Validate that an output file was generated correctly.

    Args:
        input_path: Path to the input file
        output_path: Path to the output file

    Returns:
        Dictionary with validation results
    """
    result = {
        "file_exists": False,
        "file_size": 0,
        "size_compared_to_input": 0.0,
        "mime_type": None,
        "is_valid_format": False,
        "media_info": {},
        "errors": [],
    }

    # Check if file exists
    if not output_path.exists():
        result["errors"].append(f"Output file does not exist: {output_path}")
        return result

    result["file_exists"] = True

    # Get file size
    try:
        result["file_size"] = output_path.stat().st_size
        input_size = input_path.stat().st_size if input_path.exists() else 0

        if input_size > 0:
            result["size_compared_to_input"] = result["file_size"] / input_size

    except Exception as e:
        result["errors"].append(f"Failed to get file size: {e}")

    # Check MIME type
    try:
        mime_type, _ = mimetypes.guess_type(str(output_path))
        result["mime_type"] = mime_type

        # Basic format validation
        if mime_type:
            if mime_type.startswith(("image/", "video/")):
                result["is_valid_format"] = True
            else:
                result["errors"].append(f"Unexpected MIME type: {mime_type}")

    except Exception as e:
        result["errors"].append(f"Failed to determine MIME type: {e}")

    # Try to get media info for images/videos
    if result["is_valid_format"]:
        try:
            result["media_info"] = get_media_info(output_path)
        except Exception as e:
            result["errors"].append(f"Failed to get media info: {e}")

    return result


def get_media_info(file_path: Path) -> dict[str, Any]:
    """
    Get media information about an image or video file.

    Args:
        file_path: Path to the media file

    Returns:
        Dictionary with media information
    """
    info = {}

    # Try to use ffprobe for video files
    if file_path.suffix.lower() in [".mp4", ".mov", ".avi", ".mkv"]:
        info.update(_get_video_info(file_path))

    # Try to use other methods for image files
    elif file_path.suffix.lower() in [".jpg", ".jpeg", ".png", ".tiff", ".tif"]:
        info.update(_get_image_info(file_path))

    return info


def _get_video_info(file_path: Path) -> dict[str, Any]:
    """Get video file information using ffprobe."""
    info = {}

    try:
        # Try ffprobe first
        cmd = ["ffprobe", "-v", "quiet", "-print_format", "json", "-show_format", "-show_streams", str(file_path)]

        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30, check=False)

        if result.returncode == 0:
            import json

            data = json.loads(result.stdout)

            # Extract format info
            if "format" in data:
                format_info = data["format"]
                info["duration"] = float(format_info.get("duration", 0))
                info["size"] = int(format_info.get("size", 0))
                info["format_name"] = format_info.get("format_name", "")
                info["bit_rate"] = int(format_info.get("bit_rate", 0))

            # Extract video stream info
            video_streams = [s for s in data.get("streams", []) if s.get("codec_type") == "video"]
            if video_streams:
                stream = video_streams[0]
                info["codec"] = stream.get("codec_name", "")
                info["width"] = int(stream.get("width", 0))
                info["height"] = int(stream.get("height", 0))
                info["fps"] = _parse_fps(stream.get("r_frame_rate", "0/1"))
                info["pixel_format"] = stream.get("pix_fmt", "")

            # Extract audio stream info
            audio_streams = [s for s in data.get("streams", []) if s.get("codec_type") == "audio"]
            if audio_streams:
                stream = audio_streams[0]
                info["audio_codec"] = stream.get("codec_name", "")
                info["sample_rate"] = int(stream.get("sample_rate", 0))
                info["channels"] = int(stream.get("channels", 0))

        else:
            logger.warning(f"ffprobe failed for {file_path}: {result.stderr}")

    except subprocess.TimeoutExpired:
        logger.warning(f"ffprobe timeout for {file_path}")
    except Exception as e:
        logger.warning(f"Failed to get video info for {file_path}: {e}")

    return info


def _get_image_info(file_path: Path) -> dict[str, Any]:
    """Get image file information."""
    info = {}

    try:
        # Try using PIL/Pillow if available
        from PIL import Image

        with Image.open(file_path) as img:
            info["width"] = img.width
            info["height"] = img.height
            info["format"] = img.format
            info["mode"] = img.mode

            # Get DPI if available
            if hasattr(img, "info") and "dpi" in img.info:
                info["dpi"] = img.info["dpi"]

    except ImportError:
        logger.warning("PIL/Pillow not available for image info")
    except Exception as e:
        logger.warning(f"Failed to get image info for {file_path}: {e}")

    return info


def _parse_fps(fps_str: str) -> float:
    """Parse frame rate from ffprobe format (e.g., '30/1')."""
    try:
        if "/" in fps_str:
            num, denom = fps_str.split("/")
            return float(num) / float(denom)
        return float(fps_str)
    except (ValueError, ZeroDivisionError):
        return 0.0


def compare_media_files(input_path: Path, output_path: Path) -> dict[str, Any]:
    """
    Compare input and output media files to validate processing results.

    Args:
        input_path: Path to the input file
        output_path: Path to the output file

    Returns:
        Dictionary with comparison results
    """
    comparison = {
        "input_valid": False,
        "output_valid": False,
        "size_ratio": 0.0,
        "resolution_changed": False,
        "format_changed": False,
        "issues": [],
        "input_info": {},
        "output_info": {},
    }

    # Validate input file
    if input_path.exists():
        comparison["input_valid"] = True
        try:
            comparison["input_info"] = get_media_info(input_path)
        except Exception as e:
            comparison["issues"].append(f"Failed to analyze input file: {e}")
    else:
        comparison["issues"].append(f"Input file does not exist: {input_path}")

    # Validate output file
    output_validation = validate_output_file(input_path, output_path)
    comparison["output_valid"] = output_validation["file_exists"] and output_validation["is_valid_format"]
    comparison["output_info"] = output_validation["media_info"]
    comparison["size_ratio"] = output_validation["size_compared_to_input"]

    if output_validation["errors"]:
        comparison["issues"].extend(output_validation["errors"])

    # Compare resolution if both files are valid
    if comparison["input_valid"] and comparison["output_valid"]:
        input_info = comparison["input_info"]
        output_info = comparison["output_info"]

        # Check resolution changes
        if all(k in input_info for k in ["width", "height"]) and all(k in output_info for k in ["width", "height"]):
            input_res = (input_info["width"], input_info["height"])
            output_res = (output_info["width"], output_info["height"])
            comparison["resolution_changed"] = input_res != output_res

            # Log resolution change details
            if comparison["resolution_changed"]:
                logger.info(f"Resolution changed from {input_res} to {output_res}")

        # Check format changes
        input_format = input_path.suffix.lower()
        output_format = output_path.suffix.lower()
        comparison["format_changed"] = input_format != output_format

    return comparison


def enhance_processing_result(result: ProcessingResult) -> ProcessingResult:
    """
    Enhance a ProcessingResult with file validation information.

    Args:
        result: Original processing result

    Returns:
        Enhanced processing result with validation info
    """
    if not result.success or not result.output_path:
        return result

    try:
        # Validate output file
        validation = validate_output_file(result.input_path, result.output_path)

        # Compare with input
        comparison = compare_media_files(result.input_path, result.output_path)

        # Add validation info to additional_info
        result.additional_info.update({"output_validation": validation, "file_comparison": comparison})

        # Update success status based on validation
        if not validation["file_exists"] or not validation["is_valid_format"]:
            result.success = False
            if not result.error_message:
                result.error_message = "Output file validation failed"

        # Log issues
        all_issues = validation.get("errors", []) + comparison.get("issues", [])
        for issue in all_issues:
            logger.warning(f"Validation issue: {issue}")

    except Exception as e:
        logger.error(f"Failed to validate processing result: {e}")
        result.additional_info["validation_error"] = str(e)

    return result
</file>

<file path="example.sh">
#!/usr/bin/env bash

echo
echo "$ topyaz video ./testdata/video.mp4 --model amq-13 --scale 2 --interpolate --fps 60"
topyaz video ./testdata/video.mp4 --model amq-13 --scale 2 --interpolate --fps 60

echo
echo "$ topyaz photo ./testdata/man.jpg --override-autopilot --upscale True --noise False"
topyaz photo ./testdata/man.jpg --override-autopilot --upscale True --noise False

echo
echo "$ topyaz gp ./testdata/man.jpg --scale 2"
topyaz gp ./testdata/man.jpg --scale 2
</file>

<file path=".github/workflows/push.yml">
name: Build & Test

on:
  push:
    branches: [main]
    tags-ignore: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Ruff lint
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          args: "check --output-format=github"

      - name: Run Ruff Format
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          args: "format --check --respect-gitignore"

  test:
    name: Run Tests
    needs: quality
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-suffix: ${{ matrix.os }}-${{ matrix.python-version }}

      - name: Install test dependencies
        run: |
          uv pip install --system --upgrade pip
          uv pip install --system ".[test]"

      - name: Run tests with Pytest
        run: uv run pytest -n auto --maxfail=1 --disable-warnings --cov-report=xml --cov-config=pyproject.toml --cov=src/topyaz --cov=tests tests/

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml

  build:
    name: Build Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install build tools
        run: uv pip install build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 5
</file>

<file path=".github/workflows/release.yml">
name: Release

on:
  push:
    tags: ["v*"]

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/topyaz
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install build tools
        run: uv pip install build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Verify distribution files
        run: |
          ls -la dist/
          test -n "$(find dist -name '*.whl')" || (echo "Wheel file missing" && exit 1)
          test -n "$(find dist -name '*.tar.gz')" || (echo "Source distribution missing" && exit 1)

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</file>

<file path="src/topyaz/core/__init__.py">
#!/usr/bin/env python3
# this_file: src/topyaz/core/__init__.py
"""
Core module for topyaz.

This module contains fundamental components like configuration management,
error definitions, and type declarations.
"""

from topyaz.core.config import Config
from topyaz.core.errors import (
    AuthenticationError,
    EnvironmentError,
    ExecutableNotFoundError,
    ProcessingError,
    RemoteExecutionError,
    TopazError,
    ValidationError,
)
from topyaz.core.types import (
    BatchInfo,
    ConfigDict,
    GigapixelParams,
    GPUInfo,
    GPUStatus,
    LogLevel,
    MemoryConstraints,
    PhotoAIParams,
    ProcessingOptions,
    ProcessingResult,
    Product,
    RemoteOptions,
    SystemRequirements,
    VideoAIParams,
)

__all__ = [
    "AuthenticationError",
    "BatchInfo",
    # Config
    "Config",
    "ConfigDict",
    "EnvironmentError",
    "ExecutableNotFoundError",
    "GPUInfo",
    "GPUStatus",
    "GigapixelParams",
    "LogLevel",
    "MemoryConstraints",
    "PhotoAIParams",
    "ProcessingError",
    "ProcessingOptions",
    "ProcessingResult",
    # Types
    "Product",
    "RemoteExecutionError",
    "RemoteOptions",
    "SystemRequirements",
    # Errors
    "TopazError",
    "ValidationError",
    "VideoAIParams",
]
</file>

<file path="src/topyaz/core/config.py">
#!/usr/bin/env python3
# this_file: src/topyaz/core/config.py
"""
Configuration management for topyaz.

This module handles loading, parsing, and accessing configuration from YAML files
and environment variables. It provides a centralized configuration management system
with support for nested keys and default values.

"""

import os
from pathlib import Path
from typing import Any, Optional

import yaml
from loguru import logger

from topyaz.core.types import ConfigDict


class Config:
    """
    Manages topyaz configuration from files and environment.

    Configuration is loaded from:
    1. Default values (hardcoded)
    2. System config file (~/.topyaz/config.yaml)
    3. User-specified config file
    4. Environment variables (TOPYAZ_* prefix)

    Configuration keys can be accessed using dot notation:
        config.get("video.default_model")
        config.get("defaults.output_dir", "~/processed")

    Used in:
    - topyaz/cli.py
    - topyaz/core/__init__.py
    """

    DEFAULT_CONFIG: ConfigDict = {
        "defaults": {
            "output_dir": "~/processed",
            "preserve_structure": True,
            "backup_originals": False,
            "log_level": "INFO",
            "timeout": 3600,
            "parallel_jobs": 1,
        },
        "video": {
            "default_model": "amq-13",
            "default_codec": "hevc_videotoolbox",
            "default_quality": 18,
            "device": 0,
        },
        "gigapixel": {
            "default_model": "std",
            "default_format": "preserve",
            "default_scale": 2,
            "parallel_read": 4,
            "quality": 95,
        },
        "photo": {
            "default_format": "preserve",
            "default_quality": 95,
            "autopilot_preset": "default",
            "bit_depth": 16,
        },
        "remote": {
            "ssh_port": 22,
            "connection_timeout": 30,
            "keepalive_interval": 60,
        },
        "paths": {
            "gigapixel": {
                "macos": [
                    "/Applications/Topaz Gigapixel AI.app/Contents/Resources/bin/gigapixel",
                    "/Applications/Topaz Gigapixel AI.app/Contents/MacOS/Topaz Gigapixel AI",
                ],
                "windows": [
                    "C:\\Program Files\\Topaz Labs LLC\\Topaz Gigapixel AI\\bin\\gigapixel.exe",
                ],
            },
            "video_ai": {
                "macos": [
                    "/Applications/Topaz Video AI.app/Contents/MacOS/ffmpeg",
                ],
                "windows": [
                    "C:\\Program Files\\Topaz Labs LLC\\Topaz Video AI\\ffmpeg.exe",
                ],
            },
            "photo_ai": {
                "macos": [
                    "/Applications/Topaz Photo AI.app/Contents/Resources/bin/tpai",
                    "/Applications/Topaz Photo AI.app/Contents/MacOS/Topaz Photo AI",
                ],
                "windows": [
                    "C:\\Program Files\\Topaz Labs LLC\\Topaz Photo AI\\tpai.exe",
                ],
            },
        },
    }

    def __init__(self, config_file: Path | None = None):
        """
        Initialize configuration manager.

        Args:
            config_file: Optional path to configuration file.
                        If not provided, uses ~/.topyaz/config.yaml

        """
        self.config_file = config_file or Path.home() / ".topyaz" / "config.yaml"
        self.config = self._load_config()
        self._load_env_vars()

    def _load_config(self) -> ConfigDict:
        """
        Load configuration from YAML file.

        Returns:
            Merged configuration dictionary

        """
        # Start with default config
        config = self._deep_copy_dict(self.DEFAULT_CONFIG)

        # Load from config file if it exists
        if self.config_file.exists():
            try:
                with open(self.config_file) as f:
                    user_config = yaml.safe_load(f) or {}

                # Merge user config into defaults
                config = self._merge_configs(config, user_config)
                logger.debug(f"Loaded configuration from {self.config_file}")

            except yaml.YAMLError as e:
                logger.warning(f"Failed to parse config file {self.config_file}: {e}")
            except Exception as e:
                logger.warning(f"Failed to load config from {self.config_file}: {e}")
        else:
            logger.debug(f"Config file not found: {self.config_file}")

        return config

    def _load_env_vars(self) -> None:
        """
        Load configuration from environment variables.

        Environment variables should be prefixed with TOPYAZ_ and use
        double underscores for nested keys:
            TOPYAZ_VIDEO__DEFAULT_MODEL=amq-13
            TOPYAZ_DEFAULTS__LOG_LEVEL=DEBUG

        """
        prefix = "TOPYAZ_"

        for key, value in os.environ.items():
            if not key.startswith(prefix):
                continue

            # Remove prefix and convert to lowercase
            config_key = key[len(prefix) :].lower()

            # Convert double underscores to dots for nested keys
            config_key = config_key.replace("__", ".")

            # Try to parse value as appropriate type
            parsed_value = self._parse_env_value(value)

            # Set the configuration value
            self._set_nested(config_key, parsed_value)
            logger.debug(f"Set config from env: {config_key} = {parsed_value}")

    def _parse_env_value(self, value: str) -> Any:
        """
        Parse environment variable value to appropriate type.

        Args:
            value: String value from environment

        Returns:
            Parsed value (bool, int, float, or str)

        """
        # Try to parse as boolean
        if value.lower() in ("true", "yes", "1", "on"):
            return True
        if value.lower() in ("false", "no", "0", "off"):
            return False

        # Try to parse as integer
        try:
            return int(value)
        except ValueError:
            pass

        # Try to parse as float
        try:
            return float(value)
        except ValueError:
            pass

        # Return as string
        return value

    def _merge_configs(self, base: ConfigDict, update: ConfigDict) -> ConfigDict:
        """
        Recursively merge two configuration dictionaries.

        Args:
            base: Base configuration
            update: Configuration to merge in

        Returns:
            Merged configuration

        """
        result = base.copy()

        for key, value in update.items():
            if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                # Recursive merge for nested dicts
                result[key] = self._merge_configs(result[key], value)
            else:
                # Direct assignment for other types
                result[key] = value

        return result

    def _deep_copy_dict(self, d: ConfigDict) -> ConfigDict:
        """
        Create a deep copy of a dictionary.

        Args:
            d: Dictionary to copy

        Returns:
            Deep copy of the dictionary

        """
        if not isinstance(d, dict):
            return d

        return {key: self._deep_copy_dict(value) if isinstance(value, dict) else value for key, value in d.items()}

    def get(self, key: str, default: Any = None) -> Any:
        """
        Get configuration value with dot notation support.

        Args:
            key: Configuration key (supports dot notation for nested keys)
            default: Default value if key not found

        Returns:
            Configuration value or default

        Examples:
            config.get("video.default_model")  # "amq-13"
            config.get("missing.key", "default")  # "default"

        """
        keys = key.split(".")
        value = self.config

        for k in keys:
            if isinstance(value, dict) and k in value:
                value = value[k]
            else:
                return default

        return value

    def _set_nested(self, key: str, value: Any) -> None:
        """
        Set a nested configuration value using dot notation.

        Args:
            key: Configuration key with dot notation
            value: Value to set

        """
        keys = key.split(".")
        target = self.config

        # Navigate to the parent of the target key
        for k in keys[:-1]:
            if k not in target:
                target[k] = {}
            target = target[k]

        # Set the final value
        if keys:
            target[keys[-1]] = value

    def set(self, key: str, value: Any) -> None:
        """
        Set configuration value.

        Args:
            key: Configuration key (supports dot notation)
            value: Value to set

        """
        self._set_nested(key, value)
        logger.debug(f"Set config: {key} = {value}")

    def save(self, path: Path | None = None) -> None:
        """
        Save current configuration to file.

        Args:
            path: Path to save to (defaults to original config file)

        """
        save_path = path or self.config_file
        save_path.parent.mkdir(parents=True, exist_ok=True)

        try:
            with open(save_path, "w") as f:
                yaml.safe_dump(self.config, f, default_flow_style=False, sort_keys=False)
            logger.info(f"Saved configuration to {save_path}")
        except Exception as e:
            logger.error(f"Failed to save configuration: {e}")
            raise

    def get_product_paths(self, product: str, platform: str | None = None) -> list[str]:
        """
        Get executable paths for a specific product.

        Args:
            product: Product name (gigapixel, video_ai, photo_ai)
            platform: Platform name (macos, windows). Auto-detected if None.

        Returns:
            List of possible executable paths

        """
        if platform is None:
            import platform as plat

            system = plat.system()
            platform = "macos" if system == "Darwin" else "windows"

        paths = self.get(f"paths.{product}.{platform}", [])
        return paths if isinstance(paths, list) else []

    def to_dict(self) -> ConfigDict:
        """
        Get full configuration as dictionary.

        Returns:
            Complete configuration dictionary

        """
        return self._deep_copy_dict(self.config)
</file>

<file path="src/topyaz/core/errors.py">
#!/usr/bin/env python3
# this_file: src/topyaz/core/errors.py
"""
Custom exception classes for topyaz.

This module defines all custom exceptions used throughout the topyaz package.
These exceptions provide specific error handling for different failure scenarios.

"""


class TopazError(Exception):
    """
    Base exception for all topyaz errors.

    This is the parent class for all custom exceptions in topyaz.
    It allows catching all topyaz-specific errors with a single except clause.

    Used by:
    - All other exception classes (as parent)
    - Error handling throughout the package

    Used in:
    - topyaz/__init__.py
    - topyaz/cli.py
    - topyaz/core/__init__.py
    """

    pass


class AuthenticationError(TopazError):
    """
    Authentication-related errors.

    Raised when authentication fails for any Topaz product, including:
    - Missing license files
    - Expired tokens
    - Invalid credentials
    - GUI login requirements

    Used by:
    - Video AI authentication validation
    - Remote SSH authentication
    - License verification

    Used in:
    - topyaz/__init__.py
    - topyaz/core/__init__.py
    - topyaz/execution/remote.py
    - topyaz/products/video_ai.py
    """

    pass


class EnvironmentError(TopazError):
    """
    Environment validation errors.

    Raised when system environment doesn't meet requirements:
    - Insufficient memory
    - Insufficient disk space
    - Unsupported OS version
    - Missing dependencies

    Used by:
    - Environment validation during initialization
    - Pre-processing checks

    Used in:
    - topyaz/__init__.py
    - topyaz/core/__init__.py
    - topyaz/system/environment.py
    """

    pass


class ProcessingError(TopazError):
    """
    Processing-related errors.

    Raised when processing operations fail:
    - Command execution failures
    - File I/O errors
    - Timeout errors
    - GPU/memory allocation failures

    Used by:
    - Command execution (local and remote)
    - Product processing methods
    - Batch processing operations

    Used in:
    - topyaz/__init__.py
    - topyaz/core/__init__.py
    - topyaz/execution/local.py
    - topyaz/execution/remote.py
    - topyaz/products/base.py
    - topyaz/products/photo_ai.py
    """

    pass


class ValidationError(TopazError):
    """
    Parameter validation errors.

    Raised when input parameters are invalid:
    - Out of range values
    - Invalid file formats
    - Invalid model names
    - Path validation failures

    Used by:
    - Parameter validation methods
    - Input path validation

    Used in:
    - topyaz/__init__.py
    - topyaz/core/__init__.py
    - topyaz/products/base.py
    - topyaz/products/gigapixel.py
    - topyaz/products/photo_ai.py
    - topyaz/products/video_ai.py
    - topyaz/system/paths.py
    """

    pass


class ExecutableNotFoundError(EnvironmentError):
    """
    Executable not found error.

    Raised when a Topaz product executable cannot be located.

    Used by:
    - Executable finding methods
    - Product initialization

    Used in:
    - topyaz/__init__.py
    - topyaz/core/__init__.py
    - topyaz/products/base.py
    """

    def __init__(self, product: str, search_paths: list[str] | None = None):
        """
        Initialize executable not found error.

        Args:
            product: Name of the Topaz product
            search_paths: List of paths that were searched

        """
        self.product = product
        self.search_paths = search_paths or []

        msg = f"{product} executable not found"
        if self.search_paths:
            msg += f". Searched paths: {', '.join(self.search_paths)}"

        super().__init__(msg)


class RemoteExecutionError(ProcessingError):
    """
    Remote execution specific errors.

    Raised when remote command execution fails:
    - SSH connection failures
    - Remote command failures
    - File transfer errors

    Used by:
    - Remote execution module
    - SSH operations

    Used in:
    - topyaz/__init__.py
    - topyaz/core/__init__.py
    - topyaz/execution/remote.py
    """

    pass
</file>

<file path="src/topyaz/core/types.py">
#!/usr/bin/env python3
# this_file: src/topyaz/core/types.py
"""
Type definitions and data classes for topyaz.

This module contains all type definitions, data classes, and enums used
throughout the topyaz package for type safety and better code organization.
"""

from dataclasses import dataclass, field
from enum import Enum
from pathlib import Path
from typing import Any, Optional

# Type aliases for clarity
FilePath = Path | str
CommandList = list[str]
ConfigDict = dict[str, Any]
ParamDict = dict[str, Any]


class Product(Enum):
    """Enumeration of supported Topaz products.

    Used in:
    - topyaz/cli.py
    - topyaz/core/__init__.py
    - topyaz/products/base.py
    - topyaz/products/gigapixel.py
    - topyaz/products/photo_ai.py
    - topyaz/products/video_ai.py
    - topyaz/system/memory.py
    - topyaz/system/paths.py
    """

    GIGAPIXEL = "gigapixel"
    VIDEO_AI = "video_ai"
    PHOTO_AI = "photo_ai"


class LogLevel(Enum):
    """Logging level enumeration.

    Used in:
    - topyaz/core/__init__.py
    - topyaz/utils/logging.py
    """

    DEBUG = "DEBUG"
    INFO = "INFO"
    WARNING = "WARNING"
    ERROR = "ERROR"
    CRITICAL = "CRITICAL"


@dataclass
class ProcessingOptions:
    """
    Common processing options used across all products.

    These options control general behavior like logging, output handling,
    and execution modes.

    Used in:
    - topyaz/cli.py
    - topyaz/core/__init__.py
    - topyaz/products/base.py
    - topyaz/products/gigapixel.py
    - topyaz/products/photo_ai.py
    - topyaz/products/video_ai.py
    """

    verbose: bool = True
    dry_run: bool = False
    timeout: int = 3600
    parallel_jobs: int = 1
    output_dir: Path | None = None
    preserve_structure: bool = True
    backup_originals: bool = False
    log_level: str = "INFO"


@dataclass
class RemoteOptions:
    """
    Remote execution options for SSH operations.

    These options are used when executing commands on remote machines.

    Used in:
    - topyaz/cli.py
    - topyaz/core/__init__.py
    - topyaz/execution/remote.py
    """

    host: str | None = None
    user: str | None = None
    ssh_key: Path | None = None
    ssh_port: int = 22
    connection_timeout: int = 30


@dataclass
class GigapixelParams:
    """
    Gigapixel AI processing parameters.

    Contains all parameters specific to Gigapixel AI processing operations.

    Used in:
    - topyaz/core/__init__.py
    - topyaz/products/gigapixel.py
    """

    model: str = "std"
    scale: int = 2
    denoise: int | None = None
    sharpen: int | None = None
    compression: int | None = None
    detail: int | None = None
    creativity: int | None = None
    texture: int | None = None
    prompt: str | None = None
    face_recovery: int | None = None
    face_recovery_version: int = 2
    format: str = "preserve"
    quality: int = 95
    bit_depth: int = 0
    parallel_read: int = 1


@dataclass
class VideoAIParams:
    """
    Video AI processing parameters.

    Contains all parameters specific to Video AI processing operations.

    Used in:
    - topyaz/core/__init__.py
    - topyaz/products/video_ai.py
    """

    model: str = "amq-13"
    scale: int = 2
    fps: int | None = None
    codec: str = "hevc_videotoolbox"
    quality: int = 18
    denoise: int | None = None
    details: int | None = None
    halo: int | None = None
    blur: int | None = None
    compression: int | None = None
    stabilize: bool = False
    interpolate: bool = False
    custom_filters: str | None = None
    device: int = 0


@dataclass
class PhotoAIParams:
    """
    Photo AI processing parameters.

    Contains all parameters specific to Photo AI processing operations.

    Used in:
    - topyaz/core/__init__.py
    - topyaz/products/photo_ai.py
    """

    autopilot_preset: str = "default"
    format: str = "preserve"
    quality: int = 95
    compression: int = 2
    bit_depth: int = 16
    tiff_compression: str = "zip"
    show_settings: bool = False
    skip_processing: bool = False
    override_autopilot: bool = False
    upscale: bool | None = None
    noise: bool | None = None
    sharpen: bool | None = None
    lighting: bool | None = None
    color: bool | None = None


@dataclass
class GPUInfo:
    """Information about a GPU device.

    Used in:
    - topyaz/core/__init__.py
    - topyaz/system/gpu.py
    """

    name: str
    type: str  # nvidia, amd, intel, metal
    memory_total_mb: int | None = None
    memory_used_mb: int | None = None
    memory_free_mb: int | None = None
    utilization_percent: int | None = None
    temperature_c: int | None = None
    power_draw_w: float | None = None
    vram: str | None = None  # For Metal GPUs
    device_id: int = 0


@dataclass
class GPUStatus:
    """Overall GPU status and available devices.

    Used in:
    - topyaz/core/__init__.py
    - topyaz/system/gpu.py
    """

    available: bool
    devices: list[GPUInfo] = field(default_factory=list)
    errors: list[str] = field(default_factory=list)

    @property
    def count(self) -> int:
        """Get number of available GPU devices."""
        return len(self.devices)

    @property
    def total_memory_mb(self) -> int:
        """Get total memory across all GPUs."""
        return sum(device.memory_total_mb for device in self.devices if device.memory_total_mb)


@dataclass
class MemoryConstraints:
    """Memory constraint information and recommendations.

    Used in:
    - topyaz/core/__init__.py
    - topyaz/system/memory.py
    """

    available_gb: float
    total_gb: float
    percent_used: float
    recommendations: list[str] = field(default_factory=list)

    @property
    def is_low(self) -> bool:
        """Check if available memory is critically low."""
        return self.available_gb < 4 or self.percent_used > 90

    @property
    def is_constrained(self) -> bool:
        """Check if memory is constrained for heavy operations."""
        return self.available_gb < 8 or self.percent_used > 85


@dataclass
class BatchInfo:
    """Information about batch processing.

    Used in:
    - topyaz/core/__init__.py
    """

    total_files: int
    batch_size: int
    num_batches: int
    current_batch: int = 0
    processed_files: int = 0
    failed_files: int = 0

    @property
    def progress_percent(self) -> float:
        """Calculate progress percentage."""
        if self.total_files == 0:
            return 0.0
        return (self.processed_files / self.total_files) * 100

    @property
    def success_rate(self) -> float:
        """Calculate success rate percentage."""
        total_processed = self.processed_files + self.failed_files
        if total_processed == 0:
            return 100.0
        return (self.processed_files / total_processed) * 100


@dataclass
class ProcessingResult:
    """Result of a processing operation.

    Used in:
    - topyaz/core/__init__.py
    - topyaz/execution/progress.py
    - topyaz/products/base.py
    """

    success: bool
    input_path: Path
    output_path: Path | None = None
    error_message: str | None = None
    processing_time: float = 0.0
    returncode: int = 0
    stdout: str = ""
    stderr: str = ""
    command: CommandList | None = None
    execution_time: float = 0.0
    file_size_before: int = 0
    file_size_after: int = 0
    additional_info: dict[str, Any] = field(default_factory=dict)


@dataclass
class SystemRequirements:
    """System requirements for Topaz products.

    Used in:
    - topyaz/core/__init__.py
    - topyaz/system/environment.py
    """

    min_memory_gb: int = 16
    min_disk_space_gb: int = 80
    min_macos_version: tuple[int, int] = (11, 0)
    required_gpu: bool = True
    gpu_memory_mb: int = 4096  # Minimum GPU memory
</file>

<file path="src/topyaz/execution/__init__.py">
#!/usr/bin/env python3
# this_file: src/topyaz/execution/__init__.py
"""
Execution module for topyaz.

This module contains components for executing commands locally and remotely,
with support for progress monitoring and error handling.
"""

from topyaz.execution.base import (
    CommandExecutor,
    ExecutorContext,
    ProgressAwareExecutor,
    ProgressCallback,
)
from topyaz.execution.local import LocalExecutor
from topyaz.execution.progress import (
    BatchProgressTracker,
    ConsoleProgressCallback,
    LoggingProgressCallback,
    OutputProgressParser,
    SilentProgressCallback,
    create_batch_tracker,
    create_output_parser,
    create_progress_callback,
)
from topyaz.execution.remote import (
    RemoteConnectionPool,
    RemoteExecutor,
    get_remote_executor,
    return_remote_executor,
)

__all__ = [
    "BatchProgressTracker",
    # Base interfaces
    "CommandExecutor",
    "ConsoleProgressCallback",
    "ExecutorContext",
    # Local execution
    "LocalExecutor",
    "LoggingProgressCallback",
    "OutputProgressParser",
    "ProgressAwareExecutor",
    "ProgressCallback",
    "RemoteConnectionPool",
    # Remote execution
    "RemoteExecutor",
    # Progress monitoring
    "SilentProgressCallback",
    "create_batch_tracker",
    "create_output_parser",
    "create_progress_callback",
    "get_remote_executor",
    "return_remote_executor",
]
</file>

<file path="src/topyaz/execution/base.py">
#!/usr/bin/env python3
# this_file: src/topyaz/execution/base.py
"""
Base classes for command execution in topyaz.

This module defines abstract interfaces for command execution that can be
implemented for local and remote execution environments.

"""

from abc import ABC, abstractmethod
from typing import Optional, Tuple

from topyaz.core.types import CommandList


class CommandExecutor(ABC):
    """
    Abstract base class for command execution.

    Defines the interface for executing commands in different environments
    (local, remote, containerized, etc.).

    Used in:
    - topyaz/execution/__init__.py
    - topyaz/execution/local.py
    - topyaz/execution/remote.py
    - topyaz/products/base.py
    - topyaz/products/gigapixel.py
    - topyaz/products/photo_ai.py
    - topyaz/products/video_ai.py
    """

    @abstractmethod
    def execute(
        self, command: CommandList, input_data: str | None = None, timeout: int | None = None
    ) -> tuple[int, str, str]:
        """
        Execute a command and return the result.

        Args:
            command: Command and arguments to execute
            input_data: Optional input data to pass to command
            timeout: Optional timeout in seconds

        Returns:
            Tuple of (return_code, stdout, stderr)

        Raises:
            ProcessingError: If command execution fails
        """
        pass

    @abstractmethod
    def is_available(self) -> bool:
        """
        Check if this executor is available for use.

        Returns:
            True if executor can be used, False otherwise
        """
        pass

    def supports_progress(self) -> bool:
        """
        Check if this executor supports progress monitoring.

        Returns:
            True if progress monitoring is supported

        """
        return False

    def get_info(self) -> dict[str, str]:
        """
        Get information about this executor.

        Returns:
            Dictionary with executor information

        Used in:
        - topyaz/execution/local.py
        - topyaz/execution/remote.py
        """
        return {
            "type": self.__class__.__name__,
            "available": str(self.is_available()),
            "supports_progress": str(self.supports_progress()),
        }


class ProgressCallback(ABC):
    """
    Abstract base class for progress callbacks.

    Used to monitor command execution progress.

    Used in:
    - topyaz/execution/__init__.py
    - topyaz/execution/local.py
    - topyaz/execution/remote.py
    """

    @abstractmethod
    def on_output(self, line: str, is_stderr: bool = False) -> None:
        """
        Called when command produces output.

        Args:
            line: Output line
            is_stderr: True if from stderr, False if from stdout
        """
        pass

    @abstractmethod
    def on_progress(self, current: int, total: int | None = None) -> None:
        """
        Called when progress can be determined.

        Args:
            current: Current progress value
            total: Total value (None if unknown)
        """
        pass

    @abstractmethod
    def on_complete(self, success: bool, message: str = "") -> None:
        """
        Called when command completes.

        Args:
            success: Whether command succeeded
            message: Optional completion message
        """
        pass


class ProgressAwareExecutor(CommandExecutor):
    """
    Extended executor interface that supports progress monitoring.

    This is a specialized interface for executors that can provide
    real-time progress feedback during command execution.

    Used in:
    - topyaz/execution/__init__.py
    - topyaz/execution/local.py
    - topyaz/execution/remote.py
    """

    @abstractmethod
    def execute_with_progress(
        self,
        command: CommandList,
        callback: ProgressCallback,
        input_data: str | None = None,
        timeout: int | None = None,
    ) -> tuple[int, str, str]:
        """
        Execute command with progress monitoring.

        Args:
            command: Command and arguments to execute
            callback: Progress callback handler
            input_data: Optional input data
            timeout: Optional timeout in seconds

        Returns:
            Tuple of (return_code, stdout, stderr)

        Raises:
            ProcessingError: If command execution fails
        """
        pass

    def supports_progress(self) -> bool:
        """Progress monitoring is supported by default."""
        return True


class ExecutorContext:
    """
    Context information for command execution.

    Provides environment variables, working directory, and other
    context needed for command execution.

    Used in:
    - topyaz/execution/__init__.py
    - topyaz/execution/local.py
    - topyaz/execution/remote.py
    """

    def __init__(
        self,
        working_dir: str | None = None,
        env_vars: dict[str, str] | None = None,
        timeout: int = 3600,
        dry_run: bool = False,
    ):
        """
        Initialize execution context.

        Args:
            working_dir: Working directory for command execution
            env_vars: Additional environment variables
            timeout: Default timeout in seconds
            dry_run: If True, don't actually execute commands

        """
        self.working_dir = working_dir
        self.env_vars = env_vars or {}
        self.timeout = timeout
        self.dry_run = dry_run

    def get_env(self) -> dict[str, str]:
        """
        Get complete environment variables.

        Returns:
            Dictionary of environment variables

        Used in:
        - topyaz/execution/local.py
        """
        import os

        env = os.environ.copy()
        env.update(self.env_vars)
        return env

    def add_env_var(self, key: str, value: str) -> None:
        """
        Add an environment variable.

        Args:
            key: Variable name
            value: Variable value

        """
        self.env_vars[key] = value

    def remove_env_var(self, key: str) -> None:
        """
        Remove an environment variable.

        Args:
            key: Variable name to remove

        """
        self.env_vars.pop(key, None)
</file>

<file path="src/topyaz/execution/local.py">
#!/usr/bin/env python3
# this_file: src/topyaz/execution/local.py
"""
Local command execution for topyaz.

This module provides local command execution capabilities with support for
progress monitoring, timeout handling, and error recovery.

"""

import subprocess
import threading
import time
from typing import Optional, Tuple

from loguru import logger

from topyaz.core.errors import ProcessingError
from topyaz.core.types import CommandList
from topyaz.execution.base import CommandExecutor, ExecutorContext, ProgressAwareExecutor, ProgressCallback


class LocalExecutor(ProgressAwareExecutor):
    """
    Executes commands locally on the current machine.

    Provides both simple execution and progress-aware execution
    with real-time output monitoring.

    Used in:
    - topyaz/cli.py
    - topyaz/execution/__init__.py
    """

    def __init__(self, context: ExecutorContext | None = None):
        """
        Initialize local executor.

        Args:
            context: Execution context with environment and settings

        """
        self.context = context or ExecutorContext()

    def is_available(self) -> bool:
        """Local execution is always available."""
        return True

    def execute(
        self, command: CommandList, input_data: str | None = None, timeout: int | None = None
    ) -> tuple[int, str, str]:
        """
        Execute command locally.

        Args:
            command: Command and arguments to execute
            input_data: Optional input data to pass to command
            timeout: Optional timeout override

        Returns:
            Tuple of (return_code, stdout, stderr)

        Raises:
            ProcessingError: If command execution fails

        """
        actual_timeout = timeout or self.context.timeout

        if self.context.dry_run:
            logger.info(f"DRY RUN: {' '.join(command)}")
            return 0, "dry-run-output", ""

        try:
            logger.debug(f"Executing locally: {' '.join(command)}")

            # Prepare subprocess arguments
            kwargs = {
                "input": input_data,
                "capture_output": True,
                "text": True,
                "timeout": actual_timeout,
                "encoding": "utf-8",
                "errors": "ignore",
                "check": False,
                "env": self.context.get_env(),
            }

            if self.context.working_dir:
                kwargs["cwd"] = self.context.working_dir

            # Execute command
            start_time = time.time()
            result = subprocess.run(command, **kwargs, check=False)
            execution_time = time.time() - start_time

            logger.debug(f"Command completed in {execution_time:.2f}s with return code: {result.returncode}")

            if result.stdout:
                logger.debug(f"STDOUT: {result.stdout[:500]}{'...' if len(result.stdout) > 500 else ''}")
            if result.stderr:
                logger.debug(f"STDERR: {result.stderr[:500]}{'...' if len(result.stderr) > 500 else ''}")

            return result.returncode, result.stdout, result.stderr

        except subprocess.TimeoutExpired:
            msg = f"Command timed out after {actual_timeout} seconds"
            logger.error(msg)
            raise ProcessingError(msg)

        except FileNotFoundError:
            msg = f"Command not found: {command[0]}"
            logger.error(msg)
            raise ProcessingError(msg)

        except Exception as e:
            msg = f"Command execution failed: {e}"
            logger.error(msg)
            raise ProcessingError(msg)

    def execute_with_progress(
        self,
        command: CommandList,
        callback: ProgressCallback,
        input_data: str | None = None,
        timeout: int | None = None,
    ) -> tuple[int, str, str]:
        """
        Execute command with progress monitoring.

        Args:
            command: Command and arguments to execute
            callback: Progress callback handler
            input_data: Optional input data
            timeout: Optional timeout override

        Returns:
            Tuple of (return_code, stdout, stderr)

        Raises:
            ProcessingError: If command execution fails

        """
        actual_timeout = timeout or self.context.timeout

        if self.context.dry_run:
            logger.info(f"DRY RUN (with progress): {' '.join(command)}")
            callback.on_progress(1, 1)
            callback.on_complete(True, "Dry run completed")
            return 0, "dry-run-output", ""

        try:
            logger.debug(f"Executing locally with progress: {' '.join(command)}")

            # Start process
            process = subprocess.Popen(
                command,
                stdin=subprocess.PIPE if input_data else None,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                encoding="utf-8",
                errors="ignore",
                env=self.context.get_env(),
                cwd=self.context.working_dir,
            )

            # Collect output
            stdout_lines = []
            stderr_lines = []

            # Output reading threads
            def read_stdout():
                try:
                    for line in iter(process.stdout.readline, ""):
                        stdout_lines.append(line)
                        callback.on_output(line.rstrip(), is_stderr=False)
                        self._extract_progress(line, callback)
                finally:
                    process.stdout.close()

            def read_stderr():
                try:
                    for line in iter(process.stderr.readline, ""):
                        stderr_lines.append(line)
                        callback.on_output(line.rstrip(), is_stderr=True)
                        self._extract_progress(line, callback)
                finally:
                    process.stderr.close()

            # Start output threads
            stdout_thread = threading.Thread(target=read_stdout)
            stderr_thread = threading.Thread(target=read_stderr)

            stdout_thread.start()
            stderr_thread.start()

            # Send input if provided
            if input_data:
                try:
                    process.stdin.write(input_data)
                    process.stdin.close()
                except Exception as e:
                    logger.debug(f"Failed to send input: {e}")

            # Wait for process with timeout
            try:
                exit_code = process.wait(timeout=actual_timeout)
            except subprocess.TimeoutExpired:
                process.kill()
                callback.on_complete(False, f"Command timed out after {actual_timeout} seconds")
                msg = f"Command timed out after {actual_timeout} seconds"
                raise ProcessingError(msg)

            # Wait for output threads
            stdout_thread.join(timeout=5)
            stderr_thread.join(timeout=5)

            # Combine output
            stdout_text = "".join(stdout_lines)
            stderr_text = "".join(stderr_lines)

            # Report completion
            success = exit_code == 0
            callback.on_complete(success, f"Command completed with exit code {exit_code}")

            logger.debug(f"Command completed with return code: {exit_code}")

            return exit_code, stdout_text, stderr_text

        except ProcessingError:
            raise
        except Exception as e:
            callback.on_complete(False, str(e))
            msg = f"Command execution failed: {e}"
            logger.error(msg)
            raise ProcessingError(msg)

    def _extract_progress(self, line: str, callback: ProgressCallback) -> None:
        """
        Extract progress information from command output.

        Args:
            line: Output line to analyze
            callback: Progress callback to notify

        """
        line_lower = line.lower()

        # Look for common progress patterns
        import re

        # FFmpeg progress (Video AI)
        ffmpeg_match = re.search(r"frame=\s*(\d+)", line)
        if ffmpeg_match:
            frame_num = int(ffmpeg_match.group(1))
            callback.on_progress(frame_num)
            return

        # Percentage progress
        percent_match = re.search(r"(\d+)%", line)
        if percent_match:
            percent = int(percent_match.group(1))
            callback.on_progress(percent, 100)
            return

        # Processing indicators
        if any(keyword in line_lower for keyword in ["processing", "analyzing", "enhancing"]):
            # Simple progress indication without specific numbers
            callback.on_progress(1)  # Indicates activity

    def get_info(self) -> dict[str, str]:
        """Get information about this executor.

        Used in:
        - topyaz/cli.py
        - topyaz/execution/remote.py
        """
        info = super().get_info()
        info.update(
            {
                "platform": "local",
                "working_dir": self.context.working_dir or "current",
                "timeout": str(self.context.timeout),
                "dry_run": str(self.context.dry_run),
            }
        )
        return info


class SimpleProgressCallback(ProgressCallback):
    """
    Simple progress callback that logs progress updates.

    This is a basic implementation that can be used when no custom
    progress handling is needed.

    """

    def __init__(self, task_name: str = "Processing"):
        """
        Initialize simple progress callback.

        Args:
            task_name: Name of the task for logging

        """
        self.task_name = task_name
        self._last_percent = -1

    def on_output(self, line: str, is_stderr: bool = False) -> None:
        """Log output line at debug level."""
        logger.debug(f"{'STDERR' if is_stderr else 'STDOUT'}: {line}")

    def on_progress(self, current: int, total: int | None = None) -> None:
        """Log progress updates."""
        if total:
            percent = int((current / total) * 100)
            if percent >= self._last_percent + 10:  # Log every 10%
                self._last_percent = percent
                logger.info(f"{self.task_name}: {percent}% ({current}/{total})")
        # Indeterminate progress
        elif current % 10 == 0:  # Log every 10th update
            logger.info(f"{self.task_name}: Working... ({current})")

    def on_complete(self, success: bool, message: str = "") -> None:
        """Log completion."""
        if success:
            logger.success(f"{self.task_name}: {message or 'Completed successfully'}")
        else:
            logger.error(f"{self.task_name}: {message or 'Failed'}")


class QuietProgressCallback(ProgressCallback):
    """
    Progress callback that doesn't log anything.

    Useful when you want progress monitoring internally but
    don't want console output.

    """

    def __init__(self):
        """Initialize quiet progress callback."""
        self.current = 0
        self.total = None
        self.success = None
        self.message = ""

    def on_output(self, line: str, is_stderr: bool = False) -> None:
        """Silently ignore output."""
        pass

    def on_progress(self, current: int, total: int | None = None) -> None:
        """Store progress internally."""
        self.current = current
        if total is not None:
            self.total = total

    def on_complete(self, success: bool, message: str = "") -> None:
        """Store completion status."""
        self.success = success
        self.message = message

    def get_progress_percent(self) -> float | None:
        """Get current progress as percentage."""
        if self.total and self.total > 0:
            return (self.current / self.total) * 100
        return None
</file>

<file path="src/topyaz/execution/progress.py">
#!/usr/bin/env python3
# this_file: src/topyaz/execution/progress.py
"""
Progress monitoring and callback utilities for topyaz.

This module provides progress tracking capabilities for command execution,
batch processing, and long-running operations.

"""

import re
import threading
import time
from abc import ABC, abstractmethod
from collections.abc import Callable
from re import Pattern
from typing import Any, Optional

from loguru import logger
from rich.console import Console
from rich.progress import (
    BarColumn,
    MofNCompleteColumn,
    Progress,
    SpinnerColumn,
    TaskID,
    TextColumn,
    TimeElapsedColumn,
    TimeRemainingColumn,
)

from topyaz.core.types import ProcessingResult


class ProgressCallback(ABC):
    """
    Abstract base class for progress callbacks.

    Provides a standard interface for reporting progress during
    long-running operations.

    """

    @abstractmethod
    def on_start(self, task_name: str, total_steps: int = 100) -> None:
        """
        Called when a task starts.

        Args:
            task_name: Human-readable name of the task
            total_steps: Total number of steps (default 100 for percentage)

        """
        pass

    @abstractmethod
    def on_progress(self, current: int, total: int, message: str | None = None) -> None:
        """
        Called to update progress.

        Args:
            current: Current step number
            total: Total number of steps
            message: Optional progress message

        """
        pass

    @abstractmethod
    def on_complete(self, success: bool, message: str | None = None) -> None:
        """
        Called when a task completes.

        Args:
            success: Whether the task completed successfully
            message: Optional completion message

        """
        pass

    @abstractmethod
    def on_error(self, error: Exception, message: str | None = None) -> None:
        """
        Called when an error occurs.

        Args:
            error: The exception that occurred
            message: Optional error message

        """
        pass


class SilentProgressCallback(ProgressCallback):
    """Silent progress callback that does nothing (for headless operation).

    Used in:
    - topyaz/execution/__init__.py
    """

    def on_start(self, task_name: str, total_steps: int = 100) -> None:
        """No-op start handler."""
        logger.debug(f"Starting task: {task_name} ({total_steps} steps)")

    def on_progress(self, current: int, total: int, message: str | None = None) -> None:
        """No-op progress handler."""
        if message:
            logger.debug(f"Progress {current}/{total}: {message}")

    def on_complete(self, success: bool, message: str | None = None) -> None:
        """No-op completion handler."""
        status = "completed" if success else "failed"
        logger.debug(f"Task {status}: {message or ''}")

    def on_error(self, error: Exception, message: str | None = None) -> None:
        """No-op error handler."""
        logger.error(f"Task error: {error} - {message or ''}")


class ConsoleProgressCallback(ProgressCallback):
    """
    Console-based progress callback using rich progress bars.

    Provides beautiful progress bars for interactive console usage.

    Used in:
    - topyaz/execution/__init__.py
    """

    def __init__(self, console: Console | None = None):
        """
        Initialize console progress callback.

        Args:
            console: Rich console instance (creates new one if None)

        """
        self.console = console or Console()
        self.progress: Progress | None = None
        self.task_id: TaskID | None = None
        self._task_name = ""

    def on_start(self, task_name: str, total_steps: int = 100) -> None:
        """Start progress bar."""
        self._task_name = task_name

        # Create progress bar with custom columns
        self.progress = Progress(
            SpinnerColumn(),
            TextColumn("[bold blue]{task.description}"),
            BarColumn(bar_width=40),
            MofNCompleteColumn(),
            TextColumn("•"),
            TimeElapsedColumn(),
            TextColumn("•"),
            TimeRemainingColumn(),
            console=self.console,
            transient=False,
        )

        self.progress.start()
        self.task_id = self.progress.add_task(description=task_name, total=total_steps)

        logger.debug(f"Started progress tracking for: {task_name}")

    def on_progress(self, current: int, total: int, message: str | None = None) -> None:
        """Update progress bar."""
        if self.progress and self.task_id is not None:
            # Update description with message if provided
            description = self._task_name
            if message:
                description = f"{self._task_name}: {message}"

            self.progress.update(self.task_id, completed=current, total=total, description=description)

    def on_complete(self, success: bool, message: str | None = None) -> None:
        """Complete progress bar."""
        if self.progress and self.task_id is not None:
            # Mark as complete
            self.progress.update(self.task_id, completed=self.progress.tasks[self.task_id].total)

            # Update description with final status
            status = "✓ Completed" if success else "✗ Failed"
            final_message = f"{status}: {self._task_name}"
            if message:
                final_message += f" - {message}"

            self.progress.update(self.task_id, description=final_message)

            # Stop progress bar after a brief pause
            time.sleep(0.5)
            self.progress.stop()

            # Print final status
            if success:
                self.console.print(f"✓ {self._task_name} completed successfully", style="green")
            else:
                self.console.print(f"✗ {self._task_name} failed: {message or 'Unknown error'}", style="red")

    def on_error(self, error: Exception, message: str | None = None) -> None:
        """Handle error in progress bar."""
        if self.progress:
            self.progress.stop()

        error_msg = f"Error in {self._task_name}: {error}"
        if message:
            error_msg += f" - {message}"

        self.console.print(error_msg, style="red")
        logger.error(error_msg)


class LoggingProgressCallback(ProgressCallback):
    """Progress callback that outputs to logging system.

    Used in:
    - topyaz/execution/__init__.py
    """

    def __init__(self, log_level: str = "INFO"):
        """
        Initialize logging progress callback.

        Args:
            log_level: Logging level for progress messages

        """
        self.log_level = log_level.upper()
        self._task_name = ""
        self._last_progress = 0
        self._progress_threshold = 5  # Log every 5% progress

    def on_start(self, task_name: str, total_steps: int = 100) -> None:
        """Log task start."""
        self._task_name = task_name
        self._last_progress = 0
        logger.log(self.log_level, f"Started: {task_name} ({total_steps} steps)")

    def on_progress(self, current: int, total: int, message: str | None = None) -> None:
        """Log progress updates (throttled to reduce noise)."""
        if total > 0:
            percentage = (current / total) * 100

            # Only log if we've crossed a threshold
            if percentage - self._last_progress >= self._progress_threshold:
                progress_msg = f"{self._task_name}: {percentage:.1f}% ({current}/{total})"
                if message:
                    progress_msg += f" - {message}"

                logger.log(self.log_level, progress_msg)
                self._last_progress = percentage

    def on_complete(self, success: bool, message: str | None = None) -> None:
        """Log task completion."""
        status = "completed" if success else "failed"
        completion_msg = f"{self._task_name} {status}"
        if message:
            completion_msg += f": {message}"

        level = self.log_level if success else "ERROR"
        logger.log(level, completion_msg)

    def on_error(self, error: Exception, message: str | None = None) -> None:
        """Log task error."""
        error_msg = f"{self._task_name} error: {error}"
        if message:
            error_msg += f" - {message}"

        logger.error(error_msg)


class BatchProgressTracker:
    """
    Tracks progress across multiple batch operations.

    Useful for processing multiple files or running multiple commands
    with unified progress reporting.

    Used in:
    - topyaz/execution/__init__.py
    """

    def __init__(self, callback: ProgressCallback, total_items: int):
        """
        Initialize batch progress tracker.

        Args:
            callback: Progress callback to use
            total_items: Total number of items to process

        """
        self.callback = callback
        self.total_items = total_items
        self.completed_items = 0
        self.failed_items = 0
        self.current_item = ""
        self._lock = threading.Lock()

    def start_batch(self, batch_name: str) -> None:
        """Start batch processing."""
        self.callback.on_start(batch_name, self.total_items)

    def start_item(self, item_name: str) -> None:
        """Start processing an individual item."""
        with self._lock:
            self.current_item = item_name
            self.callback.on_progress(self.completed_items, self.total_items, f"Processing: {item_name}")

    def complete_item(self, success: bool, message: str | None = None) -> None:
        """Mark an item as completed."""
        with self._lock:
            if success:
                self.completed_items += 1
            else:
                self.failed_items += 1

            status = "✓" if success else "✗"
            progress_msg = f"{status} {self.current_item}"
            if message:
                progress_msg += f" - {message}"

            self.callback.on_progress(self.completed_items + self.failed_items, self.total_items, progress_msg)

    def complete_batch(self) -> None:
        """Complete batch processing."""
        total_processed = self.completed_items + self.failed_items
        success = self.failed_items == 0

        message = f"Processed {total_processed}/{self.total_items} items"
        if self.failed_items > 0:
            message += f" ({self.failed_items} failed)"

        self.callback.on_complete(success, message)


class OutputProgressParser:
    """
    Parses progress information from command output.

    Many CLI tools output progress information that can be parsed
    to provide real-time progress updates.

    Used in:
    - topyaz/execution/__init__.py
    """

    def __init__(self, callback: ProgressCallback):
        """
        Initialize output parser.

        Args:
            callback: Progress callback to update

        """
        self.callback = callback
        self.patterns: dict[str, Pattern[str]] = {}
        self._setup_patterns()

    def _setup_patterns(self) -> None:
        """Set up regex patterns for different tools."""
        # Common progress patterns
        self.patterns.update(
            {
                # Percentage: "Progress: 45.2%"
                "percentage": re.compile(r"(?:progress|complete):\s*(\d+(?:\.\d+)?)\s*%", re.IGNORECASE),
                # Fraction: "15/100" or "Processing 15 of 100"
                "fraction": re.compile(r"(?:processing\s+)?(\d+)\s+(?:of|/)\s+(\d+)", re.IGNORECASE),
                # Time remaining: "ETA: 5m 30s"
                "eta": re.compile(r"eta:\s*(\d+[hms]\s*)+", re.IGNORECASE),
                # Frame numbers for video: "frame=1234"
                "frame": re.compile(r"frame\s*=\s*(\d+)", re.IGNORECASE),
                # FFmpeg-style progress: "time=00:01:23.45"
                "time": re.compile(r"time\s*=\s*(\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?", re.IGNORECASE),
            }
        )

    def parse_line(self, line: str) -> bool:
        """
        Parse a line of output for progress information.

        Args:
            line: Line of output to parse

        Returns:
            True if progress was found and reported

        """
        line = line.strip()
        if not line:
            return False

        # Try percentage pattern
        if match := self.patterns["percentage"].search(line):
            percentage = float(match.group(1))
            self.callback.on_progress(int(percentage), 100, f"{percentage:.1f}%")
            return True

        # Try fraction pattern
        if match := self.patterns["fraction"].search(line):
            current = int(match.group(1))
            total = int(match.group(2))
            self.callback.on_progress(current, total, f"{current}/{total}")
            return True

        # Try frame pattern (for video processing)
        if match := self.patterns["frame"].search(line):
            frame = int(match.group(1))
            # For frame numbers, we don't know the total, so just report the number
            self.callback.on_progress(frame, frame + 1, f"Frame {frame}")
            return True

        return False

    def add_pattern(self, name: str, pattern: str) -> None:
        """
        Add a custom progress pattern.

        Args:
            name: Name for the pattern
            pattern: Regex pattern string

        """
        self.patterns[name] = re.compile(pattern, re.IGNORECASE)


def create_progress_callback(
    mode: str = "auto", console: Console | None = None, log_level: str = "INFO"
) -> ProgressCallback:
    """
    Create appropriate progress callback based on mode.

    Args:
        mode: Progress mode ("auto", "console", "silent", "logging")
        console: Rich console instance for console mode
        log_level: Log level for logging mode

    Returns:
        Configured progress callback

    Used in:
    - topyaz/execution/__init__.py
    """
    if mode == "auto":
        # Auto-detect based on environment
        try:
            # Try to determine if we're in an interactive terminal
            import sys

            mode = "console" if sys.stdout.isatty() and sys.stderr.isatty() else "logging"
        except Exception:
            mode = "silent"

    if mode == "console":
        return ConsoleProgressCallback(console)
    if mode == "logging":
        return LoggingProgressCallback(log_level)
    if mode == "silent":
        return SilentProgressCallback()
    msg = f"Unknown progress mode: {mode}"
    raise ValueError(msg)


def create_batch_tracker(callback: ProgressCallback, total_items: int) -> BatchProgressTracker:
    """
    Create a batch progress tracker.

    Args:
        callback: Progress callback to use
        total_items: Total number of items to process

    Returns:
        Configured batch tracker

    Used in:
    - topyaz/execution/__init__.py
    """
    return BatchProgressTracker(callback, total_items)


def create_output_parser(callback: ProgressCallback) -> OutputProgressParser:
    """
    Create an output progress parser.

    Args:
        callback: Progress callback to update

    Returns:
        Configured output parser

    Used in:
    - topyaz/execution/__init__.py
    """
    return OutputProgressParser(callback)
</file>

<file path="src/topyaz/execution/remote.py">
#!/usr/bin/env python3
# this_file: src/topyaz/execution/remote.py
"""
Remote command execution for topyaz via SSH.

This module provides SSH-based remote command execution capabilities with
support for authentication, file transfer, and connection management.

"""

import io
import time
from typing import Optional

import paramiko
from loguru import logger

from topyaz.core.errors import AuthenticationError, ProcessingError, RemoteExecutionError
from topyaz.core.types import CommandList, RemoteOptions
from topyaz.execution.base import CommandExecutor, ExecutorContext, ProgressAwareExecutor, ProgressCallback


class RemoteExecutor(ProgressAwareExecutor):
    """
    Executes commands on remote machines via SSH.

    Provides secure remote execution with authentication,
    connection management, and error handling.

    Used in:
    - topyaz/cli.py
    - topyaz/execution/__init__.py
    """

    def __init__(self, remote_options: RemoteOptions, context: ExecutorContext | None = None):
        """
        Initialize remote executor.

        Args:
            remote_options: Remote connection configuration
            context: Execution context

        Raises:
            RemoteExecutionError: If remote options are invalid

        """
        if not remote_options.host:
            msg = "Remote host is required"
            raise RemoteExecutionError(msg)
        if not remote_options.user:
            msg = "Remote user is required"
            raise RemoteExecutionError(msg)

        self.remote_options = remote_options
        self.context = context or ExecutorContext()
        self._ssh_client: paramiko.SSHClient | None = None
        self._connected = False

    def is_available(self) -> bool:
        """Check if remote execution is available."""
        try:
            # Test connection without keeping it open
            self._create_connection()
            self._close_connection()
            return True
        except Exception as e:
            logger.debug(f"Remote execution not available: {e}")
            return False

    def execute(
        self, command: CommandList, input_data: str | None = None, timeout: int | None = None
    ) -> tuple[int, str, str]:
        """
        Execute command on remote host.

        Args:
            command: Command and arguments to execute
            input_data: Optional input data to pass to command
            timeout: Optional timeout override

        Returns:
            Tuple of (return_code, stdout, stderr)

        Raises:
            RemoteExecutionError: If remote execution fails

        """
        actual_timeout = timeout or self.context.timeout

        if self.context.dry_run:
            logger.info(f"DRY RUN (remote): {' '.join(command)} on {self.remote_options.host}")
            return 0, "dry-run-output", ""

        try:
            self._ensure_connection()

            # Build command string with proper escaping
            command_str = self._build_command_string(command)
            logger.debug(f"Executing remotely: {command_str}")

            # Execute command
            start_time = time.time()
            stdin, stdout, stderr = self._ssh_client.exec_command(command_str, timeout=actual_timeout)

            # Send input if provided
            if input_data:
                try:
                    stdin.write(input_data)
                    stdin.flush()
                except Exception as e:
                    logger.debug(f"Failed to send input: {e}")

            stdin.close()

            # Get results
            exit_status = stdout.channel.recv_exit_status()
            stdout_data = stdout.read().decode("utf-8", errors="ignore")
            stderr_data = stderr.read().decode("utf-8", errors="ignore")

            execution_time = time.time() - start_time

            logger.debug(f"Remote command completed in {execution_time:.2f}s with exit status: {exit_status}")

            if stdout_data:
                logger.debug(f"Remote STDOUT: {stdout_data[:500]}{'...' if len(stdout_data) > 500 else ''}")
            if stderr_data:
                logger.debug(f"Remote STDERR: {stderr_data[:500]}{'...' if len(stderr_data) > 500 else ''}")

            return exit_status, stdout_data, stderr_data

        except paramiko.AuthenticationException as e:
            msg = f"SSH authentication failed for {self.remote_options.user}@{self.remote_options.host}: {e}"
            logger.error(msg)
            raise AuthenticationError(msg)

        except paramiko.SSHException as e:
            msg = f"SSH connection error: {e}"
            logger.error(msg)
            raise RemoteExecutionError(msg)

        except Exception as e:
            msg = f"Remote command execution failed: {e}"
            logger.error(msg)
            raise RemoteExecutionError(msg)

    def execute_with_progress(
        self,
        command: CommandList,
        callback: ProgressCallback,
        input_data: str | None = None,
        timeout: int | None = None,
    ) -> tuple[int, str, str]:
        """
        Execute command with progress monitoring (limited on remote).

        Note: Progress monitoring is limited for remote execution as we
        can't easily monitor real-time output over SSH.

        Args:
            command: Command and arguments to execute
            callback: Progress callback handler
            input_data: Optional input data
            timeout: Optional timeout override

        Returns:
            Tuple of (return_code, stdout, stderr)

        """
        if self.context.dry_run:
            logger.info(f"DRY RUN (remote with progress): {' '.join(command)} on {self.remote_options.host}")
            callback.on_progress(1, 1)
            callback.on_complete(True, "Dry run completed")
            return 0, "dry-run-output", ""

        try:
            callback.on_progress(0, 100)  # Starting

            # For remote execution, we can't easily stream output
            # So we'll just execute normally and report progress at milestones
            exit_code, stdout, stderr = self.execute(command, input_data, timeout)

            callback.on_progress(100, 100)  # Complete

            success = exit_code == 0
            callback.on_complete(success, f"Remote command completed with exit code {exit_code}")

            return exit_code, stdout, stderr

        except Exception as e:
            callback.on_complete(False, str(e))
            raise

    def _ensure_connection(self) -> None:
        """Ensure SSH connection is established."""
        if not self._connected or self._ssh_client is None:
            self._create_connection()

    def _create_connection(self) -> None:
        """Create SSH connection to remote host."""
        try:
            # Create SSH client
            self._ssh_client = paramiko.SSHClient()
            self._ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

            # Prepare connection arguments
            connect_kwargs = {
                "hostname": self.remote_options.host,
                "username": self.remote_options.user,
                "port": self.remote_options.ssh_port,
                "timeout": self.remote_options.connection_timeout,
            }

            # Add authentication
            if self.remote_options.ssh_key:
                connect_kwargs["key_filename"] = str(self.remote_options.ssh_key)

            logger.debug(
                f"Connecting to {self.remote_options.user}@{self.remote_options.host}:{self.remote_options.ssh_port}"
            )

            # Connect
            self._ssh_client.connect(**connect_kwargs)
            self._connected = True

            logger.debug("SSH connection established")

        except paramiko.AuthenticationException as e:
            msg = f"SSH authentication failed: {e}"
            logger.error(msg)
            raise AuthenticationError(msg)

        except Exception as e:
            msg = f"SSH connection failed: {e}"
            logger.error(msg)
            raise RemoteExecutionError(msg)

    def _close_connection(self) -> None:
        """Close SSH connection."""
        if self._ssh_client:
            try:
                self._ssh_client.close()
                logger.debug("SSH connection closed")
            except Exception as e:
                logger.debug(f"Error closing SSH connection: {e}")
            finally:
                self._ssh_client = None
                self._connected = False

    def _build_command_string(self, command: CommandList) -> str:
        """
        Build properly escaped command string for remote execution.

        Args:
            command: Command and arguments

        Returns:
            Escaped command string

        """
        import shlex

        # Use shlex to properly escape arguments
        escaped_args = [shlex.quote(arg) for arg in command]

        # Join with spaces
        command_str = " ".join(escaped_args)

        # Add environment variables if any
        if self.context.env_vars:
            env_prefix = " ".join(f"{key}={shlex.quote(value)}" for key, value in self.context.env_vars.items())
            command_str = f"env {env_prefix} {command_str}"

        # Add working directory if specified
        if self.context.working_dir:
            command_str = f"cd {shlex.quote(self.context.working_dir)} && {command_str}"

        return command_str

    def upload_file(self, local_path: str, remote_path: str) -> bool:
        """
        Upload file to remote host.

        Args:
            local_path: Local file path
            remote_path: Remote file path

        Returns:
            True if successful

        Raises:
            RemoteExecutionError: If upload fails

        """
        try:
            self._ensure_connection()

            # Use SFTP for file transfer
            sftp = self._ssh_client.open_sftp()

            logger.debug(f"Uploading {local_path} to {remote_path}")
            sftp.put(local_path, remote_path)
            sftp.close()

            logger.debug("File upload completed")
            return True

        except Exception as e:
            msg = f"File upload failed: {e}"
            logger.error(msg)
            raise RemoteExecutionError(msg)

    def download_file(self, remote_path: str, local_path: str) -> bool:
        """
        Download file from remote host.

        Args:
            remote_path: Remote file path
            local_path: Local file path

        Returns:
            True if successful

        Raises:
            RemoteExecutionError: If download fails

        """
        try:
            self._ensure_connection()

            # Use SFTP for file transfer
            sftp = self._ssh_client.open_sftp()

            logger.debug(f"Downloading {remote_path} to {local_path}")
            sftp.get(remote_path, local_path)
            sftp.close()

            logger.debug("File download completed")
            return True

        except Exception as e:
            msg = f"File download failed: {e}"
            logger.error(msg)
            raise RemoteExecutionError(msg)

    def test_connection(self) -> dict[str, any]:
        """
        Test remote connection and return diagnostics.

        Returns:
            Dictionary with connection test results

        """
        result = {
            "host": self.remote_options.host,
            "port": self.remote_options.ssh_port,
            "user": self.remote_options.user,
            "connected": False,
            "error": None,
            "latency_ms": None,
            "server_info": {},
        }

        try:
            start_time = time.time()
            self._create_connection()
            connect_time = (time.time() - start_time) * 1000

            result["connected"] = True
            result["latency_ms"] = round(connect_time, 2)

            # Get server information
            try:
                _, stdout, _ = self._ssh_client.exec_command("uname -a", timeout=10)
                result["server_info"]["uname"] = stdout.read().decode().strip()

                _, stdout, _ = self._ssh_client.exec_command("whoami", timeout=10)
                result["server_info"]["user"] = stdout.read().decode().strip()

                _, stdout, _ = self._ssh_client.exec_command("pwd", timeout=10)
                result["server_info"]["home"] = stdout.read().decode().strip()

            except Exception as e:
                logger.debug(f"Failed to get server info: {e}")

            self._close_connection()

        except Exception as e:
            result["error"] = str(e)
            logger.debug(f"Connection test failed: {e}")

        return result

    def get_info(self) -> dict[str, str]:
        """Get information about this executor.

        Used in:
        - topyaz/cli.py
        - topyaz/execution/local.py
        """
        info = super().get_info()
        info.update(
            {
                "platform": "remote",
                "host": self.remote_options.host,
                "port": str(self.remote_options.ssh_port),
                "user": self.remote_options.user,
                "connected": str(self._connected),
                "ssh_key": str(self.remote_options.ssh_key) if self.remote_options.ssh_key else "password",
            }
        )
        return info

    def __del__(self):
        """Cleanup SSH connection on object destruction."""
        self._close_connection()


class RemoteConnectionPool:
    """
    Manages a pool of SSH connections for reuse.

    This can improve performance when executing multiple commands
    on the same remote host.

    Used in:
    - topyaz/execution/__init__.py
    """

    def __init__(self, max_connections: int = 5):
        """
        Initialize connection pool.

        Args:
            max_connections: Maximum number of connections to maintain

        """
        self.max_connections = max_connections
        self._connections: dict[str, list[RemoteExecutor]] = {}
        self._in_use: set[RemoteExecutor] = set()

    def get_executor(self, remote_options: RemoteOptions) -> RemoteExecutor:
        """
        Get an executor from the pool or create a new one.

        Args:
            remote_options: Remote connection options

        Returns:
            RemoteExecutor instance

        """
        key = self._get_connection_key(remote_options)

        # Try to get from pool
        if self._connections.get(key):
            executor = self._connections[key].pop()
            self._in_use.add(executor)
            return executor

        # Create new executor
        executor = RemoteExecutor(remote_options)
        self._in_use.add(executor)
        return executor

    def return_executor(self, executor: RemoteExecutor) -> None:
        """
        Return an executor to the pool.

        Args:
            executor: Executor to return

        """
        if executor not in self._in_use:
            return

        self._in_use.remove(executor)

        key = self._get_connection_key(executor.remote_options)

        if key not in self._connections:
            self._connections[key] = []

        # Only keep if under limit
        if len(self._connections[key]) < self.max_connections:
            self._connections[key].append(executor)
        else:
            # Close excess connections
            executor._close_connection()

    def _get_connection_key(self, remote_options: RemoteOptions) -> str:
        """Get unique key for connection."""
        return f"{remote_options.user}@{remote_options.host}:{remote_options.ssh_port}"

    def close_all(self) -> None:
        """Close all connections in the pool."""
        for executors in self._connections.values():
            for executor in executors:
                executor._close_connection()

        for executor in self._in_use:
            executor._close_connection()

        self._connections.clear()
        self._in_use.clear()


# Global connection pool instance
_connection_pool = RemoteConnectionPool()


def get_remote_executor(remote_options: RemoteOptions) -> RemoteExecutor:
    """
    Get a remote executor from the global connection pool.

    Args:
        remote_options: Remote connection options

    Returns:
        RemoteExecutor instance

    Used in:
    - topyaz/execution/__init__.py
    """
    return _connection_pool.get_executor(remote_options)


def return_remote_executor(executor: RemoteExecutor) -> None:
    """
    Return a remote executor to the global connection pool.

    Args:
        executor: Executor to return

    Used in:
    - topyaz/execution/__init__.py
    """
    _connection_pool.return_executor(executor)
</file>

<file path="src/topyaz/products/__init__.py">
#!/usr/bin/env python3
# this_file: src/topyaz/products/__init__.py
"""
Products module for topyaz.

This module contains implementations for all supported Topaz products,
providing a unified interface for image and video processing.
"""

from topyaz.products.base import MacOSTopazProduct, TopazProduct, create_product
from topyaz.products.gigapixel import GigapixelAI
from topyaz.products.photo_ai import PhotoAI
from topyaz.products.video_ai import VideoAI

__all__ = [
    # Product implementations
    "GigapixelAI",
    "MacOSTopazProduct",
    "PhotoAI",
    # Base classes
    "TopazProduct",
    "VideoAI",
    "create_product",
]
</file>

<file path="src/topyaz/products/base.py">
#!/usr/bin/env python3
# this_file: src/topyaz/products/base.py
"""
Base product interface for topyaz.

This module provides abstract base classes and interfaces for Topaz products,
defining common functionality and ensuring consistent implementation across
all supported products.

Used in:
- topyaz/products/gigapixel.py
- topyaz/products/photo_ai.py
- topyaz/products/video_ai.py
"""

import platform
import shutil
from abc import ABC, abstractmethod
from pathlib import Path
from typing import Any, Optional

from loguru import logger

from topyaz.core.errors import ExecutableNotFoundError, ProcessingError, ValidationError
from topyaz.core.types import (
    CommandList,
    ProcessingOptions,
    ProcessingResult,
    Product,
)
from topyaz.execution.base import CommandExecutor
from topyaz.system.paths import PathValidator


class TopazProduct(ABC):
    """
    Abstract base class for all Topaz products.

    Provides common functionality and defines the interface that all
    Topaz product implementations must follow.

    Used in:
    - topyaz/products/__init__.py
    """

    def __init__(self, executor: CommandExecutor, options: ProcessingOptions, product_type: Product):
        """
        Initialize product instance.

        Args:
            executor: Command executor for running operations
            options: Processing options and configuration
            product_type: Type of product (from Product enum)

        Used in:
        - topyaz/products/gigapixel.py
        - topyaz/products/photo_ai.py
        - topyaz/products/video_ai.py
        """
        self.executor = executor
        self.options = options
        self.product_type = product_type
        self.path_validator = PathValidator()
        self._executable_path: Path | None = None
        self._version: str | None = None

    @property
    @abstractmethod
    def product_name(self) -> str:
        """Human-readable product name."""
        pass

    @property
    @abstractmethod
    def executable_name(self) -> str:
        """Name of the executable file."""
        pass

    @property
    @abstractmethod
    def supported_formats(self) -> list[str]:
        """List of supported file formats (extensions without dots)."""
        pass

    @abstractmethod
    def get_search_paths(self) -> list[Path]:
        """
        Get list of paths to search for the executable.

        Returns:
            List of potential executable locations

        """
        pass

    @abstractmethod
    def validate_params(self, **kwargs) -> None:
        """
        Validate product-specific parameters.

        Args:
            **kwargs: Parameters to validate

        Raises:
            ValidationError: If parameters are invalid
        """
        pass

    @abstractmethod
    def build_command(self, input_path: Path, output_path: Path, **kwargs) -> CommandList:
        """
        Build command line for processing.

        Args:
            input_path: Input file or directory path
            output_path: Output file or directory path
            **kwargs: Product-specific parameters

        Returns:
            Command list ready for execution
        """
        pass

    @abstractmethod
    def parse_output(self, stdout: str, stderr: str) -> dict[str, Any]:
        """
        Parse command output for useful information.

        Args:
            stdout: Standard output from command
            stderr: Standard error from command

        Returns:
            Dictionary of parsed information
        """
        pass

    def find_executable(self) -> Path | None:
        """
        Find the product executable.

        Returns:
            Path to executable if found, None otherwise

        """
        if self._executable_path and self._executable_path.exists():
            return self._executable_path

        # Search in standard locations
        search_paths = self.get_search_paths()

        for search_path in search_paths:
            if search_path.exists():
                logger.debug(f"Found {self.product_name} at: {search_path}")
                self._executable_path = search_path
                return search_path

        # Try system PATH as fallback
        system_executable = shutil.which(self.executable_name)
        if system_executable:
            path = Path(system_executable)
            logger.debug(f"Found {self.product_name} in PATH: {path}")
            self._executable_path = path
            return path

        logger.warning(f"{self.product_name} executable not found")
        return None

    def get_executable_path(self) -> Path:
        """
        Get the executable path, finding it if necessary.

        Returns:
            Path to executable

        Raises:
            ExecutableNotFoundError: If executable cannot be found

        Used in:
        - topyaz/products/gigapixel.py
        - topyaz/products/photo_ai.py
        - topyaz/products/video_ai.py
        """
        executable = self.find_executable()
        if not executable:
            msg = f"{self.product_name} executable not found. Please ensure {self.product_name} is installed."
            raise ExecutableNotFoundError(msg)
        return executable

    def get_version(self) -> str | None:
        """
        Get product version.

        Returns:
            Version string if available

        Used in:
        - topyaz/cli.py
        """
        if self._version:
            return self._version

        try:
            executable = self.get_executable_path()
            # Most Topaz products support --version
            result = self.executor.execute([str(executable), "--version"])

            if result[0] == 0 and result[1]:
                # Parse version from output
                self._version = self._parse_version(result[1])
                return self._version

        except Exception as e:
            logger.debug(f"Could not get {self.product_name} version: {e}")

        return None

    def _parse_version(self, version_output: str) -> str:
        """
        Parse version from command output.

        Args:
            version_output: Raw version output

        Returns:
            Parsed version string

        """
        # Basic version parsing - can be overridden by subclasses
        lines = version_output.strip().split("\n")
        if lines:
            # Look for version numbers in first few lines
            import re

            version_pattern = re.compile(r"(\d+\.\d+(?:\.\d+)*)")
            for line in lines[:3]:
                match = version_pattern.search(line)
                if match:
                    return match.group(1)

        return version_output.strip()

    def validate_input_path(self, input_path: Path) -> None:
        """
        Validate input path for this product.

        Args:
            input_path: Path to validate

        Raises:
            ValidationError: If path is invalid

        """
        # Use path validator for basic checks
        validated_path = self.path_validator.validate_input_path(input_path)

        # Check file format if it's a file
        if validated_path.is_file():
            extension = validated_path.suffix.lower().lstrip(".")
            if extension not in self.supported_formats:
                msg = (
                    f"File format '{extension}' not supported by {self.product_name}. "
                    f"Supported formats: {', '.join(self.supported_formats)}"
                )
                raise ValidationError(msg)

    def prepare_output_path(self, input_path: Path, output_path: Path | None = None) -> Path:
        """
        Prepare output path based on input and options.

        Args:
            input_path: Input file path
            output_path: Optional output path

        Returns:
            Prepared output path

        """
        if output_path:
            return self.path_validator.validate_output_path(output_path)

        # Auto-generate output path
        output_dir = self.options.output_dir if self.options.output_dir else input_path.parent

        # Generate filename with product-specific suffix
        suffix = self._get_output_suffix()
        stem = input_path.stem
        extension = input_path.suffix

        output_filename = f"{stem}{suffix}{extension}"
        output_path = output_dir / output_filename

        return self.path_validator.validate_output_path(output_path)

    def _get_output_suffix(self) -> str:
        """Get suffix to add to output filenames."""
        return f"_{self.product_type.value.lower()}"

    def process(self, input_path: Path | str, output_path: Path | str | None = None, **kwargs) -> ProcessingResult:
        """
        Process file(s) with this product.

        Args:
            input_path: Input file or directory path
            output_path: Output file or directory path
            **kwargs: Product-specific parameters

        Returns:
            Processing result

        Raises:
            ValidationError: If parameters are invalid
            ProcessingError: If processing fails

        Used in:
        - topyaz/cli.py
        """
        # Convert to Path objects
        input_path = Path(input_path)
        if output_path:
            output_path = Path(output_path)

        # Validate inputs
        self.validate_input_path(input_path)
        self.validate_params(**kwargs)

        # Prepare output path
        output_path = self.prepare_output_path(input_path, output_path)

        # Ensure executable is available
        self.get_executable_path()

        # Build command
        command = self.build_command(input_path, output_path, **kwargs)

        # Execute command
        try:
            logger.info(f"Processing {input_path} with {self.product_name}")

            if self.options.dry_run:
                logger.info(f"DRY RUN: Would execute: {' '.join(command)}")
                return ProcessingResult(
                    success=True,
                    input_path=input_path,
                    output_path=output_path,
                    command=command,
                    stdout="DRY RUN - no output",
                    stderr="",
                    execution_time=0.0,
                    file_size_before=0,
                    file_size_after=0,
                )

            import time

            start_time = time.time()

            # Get file size before processing
            file_size_before = input_path.stat().st_size if input_path.is_file() else 0

            # Execute the command
            exit_code, stdout, stderr = self.executor.execute(command, timeout=self.options.timeout)

            execution_time = time.time() - start_time

            # Check if processing was successful
            success = exit_code == 0 and (output_path.exists() if output_path else True)

            if not success:
                error_msg = f"{self.product_name} processing failed (exit code {exit_code})"
                if stderr:
                    error_msg += f": {stderr}"
                raise ProcessingError(error_msg)

            # Get file size after processing
            file_size_after = output_path.stat().st_size if output_path and output_path.exists() else 0

            # Parse output for additional information
            parsed_info = self.parse_output(stdout, stderr)

            logger.info(f"Successfully processed {input_path} -> {output_path} in {execution_time:.2f}s")

            result = ProcessingResult(
                success=True,
                input_path=input_path,
                output_path=output_path,
                command=command,
                stdout=stdout,
                stderr=stderr,
                execution_time=execution_time,
                file_size_before=file_size_before,
                file_size_after=file_size_after,
                additional_info=parsed_info,
            )

            # Validate output file if validation is available
            try:
                from topyaz.utils.validation import enhance_processing_result

                result = enhance_processing_result(result)
            except ImportError:
                logger.debug("File validation not available")

            return result

        except Exception as e:
            logger.error(f"Error processing {input_path} with {self.product_name}: {e}")

            return ProcessingResult(
                success=False,
                input_path=input_path,
                output_path=output_path,
                command=command,
                stdout="",
                stderr=str(e),
                execution_time=0.0,
                file_size_before=0,
                file_size_after=0,
                error_message=str(e),
            )

    def get_info(self) -> dict[str, Any]:
        """
        Get information about this product.

        Returns:
            Dictionary with product information

        Used in:
        - topyaz/cli.py
        """
        executable = self.find_executable()
        version = self.get_version()

        return {
            "product_name": self.product_name,
            "product_type": self.product_type.value,
            "executable_name": self.executable_name,
            "executable_path": str(executable) if executable else None,
            "executable_found": executable is not None,
            "version": version,
            "supported_formats": self.supported_formats,
            "platform": platform.system(),
        }


class MacOSTopazProduct(TopazProduct):
    """
    Base class for Topaz products on macOS.

    Provides macOS-specific functionality like finding applications
    in /Applications directory.

    Used in:
    - topyaz/products/__init__.py
    - topyaz/products/gigapixel.py
    - topyaz/products/photo_ai.py
    - topyaz/products/video_ai.py
    """

    @property
    @abstractmethod
    def app_name(self) -> str:
        """Name of the macOS application."""
        pass

    @property
    @abstractmethod
    def app_executable_path(self) -> str:
        """Relative path to executable within app bundle."""
        pass

    def get_search_paths(self) -> list[Path]:
        """Get macOS-specific search paths."""
        app_path = Path("/Applications") / self.app_name
        executable_path = app_path / self.app_executable_path

        paths = [executable_path]

        # Also check user Applications folder
        user_app_path = Path.home() / "Applications" / self.app_name
        user_executable_path = user_app_path / self.app_executable_path
        paths.append(user_executable_path)

        return paths

    def validate_macos_version(self) -> None:
        """
        Validate macOS version compatibility.

        Raises:
            ValidationError: If macOS version is incompatible

        """
        if platform.system() != "Darwin":
            msg = f"{self.product_name} is only available on macOS"
            raise ValidationError(msg)

        # Check minimum macOS version (most Topaz products require 10.15+)
        try:
            import subprocess

            result = subprocess.run(["sw_vers", "-productVersion"], capture_output=True, text=True, check=True)
            version_str = result.stdout.strip()

            # Parse version
            version_parts = [int(x) for x in version_str.split(".")]

            # Check minimum version (macOS 10.15 = [10, 15])
            min_version = [10, 15]
            if version_parts < min_version:
                msg = f"{self.product_name} requires macOS 10.15 or later. Current version: {version_str}"
                raise ValidationError(msg)

        except Exception as e:
            logger.warning(f"Could not verify macOS version: {e}")


def create_product(product_type: Product, executor: CommandExecutor, options: ProcessingOptions) -> TopazProduct:
    """
    Create a product instance based on product type.

    Args:
        product_type: Type of product to create
        executor: Command executor
        options: Processing options

    Returns:
        Product instance

    Raises:
        ValueError: If product type is not supported

    Used in:
    - topyaz/cli.py
    - topyaz/products/__init__.py
    """
    # Import here to avoid circular imports
    if product_type == Product.GIGAPIXEL:
        from topyaz.products.gigapixel import GigapixelAI

        return GigapixelAI(executor, options)
    if product_type == Product.VIDEO_AI:
        from topyaz.products.video_ai import VideoAI

        return VideoAI(executor, options)
    if product_type == Product.PHOTO_AI:
        from topyaz.products.photo_ai import PhotoAI

        return PhotoAI(executor, options)
    msg = f"Unsupported product type: {product_type}"
    raise ValueError(msg)
</file>

<file path="src/topyaz/products/gigapixel.py">
#!/usr/bin/env python3
# this_file: src/topyaz/products/gigapixel.py
"""
Topaz Gigapixel AI implementation for topyaz.

This module provides the Gigapixel AI product implementation with support
for upscaling, denoising, and enhancement of images.

"""

import contextlib
import platform
import shutil
import tempfile
from pathlib import Path
from typing import Any, Optional

from loguru import logger

from topyaz.core.errors import ValidationError
from topyaz.core.types import CommandList, GigapixelParams, ProcessingOptions, ProcessingResult, Product
from topyaz.execution.base import CommandExecutor
from topyaz.products.base import MacOSTopazProduct


class GigapixelAI(MacOSTopazProduct):
    """
    Topaz Gigapixel AI implementation.

    Provides image upscaling and enhancement capabilities using Gigapixel AI's
    various models and processing options.

    Used in:
    - topyaz/cli.py
    - topyaz/products/__init__.py
    - topyaz/products/base.py
    """

    def __init__(self, executor: CommandExecutor, options: ProcessingOptions):
        """
        Initialize Gigapixel AI instance.

        Args:
            executor: Command executor for running operations
            options: Processing options and configuration

        """
        super().__init__(executor, options, Product.GIGAPIXEL)

    @property
    def product_name(self) -> str:
        """Human-readable product name."""
        return "Topaz Gigapixel AI"

    @property
    def executable_name(self) -> str:
        """Name of the executable file."""
        return "gigapixel"

    @property
    def app_name(self) -> str:
        """Name of the macOS application."""
        return "Topaz Gigapixel AI.app"

    @property
    def app_executable_path(self) -> str:
        """Relative path to executable within app bundle."""
        return "Contents/Resources/bin/gigapixel"

    @property
    def supported_formats(self) -> list[str]:
        """List of supported file formats."""
        return ["jpg", "jpeg", "png", "tiff", "tif", "bmp", "webp"]

    def get_search_paths(self) -> list[Path]:
        """Get platform-specific search paths for Gigapixel AI."""
        if platform.system() == "Darwin":
            # macOS paths
            return [
                Path("/Applications/Topaz Gigapixel AI.app/Contents/Resources/bin/gigapixel"),
                Path("/Applications/Topaz Gigapixel AI.app/Contents/MacOS/Topaz Gigapixel AI"),
                Path.home() / "Applications/Topaz Gigapixel AI.app/Contents/Resources/bin/gigapixel",
            ]
        if platform.system() == "Windows":
            # Windows paths
            return [
                Path("C:/Program Files/Topaz Labs LLC/Topaz Gigapixel AI/bin/gigapixel.exe"),
                Path("C:/Program Files (x86)/Topaz Labs LLC/Topaz Gigapixel AI/bin/gigapixel.exe"),
            ]
        # Linux or other platforms
        return [Path("/usr/local/bin/gigapixel"), Path("/opt/gigapixel/bin/gigapixel")]

    def validate_params(self, **kwargs) -> None:
        """
        Validate Gigapixel AI parameters.

        Args:
            **kwargs: Parameters to validate

        Raises:
            ValidationError: If parameters are invalid

        """
        # Extract Gigapixel-specific parameters
        model = kwargs.get("model", "std")
        scale = kwargs.get("scale", 2)
        denoise = kwargs.get("denoise")
        sharpen = kwargs.get("sharpen")
        compression = kwargs.get("compression")
        detail = kwargs.get("detail")
        creativity = kwargs.get("creativity")
        texture = kwargs.get("texture")
        face_recovery = kwargs.get("face_recovery")
        face_recovery_version = kwargs.get("face_recovery_version", 2)
        format_param = kwargs.get("format", "preserve")
        quality = kwargs.get("quality", 95)
        bit_depth = kwargs.get("bit_depth", 0)
        parallel_read = kwargs.get("parallel_read", 1)

        # Validate model
        valid_models = {
            "std",
            "standard",
            "hf",
            "high fidelity",
            "fidelity",
            "low",
            "lowres",
            "low resolution",
            "low res",
            "art",
            "cg",
            "cgi",
            "lines",
            "compression",
            "very compressed",
            "high compression",
            "vc",
            "text",
            "txt",
            "text refine",
            "recovery",
            "redefine",
        }
        if model.lower() not in valid_models:
            msg = f"Invalid model '{model}'. Valid models: {', '.join(sorted(valid_models))}"
            raise ValidationError(msg)

        # Validate scale
        if not (1 <= scale <= 6):
            msg = f"Scale must be between 1 and 6, got {scale}"
            raise ValidationError(msg)

        # Validate optional numeric parameters
        numeric_params = {
            "denoise": denoise,
            "sharpen": sharpen,
            "compression": compression,
            "detail": detail,
            "face_recovery": face_recovery,
        }

        for param_name, value in numeric_params.items():
            if value is not None and not (1 <= value <= 100):
                msg = f"{param_name} must be between 1 and 100, got {value}"
                raise ValidationError(msg)

        # Validate creativity and texture (special range)
        for param_name, value in [("creativity", creativity), ("texture", texture)]:
            if value is not None and not (1 <= value <= 6):
                msg = f"{param_name} must be between 1 and 6, got {value}"
                raise ValidationError(msg)

        # Validate face recovery version
        if face_recovery_version not in [1, 2]:
            msg = f"Face recovery version must be 1 or 2, got {face_recovery_version}"
            raise ValidationError(msg)

        # Validate output format
        valid_formats = {"preserve", "jpg", "jpeg", "png", "tif", "tiff"}
        if format_param.lower() not in valid_formats:
            msg = f"Invalid format '{format_param}'. Valid formats: {', '.join(sorted(valid_formats))}"
            raise ValidationError(msg)

        # Validate quality
        if not (1 <= quality <= 100):
            msg = f"Quality must be between 1 and 100, got {quality}"
            raise ValidationError(msg)

        # Validate bit depth
        if bit_depth not in [0, 8, 16]:
            msg = f"Bit depth must be 0, 8, or 16, got {bit_depth}"
            raise ValidationError(msg)

        # Validate parallel read
        if not (1 <= parallel_read <= 10):
            msg = f"Parallel read must be between 1 and 10, got {parallel_read}"
            raise ValidationError(msg)

    def build_command(self, input_path: Path, temp_output_dir: Path, **kwargs) -> CommandList:
        """
        Build Gigapixel AI command line using temporary output directory.

        Args:
            input_path: Input file path
            temp_output_dir: Temporary output directory path
            **kwargs: Gigapixel-specific parameters

        Returns:
            Command list ready for execution

        """
        executable = self.get_executable_path()

        # Build base command
        cmd = [str(executable), "--cli"]

        # Add input and temp output directory
        cmd.extend(["-i", str(input_path.resolve())])
        cmd.extend(["-o", str(temp_output_dir.resolve())])

        # Create output folder if needed
        cmd.append("--create-folder")

        # Add append model flag to include model name in filename
        cmd.append("--am")

        # Add model
        model = kwargs.get("model", "std")
        cmd.extend(["-m", model])

        # Add scale
        scale = kwargs.get("scale", 2)
        cmd.extend(["--scale", str(scale)])

        # Add optional parameters
        optional_params = [
            ("denoise", "--denoise"),
            ("sharpen", "--sharpen"),
            ("compression", "--compression"),
            ("detail", "--detail"),
            ("creativity", "--creativity"),
            ("texture", "--texture"),
            ("face_recovery", "--face-recovery"),
        ]

        for param_name, flag in optional_params:
            value = kwargs.get(param_name)
            if value is not None:
                cmd.extend([flag, str(value)])

        # Add face recovery version if face recovery is enabled
        if kwargs.get("face_recovery") is not None:
            face_recovery_version = kwargs.get("face_recovery_version", 2)
            cmd.extend(["--face-recovery-version", str(face_recovery_version)])

        # Add prompt if provided (for generative models)
        prompt = kwargs.get("prompt")
        if prompt:
            cmd.extend(["--prompt", prompt])

        # Add output format options
        format_param = kwargs.get("format", "preserve")
        if format_param.lower() != "preserve":
            cmd.extend(["-f", format_param])

        # Add quality for JPEG output
        quality = kwargs.get("quality", 95)
        if format_param.lower() in ["jpg", "jpeg"] or format_param.lower() == "preserve":
            cmd.extend(["--jpeg-quality", str(quality)])

        # Add bit depth
        bit_depth = kwargs.get("bit_depth", 0)
        if bit_depth > 0:
            cmd.extend(["--bit-depth", str(bit_depth)])

        # Add parallel read optimization
        parallel_read = kwargs.get("parallel_read", 1)
        if parallel_read > 1:
            cmd.extend(["-p", str(parallel_read)])

        # Add processing flags
        if input_path.is_dir():
            cmd.append("--recursive")

        if self.options.verbose:
            cmd.append("--verbose")

        return cmd

    def parse_output(self, stdout: str, stderr: str) -> dict[str, Any]:
        """
        Parse Gigapixel AI command output.

        Args:
            stdout: Standard output from command
            stderr: Standard error from command

        Returns:
            Dictionary of parsed information

        """
        info = {}

        # Parse processing information from output
        lines = stdout.split("\n") if stdout else []

        for line in lines:
            line = line.strip()

            # Look for model information
            if "Model:" in line:
                info["model_used"] = line.split("Model:")[-1].strip()

            # Look for scale information
            if "Scale:" in line:
                with contextlib.suppress(ValueError):
                    info["scale_used"] = int(line.split("Scale:")[-1].strip().rstrip("x"))

            # Look for processing time
            if "Processing time:" in line:
                info["processing_time"] = line.split("Processing time:")[-1].strip()

            # Look for memory usage
            if "Memory used:" in line:
                info["memory_used"] = line.split("Memory used:")[-1].strip()

        # Parse any errors from stderr
        if stderr:
            error_lines = [line.strip() for line in stderr.split("\n") if line.strip()]
            if error_lines:
                info["warnings"] = error_lines

        return info

    def get_default_params(self) -> GigapixelParams:
        """
        Get default parameters for Gigapixel AI.

        Returns:
            Default Gigapixel parameters

        """
        return GigapixelParams()

    def get_memory_requirements(self, **kwargs) -> dict[str, Any]:
        """
        Get memory requirements for processing.

        Args:
            **kwargs: Processing parameters

        Returns:
            Memory requirement information

        """
        scale = kwargs.get("scale", 2)
        model = kwargs.get("model", "std")

        # Base memory requirements (in GB)
        base_memory = 4  # Minimum for Gigapixel

        # Scale affects memory usage
        scale_multiplier = {1: 1.0, 2: 1.5, 3: 2.0, 4: 2.5, 5: 3.0, 6: 3.5}
        memory_for_scale = base_memory * scale_multiplier.get(scale, 1.0)

        # Model affects memory usage
        model_multipliers = {
            "std": 1.0,
            "standard": 1.0,
            "hf": 1.2,
            "high fidelity": 1.2,
            "fidelity": 1.2,
            "low": 0.8,
            "lowres": 0.8,
            "low resolution": 0.8,
            "low res": 0.8,
            "art": 1.3,
            "cg": 1.3,
            "cgi": 1.3,
            "lines": 1.1,
            "compression": 1.0,
            "very compressed": 1.0,
            "high compression": 1.0,
            "vc": 1.0,
            "text": 1.1,
            "txt": 1.1,
            "text refine": 1.1,
            "recovery": 1.2,
            "redefine": 1.4,
        }

        model_multiplier = model_multipliers.get(model.lower(), 1.0)
        total_memory = memory_for_scale * model_multiplier

        return {
            "minimum_memory_gb": base_memory,
            "recommended_memory_gb": total_memory,
            "scale_factor": scale,
            "model": model,
            "notes": "Memory usage varies by image size and complexity. "
            "Large images (>20MP) may require additional memory.",
        }

    def _get_output_suffix(self) -> str:
        """Get suffix to add to output filenames."""
        return "_gigapixel"

    def process(self, input_path: Path | str, output_path: Path | str | None = None, **kwargs) -> ProcessingResult:
        """
        Process file with Gigapixel AI using temporary directory approach.

        Args:
            input_path: Input file path
            output_path: Output file path (optional)
            **kwargs: Gigapixel-specific parameters

        Returns:
            Processing result
        """
        # Convert to Path objects
        input_path = Path(input_path)
        if output_path:
            output_path = Path(output_path)

        # Validate inputs
        self.validate_input_path(input_path)
        self.validate_params(**kwargs)

        # Ensure executable is available
        self.get_executable_path()

        # Determine final output path
        if output_path:
            final_output_path = self.path_validator.validate_output_path(output_path)
        else:
            # Use same directory as input with _gigapixel suffix
            output_dir = input_path.parent
            suffix = self._get_output_suffix()
            stem = input_path.stem
            extension = input_path.suffix
            output_filename = f"{stem}{suffix}{extension}"
            final_output_path = output_dir / output_filename

        # Create temporary directory for Gigapixel output
        with tempfile.TemporaryDirectory(prefix="topyaz_gigapixel_") as temp_dir:
            temp_output_dir = Path(temp_dir)

            # Build command with temp directory
            command = self.build_command(input_path, temp_output_dir, **kwargs)

            try:
                logger.info(f"Processing {input_path} with {self.product_name}")

                if self.options.dry_run:
                    logger.info(f"DRY RUN: Would execute: {' '.join(command)}")
                    return ProcessingResult(
                        success=True,
                        input_path=input_path,
                        output_path=final_output_path,
                        command=command,
                        stdout="DRY RUN - no output",
                        stderr="",
                        execution_time=0.0,
                        file_size_before=0,
                        file_size_after=0,
                    )

                import time

                start_time = time.time()

                # Get file size before processing
                file_size_before = input_path.stat().st_size if input_path.is_file() else 0

                # Execute the command
                exit_code, stdout, stderr = self.executor.execute(command, timeout=self.options.timeout)

                execution_time = time.time() - start_time

                # Check if processing was successful
                if exit_code != 0:
                    error_msg = f"{self.product_name} processing failed (exit code {exit_code})"
                    if stderr:
                        error_msg += f": {stderr}"
                    return ProcessingResult(
                        success=False,
                        input_path=input_path,
                        output_path=final_output_path,
                        command=command,
                        stdout=stdout,
                        stderr=stderr,
                        execution_time=execution_time,
                        file_size_before=file_size_before,
                        file_size_after=0,
                        error_message=error_msg,
                    )

                # Find the generated file in temp directory
                generated_files = list(temp_output_dir.glob("*"))
                image_files = [
                    f for f in generated_files if f.suffix.lower() in [".jpg", ".jpeg", ".png", ".tiff", ".tif"]
                ]

                if not image_files:
                    error_msg = f"No output files found in temporary directory {temp_output_dir}"
                    logger.error(error_msg)
                    return ProcessingResult(
                        success=False,
                        input_path=input_path,
                        output_path=final_output_path,
                        command=command,
                        stdout=stdout,
                        stderr=stderr,
                        execution_time=execution_time,
                        file_size_before=file_size_before,
                        file_size_after=0,
                        error_message=error_msg,
                    )

                # Use the first (and likely only) generated image file
                temp_output_file = image_files[0]

                # Ensure output directory exists
                final_output_path.parent.mkdir(parents=True, exist_ok=True)

                # Move the file to final location
                shutil.move(str(temp_output_file), str(final_output_path))

                # Get file size after processing
                file_size_after = final_output_path.stat().st_size if final_output_path.exists() else 0

                # Parse output for additional information
                parsed_info = self.parse_output(stdout, stderr)

                logger.info(f"Successfully processed {input_path} -> {final_output_path} in {execution_time:.2f}s")

                result = ProcessingResult(
                    success=True,
                    input_path=input_path,
                    output_path=final_output_path,
                    command=command,
                    stdout=stdout,
                    stderr=stderr,
                    execution_time=execution_time,
                    file_size_before=file_size_before,
                    file_size_after=file_size_after,
                    additional_info=parsed_info,
                )

                # Validate output file if validation is available
                try:
                    from topyaz.utils.validation import enhance_processing_result

                    result = enhance_processing_result(result)
                except ImportError:
                    logger.debug("File validation not available")

                return result

            except Exception as e:
                logger.error(f"Error processing {input_path} with {self.product_name}: {e}")

                return ProcessingResult(
                    success=False,
                    input_path=input_path,
                    output_path=final_output_path,
                    command=command,
                    stdout="",
                    stderr=str(e),
                    execution_time=0.0,
                    file_size_before=0,
                    file_size_after=0,
                    error_message=str(e),
                )
</file>

<file path="src/topyaz/products/photo_ai.py">
#!/usr/bin/env python3
# this_file: src/topyaz/products/photo_ai.py
"""
Topaz Photo AI implementation for topyaz.

This module provides the Photo AI product implementation with support
for automatic and manual photo enhancement, including batch processing
with Photo AI's 450 image limit handling.

"""

import platform
import shutil
import tempfile
from pathlib import Path
from typing import Any, Optional

from loguru import logger

from topyaz.core.errors import ProcessingError, ValidationError
from topyaz.core.types import CommandList, PhotoAIParams, ProcessingOptions, ProcessingResult, Product
from topyaz.execution.base import CommandExecutor
from topyaz.products.base import MacOSTopazProduct


class PhotoAI(MacOSTopazProduct):
    """
    Topaz Photo AI implementation.

    Provides automatic and manual photo enhancement capabilities with
    support for batch processing and Photo AI's specific constraints.

    Used in:
    - topyaz/cli.py
    - topyaz/products/__init__.py
    - topyaz/products/base.py
    """

    # Photo AI has a hard limit of ~450 images per batch
    MAX_BATCH_SIZE = 400  # Conservative limit

    def __init__(self, executor: CommandExecutor, options: ProcessingOptions):
        """
        Initialize Photo AI instance.

        Args:
            executor: Command executor for running operations
            options: Processing options and configuration

        """
        super().__init__(executor, options, Product.PHOTO_AI)

    @property
    def product_name(self) -> str:
        """Human-readable product name."""
        return "Topaz Photo AI"

    @property
    def executable_name(self) -> str:
        """Name of the executable file."""
        return "tpai"

    @property
    def app_name(self) -> str:
        """Name of the macOS application."""
        return "Topaz Photo AI.app"

    @property
    def app_executable_path(self) -> str:
        """Relative path to executable within app bundle."""
        return "Contents/Resources/bin/tpai"

    @property
    def supported_formats(self) -> list[str]:
        """List of supported image formats."""
        return ["jpg", "jpeg", "png", "tiff", "tif", "bmp", "webp", "dng", "raw", "cr2", "nef", "arw", "orf", "rw2"]

    def get_search_paths(self) -> list[Path]:
        """Get platform-specific search paths for Photo AI."""
        if platform.system() == "Darwin":
            # macOS paths
            return [
                Path("/Applications/Topaz Photo AI.app/Contents/Resources/bin/tpai"),
                Path("/Applications/Topaz Photo AI.app/Contents/MacOS/Topaz Photo AI"),
                Path.home() / "Applications/Topaz Photo AI.app/Contents/Resources/bin/tpai",
            ]
        if platform.system() == "Windows":
            # Windows paths
            return [
                Path("C:/Program Files/Topaz Labs LLC/Topaz Photo AI/tpai.exe"),
                Path("C:/Program Files (x86)/Topaz Labs LLC/Topaz Photo AI/tpai.exe"),
            ]
        # Linux or other platforms
        return [Path("/usr/local/bin/tpai"), Path("/opt/photo-ai/bin/tpai")]

    def validate_params(self, **kwargs) -> None:
        """
        Validate Photo AI parameters including enhanced autopilot settings.

        Args:
            **kwargs: Parameters to validate

        Raises:
            ValidationError: If parameters are invalid

        """
        # Extract Photo AI-specific parameters (standard CLI)
        format_param = kwargs.get("format", "preserve")
        quality = kwargs.get("quality", 95)
        compression = kwargs.get("compression", 6)
        bit_depth = kwargs.get("bit_depth", 8)
        tiff_compression = kwargs.get("tiff_compression", "lzw")

        # Validate output format
        valid_formats = {"preserve", "jpg", "jpeg", "png", "tif", "tiff", "dng"}
        if format_param.lower() not in valid_formats:
            msg = f"Invalid format '{format_param}'. Valid formats: {', '.join(sorted(valid_formats))}"
            raise ValidationError(msg)

        # Validate quality (for JPEG)
        if not (0 <= quality <= 100):
            msg = f"Quality must be between 0 and 100, got {quality}"
            raise ValidationError(msg)

        # Validate compression (for PNG)
        if not (0 <= compression <= 10):
            msg = f"Compression must be between 0 and 10, got {compression}"
            raise ValidationError(msg)

        # Validate bit depth (for TIFF)
        if bit_depth not in [8, 16]:
            msg = f"Bit depth must be 8 or 16, got {bit_depth}"
            raise ValidationError(msg)

        # Validate TIFF compression
        valid_tiff_compression = {"none", "lzw", "zip"}
        if tiff_compression.lower() not in valid_tiff_compression:
            msg = (
                f"Invalid TIFF compression '{tiff_compression}'. "
                f"Valid options: {', '.join(sorted(valid_tiff_compression))}"
            )
            raise ValidationError(msg)

        # Validate enhanced autopilot parameters if present
        autopilot_params = {k: v for k, v in kwargs.items() if self._is_autopilot_param(k)}
        if autopilot_params:
            try:
                from topyaz.system.photo_ai_prefs import PhotoAIPreferences

                prefs_handler = PhotoAIPreferences()
                prefs_handler.validate_setting_values(**autopilot_params)
            except ImportError:
                logger.warning("Preferences system not available - skipping autopilot parameter validation")
            except Exception as e:
                msg = f"Invalid autopilot parameter: {e}"
                raise ValidationError(msg)

    def _is_autopilot_param(self, param_name: str) -> bool:
        """
        Check if parameter is an autopilot setting.

        Args:
            param_name: Parameter name to check

        Returns:
            True if parameter controls autopilot settings
        """
        autopilot_params = {
            "face_strength",
            "face_detection",
            "face_parts",
            "denoise_model",
            "denoise_levels",
            "denoise_strength",
            "denoise_raw_model",
            "denoise_raw_levels",
            "denoise_raw_strength",
            "sharpen_model",
            "sharpen_levels",
            "sharpen_strength",
            "upscaling_model",
            "upscaling_factor",
            "upscaling_type",
            "deblur_strength",
            "denoise_upscale_strength",
            "lighting_strength",
            "raw_exposure_strength",
            "adjust_color",
            "temperature_value",
            "opacity_value",
            "resolution_unit",
            "default_resolution",
            "overwrite_files",
            "recurse_directories",
            "append_filters",
        }
        return param_name in autopilot_params

    def build_command(self, input_path: Path, output_path: Path, **kwargs) -> CommandList:
        """
        Build Photo AI command line.

        Args:
            input_path: Input file or directory path
            output_path: Output file or directory path
            **kwargs: Photo AI-specific parameters

        Returns:
            Command list ready for execution

        """
        executable = self.get_executable_path()

        # Extract parameters
        autopilot_preset = kwargs.get("autopilot_preset", "auto")
        format_param = kwargs.get("format", "preserve")
        quality = kwargs.get("quality", 95)
        compression = kwargs.get("compression", 6)
        bit_depth = kwargs.get("bit_depth", 8)
        tiff_compression = kwargs.get("tiff_compression", "lzw")
        show_settings = kwargs.get("show_settings", False)
        skip_processing = kwargs.get("skip_processing", False)
        override_autopilot = kwargs.get("override_autopilot", False)

        # Enhancement toggles
        upscale = kwargs.get("upscale")
        noise = kwargs.get("noise")
        sharpen = kwargs.get("sharpen")
        lighting = kwargs.get("lighting")
        color = kwargs.get("color")

        # Build base command
        cmd = [str(executable), "--cli"]

        # Add input path as positional argument (no -i flag) - use absolute path
        cmd.append(str(input_path.resolve()))

        # Add output path - use absolute path
        cmd.extend(["-o", str(output_path.resolve())])

        # Add autopilot preset
        if autopilot_preset and autopilot_preset != "auto":
            cmd.extend(["--autopilot", autopilot_preset])

        # Add output format
        if format_param.lower() != "preserve":
            cmd.extend(["-f", format_param])

        # Add format-specific options
        if format_param.lower() in ["jpg", "jpeg"]:
            cmd.extend(["-q", str(quality)])
        elif format_param.lower() == "png":
            cmd.extend(["-c", str(compression)])
        elif format_param.lower() in ["tif", "tiff"]:
            cmd.extend(["-d", str(bit_depth)])
            cmd.extend(["-tc", tiff_compression])

        # Add debug options
        if show_settings:
            cmd.append("--showSettings")

        if skip_processing:
            cmd.append("--skipProcessing")

        # Add override autopilot if manual enhancements are specified
        if override_autopilot or any([upscale, noise, sharpen, lighting, color]):
            cmd.append("--override")

            # Add enhancement toggles with proper boolean formatting
            self._add_boolean_parameter(cmd, "upscale", upscale)
            self._add_boolean_parameter(cmd, "noise", noise)
            self._add_boolean_parameter(cmd, "sharpen", sharpen)
            self._add_boolean_parameter(cmd, "lighting", lighting)
            self._add_boolean_parameter(cmd, "color", color)

        # Add directory processing flag if input is a directory
        if input_path.is_dir():
            cmd.append("--recursive")

        # Add verbose output if requested
        if self.options.verbose:
            cmd.append("--verbose")

        return cmd

    def _add_boolean_parameter(self, cmd: CommandList, param_name: str, value: bool | None) -> None:
        """
        Add boolean parameter to command with Photo AI's specific formatting.

        Args:
            cmd: Command list to modify
            param_name: Parameter name
            value: Parameter value (True, False, or None)

        """
        if value is True:
            # Enabled: just add the flag
            cmd.append(f"--{param_name}")
        elif value is False:
            # Disabled: add flag with enabled=false
            cmd.append(f"--{param_name}")
            cmd.append("enabled=false")
        # None: don't add anything (use autopilot)

    def parse_output(self, stdout: str, stderr: str) -> dict[str, Any]:
        """
        Parse Photo AI command output.

        Args:
            stdout: Standard output from command
            stderr: Standard error from command

        Returns:
            Dictionary of parsed information

        """
        info = {}

        # Parse processing information from output
        if stdout:
            lines = stdout.split("\n")
            for line in lines:
                line = line.strip()

                # Look for processed file count
                if "images processed" in line.lower():
                    try:
                        count = int(line.split()[0])
                        info["images_processed"] = count
                    except (ValueError, IndexError):
                        pass

                # Look for autopilot information
                if "autopilot:" in line.lower():
                    info["autopilot_preset"] = line.split(":")[-1].strip()

                # Look for enhancement information
                if "enhancements applied:" in line.lower():
                    enhancements = line.split(":")[-1].strip()
                    info["enhancements_applied"] = enhancements.split(", ")

        # Parse error information
        if stderr:
            error_lines = [line.strip() for line in stderr.split("\n") if line.strip()]
            if error_lines:
                info["errors"] = error_lines

        return info

    def process_batch_directory(self, input_dir: Path, output_dir: Path, **kwargs) -> list[dict[str, Any]]:
        """
        Process directory with Photo AI's 450 image batch limit handling.

        Args:
            input_dir: Input directory path
            output_dir: Output directory path
            **kwargs: Photo AI parameters

        Returns:
            List of batch results

        Used in:
        - topyaz/cli.py
        """
        # Find all supported image files
        image_files = []
        for ext in self.supported_formats:
            # Case-insensitive glob
            image_files.extend(input_dir.rglob(f"*.{ext}"))
            image_files.extend(input_dir.rglob(f"*.{ext.upper()}"))

        if not image_files:
            logger.warning(f"No supported image files found in {input_dir}")
            return []

        logger.info(f"Found {len(image_files)} images to process")

        # Split into batches
        batches = [image_files[i : i + self.MAX_BATCH_SIZE] for i in range(0, len(image_files), self.MAX_BATCH_SIZE)]

        logger.info(f"Processing {len(batches)} batch(es) of up to {self.MAX_BATCH_SIZE} images each")

        results = []

        for batch_num, batch_files in enumerate(batches, 1):
            logger.info(f"Processing batch {batch_num}/{len(batches)} ({len(batch_files)} images)")

            try:
                result = self._process_batch(batch_files, output_dir, batch_num, **kwargs)
                results.append(result)

                if not result.get("success", False):
                    logger.error(f"Batch {batch_num} failed")
                    break

            except Exception as e:
                logger.error(f"Error processing batch {batch_num}: {e}")
                results.append(
                    {"batch_num": batch_num, "success": False, "error": str(e), "files_count": len(batch_files)}
                )
                break

        return results

    def _process_batch(self, batch_files: list[Path], output_dir: Path, batch_num: int, **kwargs) -> dict[str, Any]:
        """
        Process a single batch of images.

        Args:
            batch_files: List of image files to process
            output_dir: Output directory
            batch_num: Batch number for logging
            **kwargs: Photo AI parameters

        Returns:
            Batch processing result

        """
        # Create temporary directory for batch processing
        with tempfile.TemporaryDirectory(prefix=f"topyaz_batch_{batch_num}_") as temp_dir:
            temp_path = Path(temp_dir)
            batch_input_dir = temp_path / "input"
            batch_input_dir.mkdir()

            # Create symlinks (or copy files) to batch directory
            for file_path in batch_files:
                target_path = batch_input_dir / file_path.name

                try:
                    # Try to create symlink first (faster)
                    target_path.symlink_to(file_path)
                except OSError:
                    # Fall back to copying if symlinks not supported
                    shutil.copy2(file_path, target_path)

            # Build command for batch processing
            cmd = self.build_command(batch_input_dir, output_dir, **kwargs)

            # Execute batch
            try:
                exit_code, stdout, stderr = self.executor.execute(cmd, timeout=self.options.timeout)

                success = self._handle_photo_ai_result(exit_code, stdout, stderr, batch_num)

                return {
                    "batch_num": batch_num,
                    "success": success,
                    "exit_code": exit_code,
                    "files_count": len(batch_files),
                    "stdout": stdout,
                    "stderr": stderr,
                }

            except Exception as e:
                logger.error(f"Batch {batch_num} execution failed: {e}")
                return {
                    "batch_num": batch_num,
                    "success": False,
                    "error": str(e),
                    "files_count": len(batch_files),
                }

    def _handle_photo_ai_result(self, exit_code: int, stdout: str, stderr: str, batch_num: int) -> bool:
        """
        Handle Photo AI-specific return codes.

        Args:
            exit_code: Command exit code
            stdout: Standard output
            stderr: Standard error
            batch_num: Batch number for logging

        Returns:
            True if processing was successful

        """
        if exit_code == 0:
            logger.info(f"Batch {batch_num} completed successfully")
            return True
        if exit_code == 1:
            logger.warning(f"Batch {batch_num} completed with some failures (partial success)")
            return True  # Partial success is still acceptable
        if exit_code == 255:  # -1 as unsigned
            logger.error(f"Batch {batch_num} failed: No valid files found")
            return False
        if exit_code == 254:  # -2 as unsigned
            logger.error(f"Batch {batch_num} failed: Invalid log token - login required")
            msg = "Photo AI authentication required. Please log in via the Photo AI GUI."
            raise ProcessingError(msg)
        if exit_code == 253:  # -3 as unsigned
            logger.error(f"Batch {batch_num} failed: Invalid argument")
            if stderr:
                logger.error(f"Error details: {stderr}")
            return False
        logger.error(f"Batch {batch_num} failed with exit code {exit_code}")
        if stderr:
            logger.error(f"Error details: {stderr}")
        return False

    def get_default_params(self) -> PhotoAIParams:
        """
        Get default parameters for Photo AI.

        Returns:
            Default Photo AI parameters

        """
        return PhotoAIParams()

    def get_memory_requirements(self, **kwargs) -> dict[str, Any]:
        """
        Get memory requirements for Photo AI processing.

        Args:
            **kwargs: Processing parameters

        Returns:
            Memory requirement information

        """
        # Photo AI memory usage is relatively predictable
        base_memory = 4  # Minimum for Photo AI

        # Batch size affects memory usage
        batch_size = min(kwargs.get("batch_size", self.MAX_BATCH_SIZE), self.MAX_BATCH_SIZE)

        # Memory scales with batch size
        if batch_size <= 100:
            recommended_memory = 8
        elif batch_size <= 200:
            recommended_memory = 12
        else:
            recommended_memory = 16

        return {
            "minimum_memory_gb": base_memory,
            "recommended_memory_gb": recommended_memory,
            "max_batch_size": self.MAX_BATCH_SIZE,
            "current_batch_size": batch_size,
            "notes": "Photo AI has a hard limit of ~450 images per batch. "
            "Memory usage scales with batch size and image resolution.",
        }

    def _get_output_suffix(self) -> str:
        """Get suffix to add to output filenames."""
        return "_photo_ai"

    def prepare_output_path(self, input_path: Path, output_path: Path | None = None) -> Path:
        """
        Prepare output path for Photo AI.

        Photo AI expects an output directory, not a file path.
        We'll return the parent directory and let Photo AI handle the filename.

        Args:
            input_path: Input file path
            output_path: Optional output path

        Returns:
            Prepared output directory path
        """
        if output_path:
            # If output_path is provided and is a file, use its parent directory
            if output_path.suffix:
                return self.path_validator.validate_output_path(output_path.parent)
            # It's already a directory
            return self.path_validator.validate_output_path(output_path)

        # Auto-generate output directory
        if self.options.output_dir:
            return self.path_validator.validate_output_path(self.options.output_dir)
        # Use input file's directory
        return self.path_validator.validate_output_path(input_path.parent)

    def process(self, input_path: Path | str, output_path: Path | str | None = None, **kwargs) -> ProcessingResult:
        """
        Process file with Photo AI using enhanced preferences manipulation.

        Args:
            input_path: Input file path
            output_path: Output file path (optional)
            **kwargs: Photo AI-specific parameters including enhanced autopilot settings

        Returns:
            Processing result
        """
        # Convert to Path objects
        input_path = Path(input_path)
        if output_path:
            output_path = Path(output_path)

        # Validate inputs
        self.validate_input_path(input_path)
        self.validate_params(**kwargs)

        # Ensure executable is available
        self.get_executable_path()

        # Determine final output path
        if output_path:
            final_output_path = self.path_validator.validate_output_path(output_path)
        else:
            # Use input folder + basename + -tpai suffix
            output_dir = input_path.parent
            stem = input_path.stem
            extension = input_path.suffix
            output_filename = f"{stem}-tpai{extension}"
            final_output_path = output_dir / output_filename

        # Extract autopilot parameters for preferences manipulation
        autopilot_params = {k: v for k, v in kwargs.items() if self._is_autopilot_param(k)}

        # Use preferences manipulation if autopilot parameters are provided
        if autopilot_params:
            return self._process_with_preferences(input_path, final_output_path, **kwargs)
        # Use standard processing without preferences manipulation
        return self._process_standard(input_path, final_output_path, **kwargs)

    def _process_with_preferences(self, input_path: Path, final_output_path: Path, **kwargs) -> ProcessingResult:
        """
        Process with preferences manipulation for enhanced autopilot control.

        Args:
            input_path: Input file path
            final_output_path: Final output file path
            **kwargs: All parameters including autopilot settings

        Returns:
            Processing result
        """
        try:
            from topyaz.system.photo_ai_prefs import PhotoAIAutopilotSettings, PhotoAIPreferences

            # Build autopilot settings from parameters
            autopilot_settings = self._build_autopilot_settings(**kwargs)

            # Create preferences handler and backup current settings
            with PhotoAIPreferences() as prefs:
                backup_id = prefs.backup()

                try:
                    # Apply enhanced autopilot settings
                    prefs.update_autopilot_settings(autopilot_settings)
                    logger.info("Applied enhanced autopilot settings to Photo AI preferences")

                    # Process with enhanced settings
                    return self._process_standard(input_path, final_output_path, **kwargs)

                finally:
                    # Always restore original preferences
                    prefs.restore(backup_id)
                    logger.info("Restored original Photo AI preferences")

        except ImportError:
            logger.warning("Preferences system not available - falling back to standard processing")
            return self._process_standard(input_path, final_output_path, **kwargs)
        except Exception as e:
            logger.error(f"Error in preferences manipulation: {e}")
            # Fall back to standard processing
            return self._process_standard(input_path, final_output_path, **kwargs)

    def _build_autopilot_settings(self, **kwargs) -> "PhotoAIAutopilotSettings":
        """
        Build autopilot settings from keyword arguments.

        Args:
            **kwargs: Keyword arguments containing autopilot parameters

        Returns:
            PhotoAIAutopilotSettings object
        """
        from topyaz.system.photo_ai_prefs import PhotoAIAutopilotSettings

        # Create settings with provided parameters, falling back to defaults
        return PhotoAIAutopilotSettings(
            # Face Recovery
            face_strength=kwargs.get("face_strength", 80),
            face_detection=kwargs.get("face_detection", "subject"),
            face_parts=kwargs.get("face_parts", ["hair", "necks"]),
            # Denoise
            denoise_model=kwargs.get("denoise_model", "Auto"),
            denoise_levels=kwargs.get("denoise_levels", ["medium", "high", "severe"]),
            denoise_strength=kwargs.get("denoise_strength", 3),
            denoise_raw_model=kwargs.get("denoise_raw_model", "Auto"),
            denoise_raw_levels=kwargs.get("denoise_raw_levels", ["low", "medium", "high", "severe"]),
            denoise_raw_strength=kwargs.get("denoise_raw_strength", 3),
            # Sharpen
            sharpen_model=kwargs.get("sharpen_model", "Auto"),
            sharpen_levels=kwargs.get("sharpen_levels", ["medium", "high"]),
            sharpen_strength=kwargs.get("sharpen_strength", 3),
            # Upscaling
            upscaling_model=kwargs.get("upscaling_model", "High Fidelity V2"),
            upscaling_factor=kwargs.get("upscaling_factor", 2.0),
            upscaling_type=kwargs.get("upscaling_type", "auto"),
            deblur_strength=kwargs.get("deblur_strength", 3),
            denoise_upscale_strength=kwargs.get("denoise_upscale_strength", 3),
            # Exposure & Color
            lighting_strength=kwargs.get("lighting_strength", 25),
            raw_exposure_strength=kwargs.get("raw_exposure_strength", 8),
            adjust_color=kwargs.get("adjust_color", False),
            # White Balance
            temperature_value=kwargs.get("temperature_value", 50),
            opacity_value=kwargs.get("opacity_value", 100),
            # Output
            resolution_unit=kwargs.get("resolution_unit", 1),
            default_resolution=kwargs.get("default_resolution", -1.0),
            # Processing
            overwrite_files=kwargs.get("overwrite_files", False),
            recurse_directories=kwargs.get("recurse_directories", False),
            append_filters=kwargs.get("append_filters", False),
        )

    def _process_standard(self, input_path: Path, final_output_path: Path, **kwargs) -> ProcessingResult:
        """
        Standard Photo AI processing using temporary directory approach.

        Args:
            input_path: Input file path
            final_output_path: Final output file path
            **kwargs: Standard CLI parameters

        Returns:
            Processing result
        """
        # Create temporary directory for Photo AI output
        with tempfile.TemporaryDirectory(prefix="topyaz_photo_ai_") as temp_dir:
            temp_output_dir = Path(temp_dir)

            # Build command with temp directory
            command = self.build_command(input_path, temp_output_dir, **kwargs)

            try:
                logger.info(f"Processing {input_path} with {self.product_name}")

                if self.options.dry_run:
                    logger.info(f"DRY RUN: Would execute: {' '.join(command)}")
                    return ProcessingResult(
                        success=True,
                        input_path=input_path,
                        output_path=final_output_path,
                        command=command,
                        stdout="DRY RUN - no output",
                        stderr="",
                        execution_time=0.0,
                        file_size_before=0,
                        file_size_after=0,
                    )

                import time

                start_time = time.time()

                # Get file size before processing
                file_size_before = input_path.stat().st_size if input_path.is_file() else 0

                # Execute the command
                exit_code, stdout, stderr = self.executor.execute(command, timeout=self.options.timeout)

                execution_time = time.time() - start_time

                # Check if processing was successful
                if exit_code != 0:
                    error_msg = f"{self.product_name} processing failed (exit code {exit_code})"
                    if stderr:
                        error_msg += f": {stderr}"
                    return ProcessingResult(
                        success=False,
                        input_path=input_path,
                        output_path=final_output_path,
                        command=command,
                        stdout=stdout,
                        stderr=stderr,
                        execution_time=execution_time,
                        file_size_before=file_size_before,
                        file_size_after=0,
                        error_message=error_msg,
                    )

                # Find the generated file in temp directory
                # Photo AI preserves the original filename or may add suffixes like -1, -2
                stem = input_path.stem
                ext = input_path.suffix

                # Look for exact filename first
                exact_file = temp_output_dir / input_path.name
                if exact_file.exists():
                    temp_output_file = exact_file
                else:
                    # Look for files with suffix pattern (man-1.jpg, man-2.jpg, etc)
                    pattern = f"{stem}*{ext}"
                    matching_files = list(temp_output_dir.glob(pattern))

                    if matching_files:
                        # Get the most recently modified file
                        temp_output_file = max(matching_files, key=lambda f: f.stat().st_mtime)
                    else:
                        error_msg = f"No output files found in temporary directory {temp_output_dir}"
                        logger.error(error_msg)
                        return ProcessingResult(
                            success=False,
                            input_path=input_path,
                            output_path=final_output_path,
                            command=command,
                            stdout=stdout,
                            stderr=stderr,
                            execution_time=execution_time,
                            file_size_before=file_size_before,
                            file_size_after=0,
                            error_message=error_msg,
                        )

                # Ensure output directory exists
                final_output_path.parent.mkdir(parents=True, exist_ok=True)

                # Move the file to final location
                shutil.move(str(temp_output_file), str(final_output_path))

                # Get file size after processing
                file_size_after = final_output_path.stat().st_size if final_output_path.exists() else 0

                # Parse output for additional information
                parsed_info = self.parse_output(stdout, stderr)

                logger.info(f"Successfully processed {input_path} -> {final_output_path} in {execution_time:.2f}s")

                result = ProcessingResult(
                    success=True,
                    input_path=input_path,
                    output_path=final_output_path,
                    command=command,
                    stdout=stdout,
                    stderr=stderr,
                    execution_time=execution_time,
                    file_size_before=file_size_before,
                    file_size_after=file_size_after,
                    additional_info=parsed_info,
                )

                # Validate output file if validation is available
                try:
                    from topyaz.utils.validation import enhance_processing_result

                    result = enhance_processing_result(result)
                except ImportError:
                    logger.debug("File validation not available")

                return result

            except Exception as e:
                logger.error(f"Error processing {input_path} with {self.product_name}: {e}")

                return ProcessingResult(
                    success=False,
                    input_path=input_path,
                    output_path=final_output_path,
                    command=command,
                    stdout="",
                    stderr=str(e),
                    execution_time=0.0,
                    file_size_before=0,
                    file_size_after=0,
                    error_message=str(e),
                )
</file>

<file path="src/topyaz/products/video_ai.py">
#!/usr/bin/env python3
# this_file: src/topyaz/products/video_ai.py
"""
Topaz Video AI implementation for topyaz.

This module provides the Video AI product implementation with support
for video upscaling, frame interpolation, and enhancement.

"""

import os
import platform
from pathlib import Path
from typing import Any, Optional

from loguru import logger

from topyaz.core.errors import AuthenticationError, ExecutableNotFoundError, ValidationError
from topyaz.core.types import CommandList, ProcessingOptions, Product, VideoAIParams
from topyaz.execution.base import CommandExecutor
from topyaz.products.base import MacOSTopazProduct


class VideoAI(MacOSTopazProduct):
    """
    Topaz Video AI implementation.

    Provides video upscaling, frame interpolation, and enhancement capabilities
    using Video AI's FFmpeg-based processing pipeline.

    Used in:
    - topyaz/cli.py
    - topyaz/products/__init__.py
    - topyaz/products/base.py
    """

    def __init__(self, executor: CommandExecutor, options: ProcessingOptions):
        """
        Initialize Video AI instance.

        Args:
            executor: Command executor for running operations
            options: Processing options and configuration

        """
        super().__init__(executor, options, Product.VIDEO_AI)
        self._setup_environment()

    @property
    def product_name(self) -> str:
        """Human-readable product name."""
        return "Topaz Video AI"

    @property
    def executable_name(self) -> str:
        """Name of the executable file."""
        return "ffmpeg"

    @property
    def app_name(self) -> str:
        """Name of the macOS application."""
        return "Topaz Video AI.app"

    @property
    def app_executable_path(self) -> str:
        """Relative path to executable within app bundle."""
        return "Contents/MacOS/ffmpeg"

    @property
    def supported_formats(self) -> list[str]:
        """List of supported video formats."""
        return [
            "mp4",
            "mov",
            "avi",
            "mkv",
            "webm",
            "m4v",
            "3gp",
            "flv",
            "wmv",
            "asf",
            "m2ts",
            "mts",
            "ts",
            "vob",
            "ogv",
            "dv",
        ]

    def get_search_paths(self) -> list[Path]:
        """Get platform-specific search paths for Video AI."""
        if platform.system() == "Darwin":
            # macOS paths
            return [
                Path("/Applications/Topaz Video AI.app/Contents/MacOS/ffmpeg"),
                Path.home() / "Applications/Topaz Video AI.app/Contents/MacOS/ffmpeg",
            ]
        if platform.system() == "Windows":
            # Windows paths
            return [
                Path("C:/Program Files/Topaz Labs LLC/Topaz Video AI/ffmpeg.exe"),
                Path("C:/Program Files (x86)/Topaz Labs LLC/Topaz Video AI/ffmpeg.exe"),
            ]
        # Linux or other platforms
        return [Path("/usr/local/bin/tvai-ffmpeg"), Path("/opt/video-ai/bin/ffmpeg")]

    def _setup_environment(self) -> None:
        """Set up Video AI environment variables."""
        try:
            if platform.system() == "Darwin":
                # macOS paths
                model_dir = "/Applications/Topaz Video AI.app/Contents/Resources/models"
                user_data_dir = str(Path.home() / "Library/Application Support/Topaz Labs LLC/Topaz Video AI/models")
            elif platform.system() == "Windows":
                # Windows paths
                model_dir = "C:\\Program Files\\Topaz Labs LLC\\Topaz Video AI\\models"
                user_data_dir = str(Path.home() / "AppData/Roaming/Topaz Labs LLC/Topaz Video AI/models")
            else:
                # Linux fallback
                model_dir = "/opt/video-ai/models"
                user_data_dir = str(Path.home() / ".config/topaz-video-ai/models")

            # Set environment variables
            os.environ["TVAI_MODEL_DIR"] = model_dir
            os.environ["TVAI_MODEL_DATA_DIR"] = user_data_dir

            logger.debug(f"Set TVAI_MODEL_DIR to: {model_dir}")
            logger.debug(f"Set TVAI_MODEL_DATA_DIR to: {user_data_dir}")

            # Validate authentication
            self._validate_authentication()

        except Exception as e:
            logger.warning(f"Could not set up Video AI environment: {e}")

    def _validate_authentication(self) -> None:
        """Validate Video AI authentication."""
        try:
            auth_locations = self._get_auth_file_locations()

            for auth_path in auth_locations:
                if auth_path.exists():
                    logger.debug(f"Found Video AI auth file: {auth_path}")

                    # Check if auth file is valid (basic existence check)
                    if auth_path.stat().st_size > 0:
                        logger.debug("Video AI authentication appears valid")
                        return
                    logger.warning(f"Video AI auth file is empty: {auth_path}")

            logger.debug("No Video AI auth files found - user may need to log in via GUI")

        except Exception as e:
            logger.warning(f"Could not validate Video AI authentication: {e}")

    def _get_auth_file_locations(self) -> list[Path]:
        """Get potential authentication file locations."""
        locations = []

        if platform.system() == "Darwin":
            # macOS locations
            base_path = Path.home() / "Library/Application Support/Topaz Labs LLC/Topaz Video AI"
            app_path = Path("/Applications/Topaz Video AI.app/Contents/Resources/models")

            # User data directory
            for auth_file in ["auth.tpz", "auth.json", "login.json", "user.json"]:
                locations.append(base_path / auth_file)

            # Application bundle
            locations.append(app_path / "auth.tpz")

        elif platform.system() == "Windows":
            # Windows locations
            base_path = Path.home() / "AppData/Roaming/Topaz Labs LLC/Topaz Video AI"

            for auth_file in ["auth.tpz", "auth.json", "login.json", "user.json"]:
                locations.append(base_path / auth_file)

        return locations

    def validate_params(self, **kwargs) -> None:
        """
        Validate Video AI parameters.

        Args:
            **kwargs: Parameters to validate

        Raises:
            ValidationError: If parameters are invalid

        """
        # Extract Video AI-specific parameters
        model = kwargs.get("model", "amq-13")
        scale = kwargs.get("scale", 2)
        fps = kwargs.get("fps")
        codec = kwargs.get("codec", "hevc_videotoolbox")
        quality = kwargs.get("quality", 18)
        denoise = kwargs.get("denoise")
        details = kwargs.get("details")
        halo = kwargs.get("halo")
        blur = kwargs.get("blur")
        compression = kwargs.get("compression")
        device = kwargs.get("device", 0)

        # Validate model
        valid_models = {
            "amq-13",
            "amq-12",
            "amq-11",
            "amq-10",
            "amq-9",
            "amq-8",
            "amq-7",
            "amq-6",
            "amq-5",
            "amq-4",
            "amq-3",
            "amq-2",
            "amq-1",
            "prob-4",
            "prob-3",
            "prob-2",
            "prob-1",
            "ahq-13",
            "ahq-12",
            "ahq-11",
            "ahq-10",
            "ahq-9",
            "ahq-8",
            "ahq-7",
            "ahq-6",
            "ahq-5",
            "ahq-4",
            "ahq-3",
            "ahq-2",
            "ahq-1",
            "chv-1",
            "chv-2",
            "chv-3",
            "chv-4",
            "rev-1",
            "rev-2",
            "rev-3",
            "thq-1",
            "thq-2",
            "thq-3",
            "dv-1",
            "dv-2",
            "iris-1",
            "iris-2",
            "dion-1",
            "dion-2",
            "gaia-1",
            "nyx-1",
            "nyx-2",
            "nyx-3",
            "artemis-lq-v12",
            "artemis-mq-v12",
            "artemis-hq-v12",
            "proteus-v4",
        }

        if model.lower() not in valid_models:
            msg = f"Invalid model '{model}'. Valid models: {', '.join(sorted(valid_models))}"
            raise ValidationError(msg)

        # Validate scale
        if not (1 <= scale <= 4):
            msg = f"Scale must be between 1 and 4, got {scale}"
            raise ValidationError(msg)

        # Validate FPS
        if fps is not None and not (1 <= fps <= 240):
            msg = f"FPS must be between 1 and 240, got {fps}"
            raise ValidationError(msg)

        # Validate quality (CRF value)
        if not (1 <= quality <= 51):
            msg = f"Quality must be between 1 and 51, got {quality}"
            raise ValidationError(msg)

        # Validate optional numeric parameters
        if denoise is not None and not (0 <= denoise <= 100):
            msg = f"Denoise must be between 0 and 100, got {denoise}"
            raise ValidationError(msg)

        if details is not None and not (-100 <= details <= 100):
            msg = f"Details must be between -100 and 100, got {details}"
            raise ValidationError(msg)

        for param_name, value in [("halo", halo), ("blur", blur), ("compression", compression)]:
            if value is not None and not (0 <= value <= 100):
                msg = f"{param_name} must be between 0 and 100, got {value}"
                raise ValidationError(msg)

        # Validate device
        if not (-1 <= device <= 10):
            msg = f"Device must be between -1 and 10, got {device}"
            raise ValidationError(msg)

        # Validate codec
        valid_codecs = {
            "hevc_videotoolbox",
            "hevc_nvenc",
            "hevc_amf",
            "libx265",
            "h264_videotoolbox",
            "h264_nvenc",
            "h264_amf",
            "libx264",
            "prores",
            "prores_ks",
            "copy",
        }
        if codec.lower() not in valid_codecs:
            msg = f"Invalid codec '{codec}'. Valid codecs: {', '.join(sorted(valid_codecs))}"
            raise ValidationError(msg)

    def build_command(self, input_path: Path, output_path: Path, **kwargs) -> CommandList:
        """
        Build Video AI command line with Topaz AI filters and high-quality encoding.

        Combines Topaz Video AI filters (tvai_up, tvai_fi, tvai_stb) with
        high-quality H.265 encoding settings as specified in TODO.

        Args:
            input_path: Input video file path
            output_path: Output video file path
            **kwargs: Video AI-specific parameters

        Returns:
            Command list ready for execution

        """
        executable = self.get_executable_path()

        # Extract parameters
        model = kwargs.get("model", "amq-13")
        scale = kwargs.get("scale", 2)
        fps = kwargs.get("fps")
        denoise = kwargs.get("denoise")
        details = kwargs.get("details")
        halo = kwargs.get("halo")
        blur = kwargs.get("blur")
        compression = kwargs.get("compression")
        kwargs.get("stabilize", False)
        interpolate = kwargs.get("interpolate", False)
        device = kwargs.get("device", 0)

        # Build base command with high-quality settings
        cmd = [str(executable)]

        # Add ffmpeg flags
        cmd.extend(["-hide_banner", "-nostdin", "-y"])

        # Add hardware acceleration for macOS
        if platform.system() == "Darwin":
            cmd.extend(["-strict", "2", "-hwaccel", "auto"])

        # Input file
        cmd.extend(["-i", str(input_path.resolve())])

        # Build filter chain
        filters = []

        # Main upscaling filter with Topaz AI
        tvai_filter = f"tvai_up=model={model}:scale={scale}"

        # Add optional parameters to upscaling filter
        filter_params = []
        if denoise is not None:
            filter_params.append(f"denoise={denoise}")
        if details is not None:
            filter_params.append(f"details={details}")
        if halo is not None:
            filter_params.append(f"halo={halo}")
        if blur is not None:
            filter_params.append(f"blur={blur}")
        if compression is not None:
            filter_params.append(f"compression={compression}")
        if device != 0:
            filter_params.append(f"device={device}")

        if filter_params:
            tvai_filter += ":" + ":".join(filter_params)

        filters.append(tvai_filter)

        # Add frame interpolation if requested
        if interpolate and fps:
            fi_filter = f"tvai_fi=model=chr-2:fps={fps}"
            if device != 0:
                fi_filter += f":device={device}"
            filters.append(fi_filter)

        # Note: Stabilization requires two-pass processing and is handled separately
        # in the process method if stabilize=True

        # Apply filters
        if filters:
            cmd.extend(["-vf", ",".join(filters)])

        # High-quality encoding settings (adapted for TVAI's ffmpeg and macOS)
        if platform.system() == "Darwin":
            # Use VideoToolbox encoder on macOS (compatible with TVAI)
            cmd.extend(["-c:v", "hevc_videotoolbox"])
            cmd.extend(["-profile:v", "main"])
            cmd.extend(["-pix_fmt", "yuv420p"])
            cmd.extend(["-allow_sw", "1"])
            cmd.extend(["-tag:v", "hvc1"])
            # Try to set quality equivalent to CRF 18
            cmd.extend(["-global_quality", "18"])
        else:
            # Fallback to libx265 for other platforms
            cmd.extend(["-c:v", "libx265"])
            cmd.extend(["-crf", "18"])
            cmd.extend(["-tag:v", "hvc1"])

        # Audio settings from TODO
        cmd.extend(["-c:a", "aac"])
        cmd.extend(["-b:a", "192k"])

        # Progress reporting
        if self.options.verbose:
            cmd.extend(["-progress", "pipe:1"])
        else:
            cmd.extend(["-loglevel", "error"])

        # Output file
        cmd.append(str(output_path.resolve()))

        return cmd

    def parse_output(self, stdout: str, stderr: str) -> dict[str, Any]:
        """
        Parse Video AI FFmpeg output.

        Args:
            stdout: Standard output from command
            stderr: Standard error from command

        Returns:
            Dictionary of parsed information

        """
        info = {}

        # Parse FFmpeg progress output
        if stdout:
            lines = stdout.split("\n")
            for line in lines:
                line = line.strip()

                # Parse progress information
                if "frame=" in line:
                    try:
                        frame_match = line.split("frame=")[1].split()[0]
                        info["frames_processed"] = int(frame_match)
                    except (IndexError, ValueError):
                        pass

                if "time=" in line:
                    try:
                        time_match = line.split("time=")[1].split()[0]
                        info["time_processed"] = time_match
                    except IndexError:
                        pass

                if "speed=" in line:
                    try:
                        speed_match = line.split("speed=")[1].split()[0]
                        info["processing_speed"] = speed_match
                    except IndexError:
                        pass

        # Parse error information
        if stderr:
            error_lines = [line.strip() for line in stderr.split("\n") if line.strip()]
            if error_lines:
                info["errors"] = error_lines

        return info

    def get_default_params(self) -> VideoAIParams:
        """
        Get default parameters for Video AI.

        Returns:
            Default Video AI parameters

        """
        return VideoAIParams()

    def get_memory_requirements(self, **kwargs) -> dict[str, Any]:
        """
        Get memory requirements for Video AI processing.

        Args:
            **kwargs: Processing parameters

        Returns:
            Memory requirement information

        """
        scale = kwargs.get("scale", 2)
        model = kwargs.get("model", "amq-13")
        fps = kwargs.get("fps")

        # Base memory requirements (in GB)
        base_memory = 8  # Minimum for Video AI

        # Scale affects memory usage significantly for video
        scale_multiplier = {1: 1.0, 2: 2.0, 3: 3.5, 4: 5.0}
        memory_for_scale = base_memory * scale_multiplier.get(scale, 1.0)

        # Model complexity affects memory
        if "amq" in model.lower():
            model_multiplier = 1.0  # Standard models
        elif "prob" in model.lower():
            model_multiplier = 1.2  # More complex models
        elif "ahq" in model.lower():
            model_multiplier = 1.1  # High quality models
        else:
            model_multiplier = 1.0  # Default

        # Frame interpolation increases memory usage
        if fps:
            memory_for_scale *= 1.5

        total_memory = memory_for_scale * model_multiplier

        return {
            "minimum_memory_gb": base_memory,
            "recommended_memory_gb": total_memory,
            "scale_factor": scale,
            "model": model,
            "frame_interpolation": fps is not None,
            "notes": "Video processing is memory-intensive. "
            "4K videos may require 16GB+ RAM. "
            "Consider processing shorter segments for large files.",
        }

    def _get_output_suffix(self) -> str:
        """Get suffix to add to output filenames."""
        return "_video_ai"
</file>

<file path="src/topyaz/system/__init__.py">
#!/usr/bin/env python3
# this_file: src/topyaz/system/__init__.py
"""
System module for topyaz.

This module contains system-level utilities for environment validation,
GPU detection, memory management, and path handling.
"""

from topyaz.system.environment import EnvironmentValidator
from topyaz.system.gpu import (
    AMDGPUDetector,
    GPUDetector,
    GPUManager,
    IntelGPUDetector,
    MetalGPUDetector,
    NvidiaGPUDetector,
)
from topyaz.system.memory import MemoryManager
from topyaz.system.paths import PathManager, PathValidator

__all__ = [
    "AMDGPUDetector",
    # Environment
    "EnvironmentValidator",
    # GPU
    "GPUDetector",
    "GPUManager",
    "IntelGPUDetector",
    # Memory
    "MemoryManager",
    "MetalGPUDetector",
    "NvidiaGPUDetector",
    "PathManager",
    # Paths
    "PathValidator",
]
</file>

<file path="src/topyaz/system/environment.py">
#!/usr/bin/env python3
# this_file: src/topyaz/system/environment.py
"""
Environment validation for topyaz.

This module validates system environment requirements including OS version,
available memory, disk space, and other system prerequisites.

"""

import platform
import shutil
from pathlib import Path
from typing import Any

import psutil
from loguru import logger

from topyaz.core.errors import EnvironmentError
from topyaz.core.types import SystemRequirements


class EnvironmentValidator:
    """
    Validates system environment and requirements.

    Performs checks for:
    - Operating system compatibility
    - Memory availability
    - Disk space requirements
    - Required executables
    - System dependencies

    Used in:
    - topyaz/cli.py
    - topyaz/system/__init__.py
    """

    def __init__(self, requirements: SystemRequirements | None = None):
        """
        Initialize environment validator.

        Args:
            requirements: System requirements to validate against.
                         Uses defaults if not provided.

        """
        self.requirements = requirements or SystemRequirements()
        self._validation_results = {}

    def validate_all(self, raise_on_error: bool = True) -> dict[str, bool]:
        """
        Perform all environment validations.

        Args:
            raise_on_error: Raise exception on validation failure

        Returns:
            Dictionary of validation results

        Raises:
            EnvironmentError: If validation fails and raise_on_error is True

        Used in:
        - topyaz/cli.py
        """
        self._validation_results = {
            "os_version": self.validate_os_version(raise_on_error=False),
            "memory": self.validate_memory(raise_on_error=False),
            "disk_space": self.validate_disk_space(raise_on_error=False),
            "gpu": self.validate_gpu_availability(raise_on_error=False),
        }

        all_valid = all(self._validation_results.values())

        if not all_valid and raise_on_error:
            failed = [k for k, v in self._validation_results.items() if not v]
            msg = f"Environment validation failed: {', '.join(failed)}"
            raise OSError(msg)

        return self._validation_results

    def validate_os_version(self, raise_on_error: bool = True) -> bool:
        """
        Validate operating system version.

        Args:
            raise_on_error: Raise exception on validation failure

        Returns:
            True if OS version is compatible

        Raises:
            EnvironmentError: If OS version is incompatible and raise_on_error is True

        """
        system = platform.system()

        if system == "Darwin":  # macOS
            return self._validate_macos_version(raise_on_error)
        if system == "Windows":
            return self._validate_windows_version(raise_on_error)
        if raise_on_error:
            msg = f"Unsupported operating system: {system}"
            raise OSError(msg)
        logger.warning(f"Unsupported operating system: {system}")
        return False

    def _validate_macos_version(self, raise_on_error: bool) -> bool:
        """Validate macOS version."""
        try:
            version_str = platform.mac_ver()[0]
            if not version_str:
                logger.warning("Could not determine macOS version")
                return True  # Assume compatible if can't determine

            # Parse version
            parts = version_str.split(".")
            major = int(parts[0])
            minor = int(parts[1]) if len(parts) > 1 else 0

            min_major, min_minor = self.requirements.min_macos_version

            if major < min_major or (major == min_major and minor < min_minor):
                msg = f"macOS {min_major}.{min_minor}+ required, found {major}.{minor}"
                if raise_on_error:
                    raise OSError(msg)
                logger.warning(msg)
                return False

            logger.debug(f"macOS version {major}.{minor} is compatible")
            return True

        except (ValueError, IndexError) as e:
            logger.warning(f"Failed to parse macOS version: {e}")
            return True  # Assume compatible if can't parse

    def _validate_windows_version(self, raise_on_error: bool) -> bool:
        """Validate Windows version."""
        # Windows 10+ is generally compatible
        version = platform.version()
        logger.debug(f"Windows version: {version}")

        # Basic check for Windows 10+
        try:
            # Windows version format: "10.0.19041"
            major = int(version.split(".")[0])
            if major < 10:
                msg = "Windows 10 or later required"
                if raise_on_error:
                    raise OSError(msg)
                logger.warning(msg)
                return False
        except (ValueError, IndexError):
            logger.warning("Could not parse Windows version")

        return True

    def validate_memory(self, required_gb: int | None = None, raise_on_error: bool = True) -> bool:
        """
        Validate available system memory.

        Args:
            required_gb: Required memory in GB (uses default if None)
            raise_on_error: Raise exception on validation failure

        Returns:
            True if sufficient memory is available

        Raises:
            EnvironmentError: If insufficient memory and raise_on_error is True

        """
        required_gb = required_gb or self.requirements.min_memory_gb
        memory = psutil.virtual_memory()
        total_gb = memory.total / (1024**3)
        available_gb = memory.available / (1024**3)

        logger.debug(f"Memory: {total_gb:.1f}GB total, {available_gb:.1f}GB available, {memory.percent:.1f}% used")

        if total_gb < required_gb:
            msg = f"Insufficient memory: {required_gb}GB required, {total_gb:.1f}GB total"
            if raise_on_error:
                raise OSError(msg)
            logger.warning(msg)
            return False

        if available_gb < 2:  # Warn if less than 2GB available
            logger.warning(f"Low available memory: {available_gb:.1f}GB. Consider closing other applications.")

        return True

    def validate_disk_space(
        self, required_gb: int | None = None, path: Path | None = None, raise_on_error: bool = True
    ) -> bool:
        """
        Validate available disk space.

        Args:
            required_gb: Required space in GB (uses default if None)
            path: Path to check space for (uses home directory if None)
            raise_on_error: Raise exception on validation failure

        Returns:
            True if sufficient disk space is available

        Raises:
            EnvironmentError: If insufficient space and raise_on_error is True

        """
        required_gb = required_gb or self.requirements.min_disk_space_gb
        check_path = path or Path.home()

        try:
            disk_usage = psutil.disk_usage(str(check_path))
            free_gb = disk_usage.free / (1024**3)
            total_gb = disk_usage.total / (1024**3)

            logger.debug(
                f"Disk space at {check_path}: {free_gb:.1f}GB free "
                f"of {total_gb:.1f}GB total ({disk_usage.percent:.1f}% used)"
            )

            if free_gb < required_gb:
                msg = f"Insufficient disk space: {required_gb}GB required, {free_gb:.1f}GB available at {check_path}"
                if raise_on_error:
                    raise OSError(msg)
                logger.warning(msg)
                return False

            if free_gb < required_gb * 1.5:  # Warn if less than 150% of required
                logger.warning(
                    f"Low disk space: {free_gb:.1f}GB available. Recommend at least {required_gb * 1.5:.1f}GB free."
                )

            return True

        except Exception as e:
            logger.error(f"Failed to check disk space: {e}")
            if raise_on_error:
                msg = f"Disk space check failed: {e}"
                raise OSError(msg)
            return False

    def validate_gpu_availability(self, raise_on_error: bool = True) -> bool:
        """
        Validate GPU availability (basic check).

        Args:
            raise_on_error: Raise exception on validation failure

        Returns:
            True if GPU is available or not required

        Raises:
            EnvironmentError: If GPU required but not available and raise_on_error is True

        """
        if not self.requirements.required_gpu:
            return True

        # Basic GPU checks
        gpu_available = False

        # Check for common GPU utilities
        if platform.system() == "Darwin":
            # macOS always has Metal support on modern systems
            gpu_available = True
            logger.debug("macOS Metal GPU support available")
        elif shutil.which("nvidia-smi"):
            gpu_available = True
            logger.debug("NVIDIA GPU detected")
        elif shutil.which("rocm-smi"):
            gpu_available = True
            logger.debug("AMD GPU detected")

        if not gpu_available and self.requirements.required_gpu:
            msg = "No compatible GPU detected. GPU acceleration may not be available."
            if raise_on_error:
                raise OSError(msg)
            logger.warning(msg)
            return False

        return True

    def check_executable(self, name: str, paths: list[str]) -> Path | None:
        """
        Check if an executable exists at any of the given paths.

        Args:
            name: Executable name for logging
            paths: List of paths to check

        Returns:
            Path to executable if found, None otherwise

        """
        for path_str in paths:
            path = Path(path_str)
            if path.exists() and path.is_file():
                logger.debug(f"Found {name} at: {path}")
                return path

        logger.debug(f"{name} not found in: {paths}")
        return None

    def get_system_info(self) -> dict[str, Any]:
        """
        Get comprehensive system information.

        Returns:
            Dictionary containing system information

        Used in:
        - topyaz/cli.py
        """
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage(Path.home())

        info = {
            "platform": {
                "system": platform.system(),
                "release": platform.release(),
                "version": platform.version(),
                "machine": platform.machine(),
                "processor": platform.processor(),
            },
            "memory": {
                "total_gb": round(memory.total / (1024**3), 2),
                "available_gb": round(memory.available / (1024**3), 2),
                "percent_used": memory.percent,
            },
            "disk": {
                "total_gb": round(disk.total / (1024**3), 2),
                "free_gb": round(disk.free / (1024**3), 2),
                "percent_used": disk.percent,
            },
            "cpu": {
                "count": psutil.cpu_count(),
                "count_physical": psutil.cpu_count(logical=False),
            },
        }

        # Add macOS specific info
        if platform.system() == "Darwin":
            info["macos_version"] = platform.mac_ver()[0]

        return info
</file>

<file path="src/topyaz/system/gpu.py">
#!/usr/bin/env python3
# this_file: src/topyaz/system/gpu.py
"""
GPU detection and monitoring for topyaz.

This module provides GPU detection capabilities for different platforms
and vendors (NVIDIA, AMD, Intel, Apple Metal).

"""

import json
import platform
import shutil
import subprocess
from abc import ABC, abstractmethod
from typing import Optional

from loguru import logger

from topyaz.core.types import GPUInfo, GPUStatus


class GPUDetector(ABC):
    """
    Abstract base class for GPU detection.

    Subclasses implement platform/vendor-specific GPU detection logic.

    Used in:
    - topyaz/system/__init__.py
    """

    @abstractmethod
    def detect(self) -> GPUStatus:
        """
        Detect GPU information.

        Returns:
            GPUStatus object with detected devices

        """
        pass

    def _run_command(self, cmd: list[str], timeout: int = 10) -> tuple[bool, str, str]:
        """
        Run a command and capture output.

        Args:
            cmd: Command to run
            timeout: Command timeout in seconds

        Returns:
            Tuple of (success, stdout, stderr)

        """
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout, check=False)
            return result.returncode == 0, result.stdout, result.stderr
        except subprocess.TimeoutExpired:
            return False, "", "Command timed out"
        except Exception as e:
            return False, "", str(e)


class NvidiaGPUDetector(GPUDetector):
    """NVIDIA GPU detection using nvidia-smi.

    Used in:
    - topyaz/system/__init__.py
    """

    def detect(self) -> GPUStatus:
        """Detect NVIDIA GPUs using nvidia-smi."""
        if not shutil.which("nvidia-smi"):
            return GPUStatus(available=False, errors=["nvidia-smi not found"])

        # Query GPU information
        cmd = [
            "nvidia-smi",
            "--query-gpu=name,memory.total,memory.used,memory.free,utilization.gpu,temperature.gpu,power.draw",
            "--format=csv,noheader,nounits",
        ]

        success, stdout, stderr = self._run_command(cmd)

        if not success:
            return GPUStatus(available=False, errors=[f"nvidia-smi failed: {stderr}"])

        devices = []
        for i, line in enumerate(stdout.strip().split("\n")):
            if not line.strip():
                continue

            parts = [p.strip() for p in line.split(",")]
            if len(parts) >= 7:
                try:
                    device = GPUInfo(
                        name=parts[0],
                        type="nvidia",
                        memory_total_mb=int(parts[1]) if parts[1].isdigit() else None,
                        memory_used_mb=int(parts[2]) if parts[2].isdigit() else None,
                        memory_free_mb=int(parts[3]) if parts[3].isdigit() else None,
                        utilization_percent=int(parts[4]) if parts[4].isdigit() else None,
                        temperature_c=int(parts[5]) if parts[5].isdigit() else None,
                        power_draw_w=float(parts[6]) if parts[6].replace(".", "").isdigit() else None,
                        device_id=i,
                    )
                    devices.append(device)
                except (ValueError, IndexError) as e:
                    logger.debug(f"Failed to parse NVIDIA GPU info: {e}")

        return GPUStatus(available=len(devices) > 0, devices=devices)


class AMDGPUDetector(GPUDetector):
    """AMD GPU detection using rocm-smi.

    Used in:
    - topyaz/system/__init__.py
    """

    def detect(self) -> GPUStatus:
        """Detect AMD GPUs using rocm-smi."""
        if not shutil.which("rocm-smi"):
            return GPUStatus(available=False, errors=["rocm-smi not found"])

        # Query basic GPU information
        cmd = ["rocm-smi", "--showid", "--showtemp", "--showuse", "--showmeminfo", "vram"]

        success, stdout, stderr = self._run_command(cmd)

        if not success:
            return GPUStatus(available=False, errors=[f"rocm-smi failed: {stderr}"])

        # Parse AMD GPU output (format is more complex than NVIDIA)
        devices = []
        lines = stdout.strip().split("\n")

        # Simple parsing - AMD output format varies
        gpu_count = 0
        for line in lines:
            if "GPU" in line and any(keyword in line for keyword in ["Device", "Temperature", "Usage"]):
                gpu_count += 1

        # Create basic device entries
        for i in range(gpu_count):
            device = GPUInfo(name=f"AMD GPU {i}", type="amd", device_id=i)
            devices.append(device)

        if devices:
            logger.debug(f"Detected {len(devices)} AMD GPU(s)")

        return GPUStatus(available=len(devices) > 0, devices=devices)


class IntelGPUDetector(GPUDetector):
    """Intel GPU detection.

    Used in:
    - topyaz/system/__init__.py
    """

    def detect(self) -> GPUStatus:
        """Detect Intel GPUs."""
        # Intel GPU detection is platform-specific and less standardized
        if shutil.which("intel_gpu_top"):
            return GPUStatus(available=True, devices=[GPUInfo(name="Intel GPU", type="intel", device_id=0)])

        return GPUStatus(available=False, errors=["Intel GPU tools not found"])


class MetalGPUDetector(GPUDetector):
    """macOS Metal GPU detection.

    Used in:
    - topyaz/system/__init__.py
    """

    def detect(self) -> GPUStatus:
        """Detect Metal GPUs on macOS using system_profiler."""
        if platform.system() != "Darwin":
            return GPUStatus(available=False, errors=["Metal GPU detection only available on macOS"])

        # Use system_profiler to get GPU info
        cmd = ["system_profiler", "SPDisplaysDataType", "-json"]

        success, stdout, stderr = self._run_command(cmd, timeout=15)

        if not success:
            return GPUStatus(available=False, errors=[f"system_profiler failed: {stderr}"])

        try:
            data = json.loads(stdout)
            devices = []

            displays_data = data.get("SPDisplaysDataType", [])

            for i, display in enumerate(displays_data):
                # Look for GPU information
                gpu_name = None
                vram = None

                # Different keys for different macOS versions
                if "sppci_model" in display:
                    gpu_name = display["sppci_model"]
                elif "spdisplays_chipset" in display:
                    gpu_name = display["spdisplays_chipset"]
                elif "_name" in display:
                    gpu_name = display["_name"]

                if "spdisplays_vram" in display:
                    vram = display["spdisplays_vram"]
                elif "spdisplays_gmem" in display:
                    vram = display["spdisplays_gmem"]

                if gpu_name:
                    device = GPUInfo(name=gpu_name, type="metal", vram=vram, device_id=i)

                    # Parse VRAM if possible
                    if vram and isinstance(vram, str):
                        # Extract memory size from strings like "8 GB" or "8192 MB"
                        import re

                        match = re.search(r"(\d+)\s*(GB|MB)", vram, re.IGNORECASE)
                        if match:
                            size = int(match.group(1))
                            unit = match.group(2).upper()
                            if unit == "GB":
                                device.memory_total_mb = size * 1024
                            else:  # MB
                                device.memory_total_mb = size

                    devices.append(device)

            # On Apple Silicon, GPU is integrated
            if not devices and platform.processor() == "arm":
                # Check for Apple Silicon
                devices.append(GPUInfo(name="Apple Silicon GPU", type="metal", device_id=0))

            return GPUStatus(available=len(devices) > 0, devices=devices)

        except (json.JSONDecodeError, KeyError) as e:
            return GPUStatus(available=False, errors=[f"Failed to parse system_profiler output: {e}"])


class GPUManager:
    """
    Manages GPU detection across different platforms and vendors.

    Automatically selects the appropriate detector based on the platform
    and available tools.

    Used in:
    - topyaz/cli.py
    - topyaz/system/__init__.py
    """

    def __init__(self):
        """Initialize GPU manager."""
        self._detector = self._get_detector()
        self._cached_status: GPUStatus | None = None

    def _get_detector(self) -> GPUDetector:
        """
        Get appropriate GPU detector for the current platform.

        Returns:
            GPUDetector instance

        """
        system = platform.system()

        if system == "Darwin":
            # macOS - use Metal detector
            return MetalGPUDetector()

        # For other platforms, try in order of preference
        if shutil.which("nvidia-smi"):
            return NvidiaGPUDetector()

        if shutil.which("rocm-smi"):
            return AMDGPUDetector()

        if shutil.which("intel_gpu_top"):
            return IntelGPUDetector()

        # Fallback - return a dummy detector
        logger.warning("No GPU detection tools found")

        class DummyDetector(GPUDetector):
            """ """

            def detect(self) -> GPUStatus:
                """ """
                return GPUStatus(available=False, errors=["No GPU detection tools available"])

        return DummyDetector()

    def get_status(self, use_cache: bool = True) -> GPUStatus:
        """
        Get current GPU status.

        Args:
            use_cache: Use cached status if available

        Returns:
            GPUStatus object

        Used in:
        - topyaz/cli.py
        """
        if use_cache and self._cached_status is not None:
            return self._cached_status

        logger.debug("Detecting GPU devices...")
        self._cached_status = self._detector.detect()

        if self._cached_status.available:
            logger.info(f"Detected {self._cached_status.count} GPU device(s)")
            for device in self._cached_status.devices:
                logger.debug(f"  - {device.name} (Type: {device.type})")
        else:
            logger.debug("No GPU devices detected")

        return self._cached_status

    def clear_cache(self) -> None:
        """Clear cached GPU status."""
        self._cached_status = None

    def get_device_by_id(self, device_id: int) -> GPUInfo | None:
        """
        Get GPU device by ID.

        Args:
            device_id: Device ID

        Returns:
            GPUInfo object or None if not found

        """
        status = self.get_status()

        for device in status.devices:
            if device.device_id == device_id:
                return device

        return None

    def get_best_device(self) -> GPUInfo | None:
        """
        Get the best available GPU device.

        Selection criteria:
        1. Most available memory
        2. Lowest utilization
        3. First device as fallback

        Returns:
            Best GPUInfo object or None if no devices

        """
        status = self.get_status()

        if not status.devices:
            return None

        # Sort by available memory (descending) and utilization (ascending)
        def score_device(device: GPUInfo) -> tuple:
            mem_free = device.memory_free_mb or 0
            utilization = device.utilization_percent or 100
            return (-mem_free, utilization)

        devices_with_info = [
            d for d in status.devices if d.memory_free_mb is not None or d.utilization_percent is not None
        ]

        if devices_with_info:
            return min(devices_with_info, key=score_device)

        # Fallback to first device
        return status.devices[0]
</file>

<file path="src/topyaz/system/memory.py">
#!/usr/bin/env python3
# this_file: src/topyaz/system/memory.py
"""
Memory management and optimization for topyaz.

This module provides memory constraint checking and batch size optimization
for different Topaz products based on available system resources.

"""

from typing import Optional

import psutil
from loguru import logger

from topyaz.core.types import MemoryConstraints, Product


class MemoryManager:
    """
    Manages memory constraints and optimization.

    Provides methods to:
    - Check current memory availability
    - Suggest optimal batch sizes
    - Monitor memory usage during operations
    - Provide memory-based recommendations

    Used in:
    - topyaz/cli.py
    - topyaz/system/__init__.py
    """

    # Memory requirements per operation type (in MB per item)
    MEMORY_PER_ITEM = {
        Product.VIDEO_AI: 4096,  # ~4GB per video
        Product.GIGAPIXEL: 512,  # ~512MB per image
        Product.PHOTO_AI: 256,  # ~256MB per image
    }

    # Minimum free memory to maintain (in MB)
    MIN_FREE_MEMORY_MB = 2048  # 2GB

    def __init__(self):
        """Initialize memory manager."""
        self._initial_memory = None
        self._peak_usage = 0

    def check_constraints(self, operation_type: str | Product = "processing") -> MemoryConstraints:
        """
        Check current memory constraints and provide recommendations.

        Args:
            operation_type: Type of operation or Product enum

        Returns:
            MemoryConstraints object with current status and recommendations

        """
        memory = psutil.virtual_memory()

        constraints = MemoryConstraints(
            available_gb=memory.available / (1024**3),
            total_gb=memory.total / (1024**3),
            percent_used=memory.percent,
            recommendations=[],
        )

        # Convert string operation type to Product if possible
        product = None
        if isinstance(operation_type, Product):
            product = operation_type
        else:
            # Try to map string to product
            op_lower = operation_type.lower()
            if "video" in op_lower:
                product = Product.VIDEO_AI
            elif "gigapixel" in op_lower:
                product = Product.GIGAPIXEL
            elif "photo" in op_lower:
                product = Product.PHOTO_AI

        # General memory constraint checks
        if memory.percent > 90:
            constraints.recommendations.append("Critical: Memory usage above 90% - close other applications")
        elif memory.percent > 85:
            constraints.recommendations.append("High memory usage detected - consider reducing batch size")

        if constraints.available_gb < 4:
            constraints.recommendations.append("Low available memory - process files in smaller batches")

        # Product-specific recommendations
        if product == Product.VIDEO_AI:
            if constraints.available_gb < 16:
                constraints.recommendations.append("Video AI: Less than 16GB available - process one video at a time")
            if constraints.total_gb < 32:
                constraints.recommendations.append("Video AI: Consider upgrading to 32GB+ RAM for better performance")

        elif product == Product.GIGAPIXEL:
            if constraints.available_gb < 4:
                constraints.recommendations.append("Gigapixel: Low memory may cause processing failures")
            if constraints.available_gb < 8:
                constraints.recommendations.append("Gigapixel: Reduce batch size to 5-10 images")

        elif product == Product.PHOTO_AI:
            if constraints.available_gb < 2:
                constraints.recommendations.append("Photo AI: Very low memory - process in small batches")

        logger.debug(
            f"Memory check for {operation_type}: "
            f"{constraints.available_gb:.1f}GB available, "
            f"{constraints.percent_used:.1f}% used"
        )

        return constraints

    def get_optimal_batch_size(
        self,
        file_count: int,
        operation_type: str | Product = "processing",
        file_size_mb: float | None = None,
        safety_factor: float = 0.8,
    ) -> int:
        """
        Calculate optimal batch size based on available memory.

        Args:
            file_count: Total number of files to process
            operation_type: Type of operation or Product enum
            file_size_mb: Average file size in MB (for better estimation)
            safety_factor: Safety factor (0-1) to prevent OOM

        Returns:
            Optimal batch size

        Used in:
        - topyaz/cli.py
        """
        if file_count == 0:
            return 0

        memory = psutil.virtual_memory()
        available_mb = memory.available / (1024**2)

        # Reserve minimum free memory
        usable_memory_mb = max(0, (available_mb - self.MIN_FREE_MEMORY_MB) * safety_factor)

        # Determine memory per item
        if isinstance(operation_type, Product):
            memory_per_item = self.MEMORY_PER_ITEM.get(
                operation_type,
                256,  # Default
            )
        else:
            # String-based operation type
            op_lower = operation_type.lower()
            if "video" in op_lower:
                memory_per_item = self.MEMORY_PER_ITEM[Product.VIDEO_AI]
            elif "gigapixel" in op_lower:
                memory_per_item = self.MEMORY_PER_ITEM[Product.GIGAPIXEL]
            elif "photo" in op_lower:
                memory_per_item = self.MEMORY_PER_ITEM[Product.PHOTO_AI]
            else:
                memory_per_item = 256  # Default

        # Adjust based on file size if provided
        if file_size_mb:
            # Use file size as a factor
            memory_per_item = max(memory_per_item, file_size_mb * 2)

        # Calculate batch size
        if usable_memory_mb <= 0:
            batch_size = 1  # Minimum batch size
        else:
            batch_size = int(usable_memory_mb / memory_per_item)

        # Apply product-specific limits
        if isinstance(operation_type, Product):
            if operation_type == Product.VIDEO_AI:
                # Video AI typically processes one at a time
                batch_size = min(batch_size, 4)
            elif operation_type == Product.GIGAPIXEL:
                # Gigapixel can handle more in parallel
                batch_size = min(batch_size, 50)
            elif operation_type == Product.PHOTO_AI:
                # Photo AI has a hard limit around 450
                batch_size = min(batch_size, 400)

        # Never exceed file count
        batch_size = max(1, min(batch_size, file_count))

        logger.debug(
            f"Optimal batch size for {operation_type}: {batch_size} "
            f"(from {file_count} files, {usable_memory_mb:.0f}MB usable)"
        )

        return batch_size

    def start_monitoring(self) -> None:
        """Start memory monitoring for an operation."""
        self._initial_memory = psutil.virtual_memory()
        self._peak_usage = self._initial_memory.used
        logger.debug(f"Memory monitoring started: {self._initial_memory.percent:.1f}% used")

    def update_monitoring(self) -> dict[str, float]:
        """
        Update memory monitoring and return current stats.

        Returns:
            Dictionary with memory statistics

        """
        if self._initial_memory is None:
            self.start_monitoring()

        current_memory = psutil.virtual_memory()
        self._peak_usage = max(self._peak_usage, current_memory.used)

        return {
            "current_used_gb": current_memory.used / (1024**3),
            "current_percent": current_memory.percent,
            "peak_used_gb": self._peak_usage / (1024**3),
            "delta_gb": (current_memory.used - self._initial_memory.used) / (1024**3),
        }

    def stop_monitoring(self) -> dict[str, float]:
        """
        Stop memory monitoring and return final stats.

        Returns:
            Dictionary with final memory statistics

        """
        stats = self.update_monitoring()

        logger.debug(
            f"Memory monitoring stopped: Peak usage: {stats['peak_used_gb']:.1f}GB, Delta: {stats['delta_gb']:+.1f}GB"
        )

        self._initial_memory = None
        self._peak_usage = 0

        return stats

    def suggest_recovery_action(self, error_message: str, operation_type: str | Product = "processing") -> list[str]:
        """
        Suggest recovery actions based on error message.

        Args:
            error_message: Error message from failed operation
            operation_type: Type of operation that failed

        Returns:
            List of suggested recovery actions

        """
        suggestions = []
        error_lower = error_message.lower()

        # Check for memory-related keywords
        memory_keywords = ["memory", "ram", "allocation", "out of memory", "oom", "insufficient", "failed to allocate"]

        if any(keyword in error_lower for keyword in memory_keywords):
            current_memory = self.check_constraints(operation_type)

            suggestions.append("Memory issue detected. Try:")
            suggestions.append(f"- Current memory usage: {current_memory.percent_used:.1f}%")
            suggestions.append(f"- Available: {current_memory.available_gb:.1f}GB")

            # Add specific suggestions
            suggestions.extend(current_memory.recommendations)

            # General suggestions
            suggestions.append("- Close other applications")
            suggestions.append("- Reduce batch size to 1")
            suggestions.append("- Restart the application")

            # Product-specific suggestions
            if isinstance(operation_type, Product):
                if operation_type == Product.VIDEO_AI:
                    suggestions.append("- Lower output resolution or quality")
                    suggestions.append("- Process shorter segments")
                elif operation_type == Product.GIGAPIXEL:
                    suggestions.append("- Process smaller images first")
                    suggestions.append("- Reduce scale factor")
                elif operation_type == Product.PHOTO_AI:
                    suggestions.append("- Disable some enhancement features")
                    suggestions.append("- Process JPEG instead of RAW")

        return suggestions

    def can_process_batch(
        self, batch_size: int, operation_type: str | Product = "processing", required_memory_mb: float | None = None
    ) -> tuple[bool, str]:
        """
        Check if system can process a batch of given size.

        Args:
            batch_size: Number of items in batch
            operation_type: Type of operation
            required_memory_mb: Override memory requirement per item

        Returns:
            Tuple of (can_process, reason_if_not)

        """
        memory = psutil.virtual_memory()
        available_mb = memory.available / (1024**2)

        # Determine memory requirement
        if required_memory_mb is None:
            if isinstance(operation_type, Product):
                required_memory_mb = self.MEMORY_PER_ITEM.get(operation_type, 256)
            else:
                required_memory_mb = 256  # Default

        total_required = batch_size * required_memory_mb

        # Check if we have enough memory
        if total_required > available_mb - self.MIN_FREE_MEMORY_MB:
            return False, (f"Insufficient memory: {total_required:.0f}MB required, {available_mb:.0f}MB available")

        # Check if memory usage is already high
        if memory.percent > 90:
            return False, f"Memory usage too high: {memory.percent:.1f}%"

        return True, "OK"
</file>

<file path="src/topyaz/system/paths.py">
#!/usr/bin/env python3
# this_file: src/topyaz/system/paths.py
"""
Path validation and utilities for topyaz.

This module provides path handling, validation, and manipulation utilities
including support for recursive operations and output path generation.

"""

import os
import shutil
from pathlib import Path
from typing import Optional, Union

from loguru import logger

from topyaz.core.errors import ValidationError
from topyaz.core.types import Product


class PathValidator:
    """
    Validates and normalizes file system paths.

    Provides methods for:
    - Path expansion and normalization
    - Permission checking
    - Output path generation
    - Directory structure preservation

    Used in:
    - topyaz/products/base.py
    - topyaz/system/__init__.py
    """

    # Supported image extensions for each product
    IMAGE_EXTENSIONS = {
        Product.GIGAPIXEL: {
            ".jpg",
            ".jpeg",
            ".png",
            ".tif",
            ".tiff",
            ".bmp",
            ".webp",
            ".dng",
            ".raw",
            ".cr2",
            ".nef",
            ".arw",
        },
        Product.PHOTO_AI: {
            ".jpg",
            ".jpeg",
            ".png",
            ".tif",
            ".tiff",
            ".bmp",
            ".webp",
            ".dng",
            ".raw",
            ".cr2",
            ".nef",
            ".arw",
            ".heic",
            ".heif",
        },
    }

    # Supported video extensions
    VIDEO_EXTENSIONS = {
        ".mp4",
        ".mov",
        ".avi",
        ".mkv",
        ".webm",
        ".m4v",
        ".wmv",
        ".flv",
        ".f4v",
        ".mpg",
        ".mpeg",
        ".3gp",
    }

    def __init__(self, preserve_structure: bool = True):
        """
        Initialize path validator.

        Args:
            preserve_structure: Whether to preserve directory structure in output

        """
        self.preserve_structure = preserve_structure

    def validate_input_path(self, path: str | Path, must_exist: bool = True, file_type: Product | None = None) -> Path:
        """
        Validate and normalize input path.

        Args:
            path: Input path to validate
            must_exist: Whether path must exist
            file_type: Product type for extension validation

        Returns:
            Normalized Path object

        Raises:
            ValidationError: If path is invalid

        Used in:
        - topyaz/products/base.py
        """
        # Expand and resolve path
        try:
            path_obj = Path(path).expanduser().resolve()
        except Exception as e:
            msg = f"Invalid path '{path}': {e}"
            raise ValidationError(msg)

        # Check existence
        if must_exist and not path_obj.exists():
            msg = f"Path does not exist: {path_obj}"
            raise ValidationError(msg)

        # Check readability
        if must_exist and not os.access(path_obj, os.R_OK):
            msg = f"Path is not readable: {path_obj}"
            raise ValidationError(msg)

        # Validate file extension if checking a file
        if path_obj.is_file() and file_type:
            self._validate_file_extension(path_obj, file_type)

        logger.debug(f"Validated input path: {path_obj}")
        return path_obj

    def validate_output_path(self, path: str | Path, create_dirs: bool = True, check_writable: bool = True) -> Path:
        """
        Validate and prepare output path.

        Args:
            path: Output path to validate
            create_dirs: Create parent directories if needed
            check_writable: Check if path/parent is writable

        Returns:
            Normalized Path object

        Raises:
            ValidationError: If path is invalid

        Used in:
        - topyaz/products/base.py
        """
        # Expand and resolve path
        try:
            path_obj = Path(path).expanduser().resolve()
        except Exception as e:
            msg = f"Invalid output path '{path}': {e}"
            raise ValidationError(msg)

        # Create parent directory if needed
        parent_dir = path_obj.parent
        if create_dirs and not parent_dir.exists():
            try:
                parent_dir.mkdir(parents=True, exist_ok=True)
                logger.debug(f"Created output directory: {parent_dir}")
            except Exception as e:
                msg = f"Failed to create directory: {e}"
                raise ValidationError(msg)

        # Check writability
        if check_writable:
            check_dir = path_obj if path_obj.is_dir() else parent_dir
            if not os.access(check_dir, os.W_OK):
                msg = f"Output path is not writable: {check_dir}"
                raise ValidationError(msg)

        logger.debug(f"Validated output path: {path_obj}")
        return path_obj

    def generate_output_path(
        self,
        input_path: Path,
        output_base: Path | None = None,
        suffix: str = "_processed",
        preserve_structure: bool | None = None,
        product: Product | None = None,
    ) -> Path:
        """
        Generate output path based on input path.

        Args:
            input_path: Input file/directory path
            output_base: Base output directory
            suffix: Suffix to add to filenames
            preserve_structure: Override instance setting
            product: Product type for naming

        Returns:
            Generated output path

        """
        preserve = preserve_structure if preserve_structure is not None else self.preserve_structure

        if input_path.is_file():
            # Single file processing
            if output_base and output_base.is_dir():
                # Output to specified directory
                if preserve and input_path.parent != Path():
                    # Preserve relative directory structure
                    rel_path = input_path.relative_to(input_path.parent.parent)
                    output_path = output_base / rel_path.parent / f"{input_path.stem}{suffix}{input_path.suffix}"
                else:
                    # Flat output
                    output_path = output_base / f"{input_path.stem}{suffix}{input_path.suffix}"
            elif output_base:
                # Specific output file
                output_path = output_base
            else:
                # Same directory as input
                output_path = input_path.parent / f"{input_path.stem}{suffix}{input_path.suffix}"

        # Directory processing
        elif output_base:
            output_path = output_base
        else:
            # Create processed directory next to input
            output_path = input_path.parent / f"{input_path.name}{suffix}"

        return output_path

    def find_files(
        self,
        root_path: Path,
        product: Product | None = None,
        recursive: bool = True,
        extensions: set[str] | None = None,
    ) -> list[Path]:
        """
        Find all supported files in a directory.

        Args:
            root_path: Root directory to search
            product: Product type for filtering
            recursive: Search recursively
            extensions: Custom extensions to search for

        Returns:
            List of file paths

        """
        if not root_path.is_dir():
            return [root_path] if root_path.is_file() else []

        # Determine extensions to search for
        if extensions:
            search_extensions = extensions
        elif product == Product.VIDEO_AI:
            search_extensions = self.VIDEO_EXTENSIONS
        elif product in (Product.GIGAPIXEL, Product.PHOTO_AI):
            search_extensions = self.IMAGE_EXTENSIONS.get(product, set())
        else:
            # All supported extensions
            search_extensions = (
                self.VIDEO_EXTENSIONS
                | self.IMAGE_EXTENSIONS.get(Product.GIGAPIXEL, set())
                | self.IMAGE_EXTENSIONS.get(Product.PHOTO_AI, set())
            )

        # Find files
        files = []
        pattern = "**/*" if recursive else "*"

        for ext in search_extensions:
            files.extend(root_path.glob(f"{pattern}{ext}"))
            files.extend(root_path.glob(f"{pattern}{ext.upper()}"))

        # Remove duplicates and sort
        files = sorted(set(files))

        logger.debug(f"Found {len(files)} files in {root_path}")
        return files

    def _validate_file_extension(self, path: Path, product: Product) -> None:
        """
        Validate file extension for a product.

        Args:
            path: File path to validate
            product: Product type

        Raises:
            ValidationError: If extension not supported

        """
        ext = path.suffix.lower()

        if product == Product.VIDEO_AI:
            valid_extensions = self.VIDEO_EXTENSIONS
        else:
            valid_extensions = self.IMAGE_EXTENSIONS.get(product, set())

        if ext not in valid_extensions:
            msg = f"Unsupported file type '{ext}' for {product.value}. Supported: {', '.join(sorted(valid_extensions))}"
            raise ValidationError(msg)

    def create_backup(self, source_path: Path, backup_suffix: str = ".backup") -> Path | None:
        """
        Create a backup of a file.

        Args:
            source_path: File to backup
            backup_suffix: Suffix for backup file

        Returns:
            Path to backup file or None if failed

        """
        if not source_path.is_file():
            return None

        backup_path = source_path.parent / f"{source_path.name}{backup_suffix}"

        # Find unique backup name
        counter = 1
        while backup_path.exists():
            backup_path = source_path.parent / f"{source_path.name}{backup_suffix}.{counter}"
            counter += 1

        try:
            shutil.copy2(source_path, backup_path)
            logger.debug(f"Created backup: {backup_path}")
            return backup_path
        except Exception as e:
            logger.error(f"Failed to create backup: {e}")
            return None

    def ensure_unique_path(self, path: Path) -> Path:
        """
        Ensure path is unique by adding number suffix if needed.

        Args:
            path: Path to make unique

        Returns:
            Unique path

        """
        if not path.exists():
            return path

        # Split into stem and suffix
        if path.is_file():
            stem = path.stem
            suffix = path.suffix
            parent = path.parent

            counter = 1
            while True:
                new_path = parent / f"{stem}_{counter}{suffix}"
                if not new_path.exists():
                    return new_path
                counter += 1
        else:
            # Directory
            counter = 1
            while True:
                new_path = path.parent / f"{path.name}_{counter}"
                if not new_path.exists():
                    return new_path
                counter += 1

    def calculate_directory_size(self, path: Path) -> int:
        """
        Calculate total size of a directory.

        Args:
            path: Directory path

        Returns:
            Total size in bytes

        """
        if path.is_file():
            return path.stat().st_size

        total_size = 0
        for file_path in path.rglob("*"):
            if file_path.is_file():
                total_size += file_path.stat().st_size

        return total_size

    def format_size(self, size_bytes: int) -> str:
        """
        Format byte size as human-readable string.

        Args:
            size_bytes: Size in bytes

        Returns:
            Formatted size string

        """
        for unit in ["B", "KB", "MB", "GB", "TB"]:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0

        return f"{size_bytes:.1f} PB"


class PathManager:
    """
    High-level path management for topyaz operations.

    Combines path validation with output generation and
    structure preservation logic.

    Used in:
    - topyaz/system/__init__.py
    """

    def __init__(self, output_dir: Path | None = None, preserve_structure: bool = True, backup_originals: bool = False):
        """
        Initialize path manager.

        Args:
            output_dir: Default output directory
            preserve_structure: Preserve input directory structure
            backup_originals: Create backups before processing

        """
        self.output_dir = output_dir
        self.preserve_structure = preserve_structure
        self.backup_originals = backup_originals
        self.validator = PathValidator(preserve_structure)

    def prepare_paths(
        self, input_path: str | Path, output_path: str | Path | None = None, product: Product | None = None
    ) -> tuple[Path, Path]:
        """
        Prepare and validate input/output paths.

        Args:
            input_path: Input path
            output_path: Output path (optional)
            product: Product type for validation

        Returns:
            Tuple of (input_path, output_path)

        Raises:
            ValidationError: If paths are invalid

        """
        # Validate input
        input_obj = self.validator.validate_input_path(input_path, file_type=product)

        # Determine output
        if output_path:
            output_obj = self.validator.validate_output_path(output_path)
        else:
            output_obj = self.validator.generate_output_path(input_obj, self.output_dir, product=product)

        # Create backup if requested
        if self.backup_originals and input_obj.is_file():
            self.validator.create_backup(input_obj)

        return input_obj, output_obj
</file>

<file path="src/topyaz/utils/__init__.py">
#!/usr/bin/env python3
# this_file: src/topyaz/utils/__init__.py
"""
Utilities module for topyaz.

This module contains utility functions and classes for logging,
validation, and other common operations.
"""

from topyaz.utils.logging import LoggingManager, ProgressLogger, get_logger, logger, logging_manager, setup_logging
from topyaz.utils.validation import compare_media_files, enhance_processing_result, validate_output_file

__all__ = [
    "LoggingManager",
    "ProgressLogger",
    "compare_media_files",
    "enhance_processing_result",
    "get_logger",
    "logger",
    "logging_manager",
    "setup_logging",
    "validate_output_file",
]
</file>

<file path="src/topyaz/utils/logging.py">
#!/usr/bin/env python3
# this_file: src/topyaz/utils/logging.py
"""
Logging configuration and utilities for topyaz.

This module provides centralized logging setup using loguru, with support for
console and file output, structured logging, and various formatting options.

"""

import sys
from pathlib import Path
from typing import Optional

from loguru import logger

from topyaz.core.types import LogLevel


class LoggingManager:
    """
    Manages logging configuration for topyaz.

    Provides methods to configure console and file logging with
    appropriate formatting and rotation policies.

    Used in:
    - topyaz/cli.py
    - topyaz/utils/__init__.py
    """

    # Default log format for console output
    CONSOLE_FORMAT = (
        "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
        "<level>{level: <8}</level> | "
        "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - "
        "<level>{message}</level>"
    )

    # Simplified format for file output (no color codes)
    FILE_FORMAT = "{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}"

    # Minimal format for non-verbose mode
    SIMPLE_FORMAT = "<level>{level: <8}</level> | <level>{message}</level>"

    def __init__(self):
        """Initialize logging manager."""
        self._configured = False
        self._log_file: Path | None = None

    def setup(
        self,
        log_level: str | LogLevel = "INFO",
        verbose: bool = True,
        log_file: Path | None = None,
        log_to_file: bool = True,
        rotation: str = "10 MB",
        retention: str = "1 week",
        colorize: bool = True,
    ) -> None:
        """
        Configure logging for topyaz.

        Args:
            log_level: Logging level (DEBUG, INFO, WARNING, ERROR)
            verbose: Enable verbose output with detailed formatting
            log_file: Path to log file (auto-generated if None)
            log_to_file: Enable file logging
            rotation: Log rotation size/time (e.g., "10 MB", "1 day")
            retention: Log retention period (e.g., "1 week", "30 days")
            colorize: Enable colored console output

        """
        # Remove existing handlers to avoid duplicates
        logger.remove()

        # Convert log level to string if enum
        if isinstance(log_level, LogLevel):
            log_level = log_level.value

        # Configure console logging
        console_format = self.CONSOLE_FORMAT if verbose else self.SIMPLE_FORMAT
        logger.add(
            sys.stderr,
            format=console_format,
            level=log_level,
            colorize=colorize,
            filter=self._console_filter,
        )

        # Configure file logging if enabled
        if log_to_file:
            if log_file is None:
                log_dir = Path.home() / ".topyaz" / "logs"
                log_dir.mkdir(parents=True, exist_ok=True)
                log_file = log_dir / "topyaz.log"

            self._log_file = log_file

            logger.add(
                log_file,
                format=self.FILE_FORMAT,
                level="DEBUG",  # Always log debug to file
                rotation=rotation,
                retention=retention,
                compression="zip",
                encoding="utf-8",
                filter=self._file_filter,
            )

        self._configured = True
        logger.debug(f"Logging configured: level={log_level}, verbose={verbose}")

    def _console_filter(self, record: dict) -> bool:
        """
        Filter for console output.

        Args:
            record: Log record dictionary

        Returns:
            True to include the record, False to exclude

        """
        # Filter out some noisy debug messages from console
        if record["level"].name == "DEBUG":
            # Skip paramiko debug messages
            if record["name"].startswith("paramiko"):
                return False
            # Skip urllib3 debug messages
            if record["name"].startswith("urllib3"):
                return False

        return True

    def _file_filter(self, record: dict) -> bool:
        """
        Filter for file output.

        Args:
            record: Log record dictionary

        Returns:
            True to include the record, False to exclude

        """
        # Include all messages in file (can add filtering later if needed)
        return True

    def add_context(self, **kwargs) -> None:
        """
        Add context variables to all log messages.

        Args:
            **kwargs: Context variables to add

        Example:
            logging_manager.add_context(product="gigapixel", operation="upscale")

        """
        logger.configure(extra=kwargs)

    def get_log_file(self) -> Path | None:
        """
        Get current log file path.

        Returns:
            Path to log file or None if file logging disabled

        """
        return self._log_file

    @staticmethod
    def create_progress_logger(name: str) -> "ProgressLogger":
        """
        Create a progress-aware logger for long operations.

        Args:
            name: Logger name/operation description

        Returns:
            ProgressLogger instance
        """
        return ProgressLogger(name)


class ProgressLogger:
    """
    Logger for tracking progress of long-running operations.

    Provides methods to log progress updates without cluttering the output.

    Used in:
    - topyaz/utils/__init__.py
    """

    def __init__(self, name: str):
        """
        Initialize progress logger.

        Args:
            name: Operation name/description

        """
        self.name = name
        self._last_percent = -1

    def update(self, current: int, total: int, message: str = "") -> None:
        """
        Log progress update.

        Args:
            current: Current item/step
            total: Total items/steps
            message: Optional progress message

        """
        if total == 0:
            return

        percent = int((current / total) * 100)

        # Only log at 10% intervals to reduce noise
        if percent >= self._last_percent + 10 or percent == 100:
            self._last_percent = percent

            msg = f"{self.name}: {percent}% ({current}/{total})"
            if message:
                msg += f" - {message}"

            logger.info(msg)

    def complete(self, message: str = "Complete") -> None:
        """
        Log operation completion.

        Args:
            message: Completion message

        """
        logger.success(f"{self.name}: {message}")

    def error(self, message: str) -> None:
        """
        Log operation error.

        Args:
            message: Error message

        """
        logger.error(f"{self.name}: {message}")


# Global logging manager instance
logging_manager = LoggingManager()


def setup_logging(
    log_level: str | LogLevel = "INFO", verbose: bool = True, log_file: Path | None = None, **kwargs
) -> None:
    """
    Convenience function to set up logging.

    Args:
        log_level: Logging level
        verbose: Enable verbose output
        log_file: Optional log file path
        **kwargs: Additional arguments for LoggingManager.setup()

    Used in:
    - topyaz/utils/__init__.py
    """
    logging_manager.setup(log_level=log_level, verbose=verbose, log_file=log_file, **kwargs)


def get_logger(name: str | None = None) -> logger:
    """
    Get a logger instance.

    Args:
        name: Logger name (uses caller's module if None)

    Returns:
        Logger instance

    Used in:
    - topyaz/utils/__init__.py
    """
    if name:
        return logger.bind(name=name)
    return logger


# Re-export logger for convenience
__all__ = [
    "LoggingManager",
    "ProgressLogger",
    "get_logger",
    "logger",
    "logging_manager",
    "setup_logging",
]
</file>

<file path="src/topyaz/__init__.py">
#!/usr/bin/env python3
# this_file: src/topyaz/__init__.py
"""
topyaz: Unified Python CLI wrapper for Topaz Labs products.

This package provides a unified command-line interface for Topaz Video AI,
Gigapixel AI, and Photo AI products with support for local and remote execution.
"""

try:
    from topyaz.__version__ import __version__
except ImportError:
    __version__ = "0.1.0-dev"

from topyaz.cli import TopyazCLI
from topyaz.core.errors import (
    AuthenticationError,
    EnvironmentError,
    ExecutableNotFoundError,
    ProcessingError,
    RemoteExecutionError,
    TopazError,
    ValidationError,
)

__all__ = [
    "AuthenticationError",
    "EnvironmentError",
    "ExecutableNotFoundError",
    "ProcessingError",
    "RemoteExecutionError",
    "TopazError",
    "TopyazCLI",
    "ValidationError",
    "__version__",
]
</file>

<file path="src/topyaz/__main__.py">
#!/usr/bin/env python3
# this_file: src/topyaz/__main__.py
"""
Main entry point for the topyaz CLI.

This module provides the CLI interface using Python Fire for automatic command generation.
"""

import fire
from loguru import logger

from topyaz.cli import TopyazCLI


def main() -> None:
    """Main entry point for the topyaz CLI."""
    try:
        # Use Python Fire to automatically generate CLI from the TopyazCLI class
        fire.Fire(TopyazCLI)
    except KeyboardInterrupt:
        logger.info("Operation cancelled by user")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        raise


if __name__ == "__main__":
    main()
</file>

<file path="src/topyaz/cli.py">
#!/usr/bin/env python3
# this_file: src/topyaz/cli.py
"""
Command-line interface for topyaz.

This module provides the main CLI wrapper that integrates all the modular
components into a unified interface compatible with the original TopyazCLI.

"""

import sys
from pathlib import Path
from typing import Any, Optional

import fire
from loguru import logger

from topyaz.core.config import Config
from topyaz.core.errors import TopazError
from topyaz.core.types import ProcessingOptions, Product, RemoteOptions
from topyaz.execution.local import LocalExecutor
from topyaz.execution.remote import RemoteExecutor
from topyaz.products import GigapixelAI, PhotoAI, VideoAI, create_product
from topyaz.system.environment import EnvironmentValidator
from topyaz.system.gpu import GPUManager
from topyaz.system.memory import MemoryManager
from topyaz.utils.logging import LoggingManager


class TopyazCLI:
    """
    Unified CLI wrapper for Topaz Labs products.

    This class provides a simplified interface that delegates to specialized
    components while maintaining backward compatibility with the original
    monolithic implementation.

    Used in:
    - topyaz/__init__.py
    - topyaz/__main__.py
    """

    def __init__(
        self,
        verbose: bool = True,
        dry_run: bool = False,
        timeout: int = 3600,
        parallel_jobs: int = 1,
        output_dir: str | None = None,
        preserve_structure: bool = True,
        backup_originals: bool = False,
        remote_host: str | None = None,
        remote_user: str | None = None,
        ssh_key: str | None = None,
        ssh_port: int = 22,
        connection_timeout: int = 30,
        config_file: str | None = None,
        **kwargs,
    ):
        """
        Initialize topyaz wrapper.

        Args:
            verbose: Enable verbose logging
            dry_run: Enable dry run mode (don't actually process)
            timeout: Command timeout in seconds
            parallel_jobs: Number of parallel jobs (not implemented yet)
            output_dir: Default output directory
            preserve_structure: Preserve directory structure in output
            backup_originals: Backup original files before processing
            remote_host: Remote host for SSH execution
            remote_user: Remote user for SSH
            ssh_key: SSH key file path
            ssh_port: SSH port number
            connection_timeout: SSH connection timeout
            config_file: Configuration file path
            **kwargs: Additional configuration options

        """
        # Set up logging first
        self.logging_manager = LoggingManager()
        self.logging_manager.setup(verbose=verbose)

        logger.info("Initializing topyaz wrapper")

        # Parse options into data classes
        self.options = ProcessingOptions(
            verbose=verbose,
            dry_run=dry_run,
            timeout=timeout,
            parallel_jobs=parallel_jobs,
            output_dir=Path(output_dir) if output_dir else None,
            preserve_structure=preserve_structure,
            backup_originals=backup_originals,
        )

        self.remote_options = RemoteOptions(
            host=remote_host,
            user=remote_user,
            ssh_key=Path(ssh_key) if ssh_key else None,
            ssh_port=ssh_port,
            connection_timeout=connection_timeout,
        )

        # Initialize configuration
        config_path = Path(config_file) if config_file else None
        self.config = Config(config_path)

        # Initialize system components
        self.env_validator = EnvironmentValidator()
        self.gpu_manager = GPUManager()
        self.memory_manager = MemoryManager()

        # Set up executor
        if self.remote_options.host:
            logger.info(f"Using remote execution: {self.remote_options.user}@{self.remote_options.host}")
            self.executor = RemoteExecutor(self.remote_options)
        else:
            logger.info("Using local execution")
            from topyaz.execution.base import ExecutorContext

            context = ExecutorContext(timeout=self.options.timeout, dry_run=self.options.dry_run)
            self.executor = LocalExecutor(context)

        # Initialize products (lazy loading)
        self._gigapixel: GigapixelAI | None = None
        self._video_ai: VideoAI | None = None
        self._photo_ai: PhotoAI | None = None

        logger.info("topyaz wrapper initialized successfully")

    @property
    def gigapixel(self) -> GigapixelAI:
        """Get Gigapixel AI instance (lazy loaded)."""
        if self._gigapixel is None:
            self._gigapixel = GigapixelAI(self.executor, self.options)
        return self._gigapixel

    @property
    def video_ai(self) -> VideoAI:
        """Get Video AI instance (lazy loaded)."""
        if self._video_ai is None:
            self._video_ai = VideoAI(self.executor, self.options)
        return self._video_ai

    @property
    def photo_ai(self) -> PhotoAI:
        """Get Photo AI instance (lazy loaded)."""
        if self._photo_ai is None:
            self._photo_ai = PhotoAI(self.executor, self.options)
        return self._photo_ai

    def gp(
        self,
        input_path: str,
        model: str = "std",
        scale: int = 2,
        denoise: int | None = None,
        sharpen: int | None = None,
        compression: int | None = None,
        detail: int | None = None,
        creativity: int | None = None,
        texture: int | None = None,
        prompt: str | None = None,
        face_recovery: int | None = None,
        face_recovery_version: int = 2,
        format: str = "preserve",
        quality: int = 95,
        bit_depth: int = 0,
        parallel_read: int = 1,
        output: str | None = None,
        **kwargs,
    ) -> bool:
        """
        Process images with Gigapixel AI.

        Args:
            input_path: Input file or directory path
            model: AI model to use
            scale: Upscale factor (1-6)
            denoise: Denoise strength (1-100)
            sharpen: Sharpen strength (1-100)
            compression: Compression reduction (1-100)
            detail: Detail enhancement (1-100)
            creativity: Creativity level for generative models (1-6)
            texture: Texture level for generative models (1-6)
            prompt: Text prompt for generative models
            face_recovery: Face recovery strength (1-100)
            face_recovery_version: Face recovery version (1 or 2)
            format: Output format (preserve, jpg, png, tiff)
            quality: JPEG quality (1-100)
            bit_depth: Output bit depth (0, 8, 16)
            parallel_read: Parallel file reading (1-10)
            output: Output path
            **kwargs: Additional parameters

        Returns:
            True if successful, False otherwise

        """
        try:
            logger.info(f"Processing {input_path} with Gigapixel AI")

            result = self.gigapixel.process(
                input_path=input_path,
                output_path=output,
                model=model,
                scale=scale,
                denoise=denoise,
                sharpen=sharpen,
                compression=compression,
                detail=detail,
                creativity=creativity,
                texture=texture,
                prompt=prompt,
                face_recovery=face_recovery,
                face_recovery_version=face_recovery_version,
                format=format,
                quality=quality,
                bit_depth=bit_depth,
                parallel_read=parallel_read,
                **kwargs,
            )

            return result.success

        except Exception as e:
            logger.error(f"Gigapixel AI processing failed: {e}")
            return False

    def video(
        self,
        input_path: str,
        model: str = "amq-13",
        scale: int = 2,
        fps: int | None = None,
        codec: str = "hevc_videotoolbox",
        quality: int = 18,
        denoise: int | None = None,
        details: int | None = None,
        halo: int | None = None,
        blur: int | None = None,
        compression: int | None = None,
        stabilize: bool = False,
        interpolate: bool = False,
        custom_filters: str | None = None,
        device: int = 0,
        output: str | None = None,
        **kwargs,
    ) -> bool:
        """
        Process videos with Video AI.

        Args:
            input_path: Input video file path
            model: AI model to use
            scale: Upscale factor (1-4)
            fps: Target frame rate for interpolation
            codec: Video codec (hevc_videotoolbox, hevc_nvenc, etc.)
            quality: Video quality/CRF value (1-51)
            denoise: Denoise strength (0-100)
            details: Detail enhancement (-100 to 100)
            halo: Halo reduction (0-100)
            blur: Blur reduction (0-100)
            compression: Compression artifact reduction (0-100)
            stabilize: Enable stabilization
            interpolate: Enable frame interpolation
            custom_filters: Custom FFmpeg filters
            device: GPU device index (-1 for CPU)
            output: Output file path
            **kwargs: Additional parameters

        Returns:
            True if successful, False otherwise

        """
        try:
            logger.info(f"Processing {input_path} with Video AI")

            result = self.video_ai.process(
                input_path=input_path,
                output_path=output,
                model=model,
                scale=scale,
                fps=fps,
                codec=codec,
                quality=quality,
                denoise=denoise,
                details=details,
                halo=halo,
                blur=blur,
                compression=compression,
                stabilize=stabilize,
                interpolate=interpolate,
                custom_filters=custom_filters,
                device=device,
                **kwargs,
            )

            return result.success

        except Exception as e:
            logger.error(f"Video AI processing failed: {e}")
            return False

    def photo(
        self,
        input_path: str,
        autopilot_preset: str = "auto",
        format: str = "preserve",
        quality: int = 95,
        compression: int = 6,
        bit_depth: int = 8,
        tiff_compression: str = "lzw",
        show_settings: bool = False,
        skip_processing: bool = False,
        override_autopilot: bool = False,
        upscale: bool | None = None,
        noise: bool | None = None,
        sharpen: bool | None = None,
        lighting: bool | None = None,
        color: bool | None = None,
        output: str | None = None,
        **kwargs,
    ) -> bool:
        """
        Process photos with Photo AI.

        Args:
            input_path: Input file or directory path
            autopilot_preset: Autopilot preset to use
            format: Output format (preserve, jpg, png, tiff, dng)
            quality: JPEG quality (0-100)
            compression: PNG compression (0-10)
            bit_depth: TIFF bit depth (8 or 16)
            tiff_compression: TIFF compression (none, lzw, zip)
            show_settings: Show processing settings only
            skip_processing: Skip actual processing
            override_autopilot: Override autopilot with manual settings
            upscale: Enable/disable upscaling
            noise: Enable/disable noise reduction
            sharpen: Enable/disable sharpening
            lighting: Enable/disable lighting enhancement
            color: Enable/disable color enhancement
            output: Output path
            **kwargs: Additional parameters

        Returns:
            True if successful, False otherwise

        """
        try:
            logger.info(f"Processing {input_path} with Photo AI")

            input_path_obj = Path(input_path)
            output_path_obj = Path(output) if output else None

            # Handle batch processing for directories
            if input_path_obj.is_dir():
                if not output_path_obj:
                    output_path_obj = input_path_obj.parent / f"{input_path_obj.name}_processed"

                results = self.photo_ai.process_batch_directory(
                    input_dir=input_path_obj,
                    output_dir=output_path_obj,
                    autopilot_preset=autopilot_preset,
                    format=format,
                    quality=quality,
                    compression=compression,
                    bit_depth=bit_depth,
                    tiff_compression=tiff_compression,
                    show_settings=show_settings,
                    skip_processing=skip_processing,
                    override_autopilot=override_autopilot,
                    upscale=upscale,
                    noise=noise,
                    sharpen=sharpen,
                    lighting=lighting,
                    color=color,
                    **kwargs,
                )

                # Return True if all batches succeeded
                return all(result.get("success", False) for result in results)

            # Single file processing
            result = self.photo_ai.process(
                input_path=input_path,
                output_path=output,
                autopilot_preset=autopilot_preset,
                format=format,
                quality=quality,
                compression=compression,
                bit_depth=bit_depth,
                tiff_compression=tiff_compression,
                show_settings=show_settings,
                skip_processing=skip_processing,
                override_autopilot=override_autopilot,
                upscale=upscale,
                noise=noise,
                sharpen=sharpen,
                lighting=lighting,
                color=color,
                **kwargs,
            )

            return result.success

        except Exception as e:
            logger.error(f"Photo AI processing failed: {e}")
            return False

    def system_info(self) -> dict[str, Any]:
        """
        Get comprehensive system information.

        Returns:
            Dictionary with system information

        """
        try:
            return {
                "environment": self.env_validator.get_system_info(),
                "gpu": self.gpu_manager.get_status().to_dict(),
                "memory": self.memory_manager.get_status(),
                "products": {
                    "gigapixel": self.gigapixel.get_info(),
                    "video_ai": self.video_ai.get_info(),
                    "photo_ai": self.photo_ai.get_info(),
                },
                "executor": self.executor.get_info(),
            }
        except Exception as e:
            logger.error(f"Failed to get system info: {e}")
            return {"error": str(e)}

    def validate_environment(self) -> bool:
        """
        Validate system environment and requirements.

        Returns:
            True if environment is valid

        """
        try:
            validation_results = self.env_validator.validate_all(raise_on_error=False)

            for check, result in validation_results.items():
                if result:
                    logger.info(f"✓ {check} validation passed")
                else:
                    logger.warning(f"✗ {check} validation failed")

            return all(validation_results.values())

        except Exception as e:
            logger.error(f"Environment validation failed: {e}")
            return False

    def get_optimal_batch_size(self, product: str, file_count: int) -> int:
        """
        Get optimal batch size for processing.

        Args:
            product: Product name (gigapixel, video_ai, photo_ai)
            file_count: Number of files to process

        Returns:
            Optimal batch size

        """
        try:
            return self.memory_manager.get_optimal_batch_size(file_count, product)
        except Exception as e:
            logger.error(f"Failed to calculate batch size: {e}")
            return 1

    def version_info(self) -> dict[str, str]:
        """
        Get version information for all components.

        Returns:
            Dictionary with version information

        """
        try:
            from topyaz import __version__

            return {
                "topyaz": __version__,
                "gigapixel": self.gigapixel.get_version() or "unknown",
                "video_ai": self.video_ai.get_version() or "unknown",
                "photo_ai": self.photo_ai.get_version() or "unknown",
            }
        except Exception as e:
            logger.error(f"Failed to get version info: {e}")
            return {"error": str(e)}


def main():
    """Main entry point for the CLI."""
    fire.Fire(TopyazCLI)


if __name__ == "__main__":
    main()
</file>

<file path="tests/test_refactoring.py">
#!/usr/bin/env python3
# this_file: tests/test_refactoring.py
"""
Basic tests to verify the refactoring works correctly.

This module contains tests to ensure the new modular architecture
maintains backward compatibility and functions correctly.
"""

from pathlib import Path
from unittest.mock import Mock, patch

import pytest

from topyaz.cli import TopyazCLI
from topyaz.core.errors import ValidationError
from topyaz.core.types import ProcessingOptions
from topyaz.execution.local import LocalExecutor
from topyaz.products.gigapixel import GigapixelAI
from topyaz.products.photo_ai import PhotoAI
from topyaz.products.video_ai import VideoAI


class TestRefactoringBasics:
    """Test basic functionality of the refactored components."""

    def test_topyaz_wrapper_initialization(self):
        """Test that TopyazCLI initializes correctly."""
        wrapper = TopyazCLI(verbose=False, dry_run=True)

        assert wrapper.options.verbose is False
        assert wrapper.options.dry_run is True
        assert wrapper.executor is not None
        assert isinstance(wrapper.executor, LocalExecutor)

    def test_lazy_loading_products(self):
        """Test that products are lazy-loaded correctly."""
        wrapper = TopyazCLI(verbose=False, dry_run=True)

        # Products should be None initially
        assert wrapper._gigapixel is None
        assert wrapper._video_ai is None
        assert wrapper._photo_ai is None

        # Accessing properties should create instances
        gp = wrapper.gigapixel
        video = wrapper.video_ai
        photo = wrapper.photo_ai

        assert isinstance(gp, GigapixelAI)
        assert isinstance(video, VideoAI)
        assert isinstance(photo, PhotoAI)

        # Should return same instances on subsequent access
        assert wrapper.gigapixel is gp
        assert wrapper.video_ai is video
        assert wrapper.photo_ai is photo

    def test_product_initialization(self):
        """Test that individual products initialize correctly."""
        executor = Mock()
        options = ProcessingOptions(verbose=True, dry_run=True)

        gp = GigapixelAI(executor, options)
        video = VideoAI(executor, options)
        photo = PhotoAI(executor, options)

        assert gp.product_name == "Topaz Gigapixel AI"
        assert video.product_name == "Topaz Video AI"
        assert photo.product_name == "Topaz Photo AI"

        assert gp.executable_name == "gigapixel"
        assert video.executable_name == "ffmpeg"
        assert photo.executable_name == "tpai"

    def test_gigapixel_parameter_validation(self):
        """Test Gigapixel AI parameter validation."""
        executor = Mock()
        options = ProcessingOptions()
        gp = GigapixelAI(executor, options)

        # Valid parameters should pass
        gp.validate_params(model="std", scale=2, denoise=50)

        # Invalid model should raise error
        with pytest.raises(ValidationError, match="Invalid model"):
            gp.validate_params(model="invalid_model")

        # Invalid scale should raise error
        with pytest.raises(ValidationError, match="Scale must be between 1 and 6"):
            gp.validate_params(scale=10)

        # Invalid denoise should raise error
        with pytest.raises(ValidationError, match="denoise must be between 1 and 100"):
            gp.validate_params(denoise=150)

    def test_video_ai_parameter_validation(self):
        """Test Video AI parameter validation."""
        executor = Mock()
        options = ProcessingOptions()
        video = VideoAI(executor, options)

        # Valid parameters should pass
        video.validate_params(model="amq-13", scale=2, quality=18)

        # Invalid model should raise error
        with pytest.raises(ValidationError, match="Invalid model"):
            video.validate_params(model="invalid_model")

        # Invalid scale should raise error
        with pytest.raises(ValidationError, match="Scale must be between 1 and 4"):
            video.validate_params(scale=5)

        # Invalid quality should raise error
        with pytest.raises(ValidationError, match="Quality must be between 1 and 51"):
            video.validate_params(quality=100)

    def test_photo_ai_parameter_validation(self):
        """Test Photo AI parameter validation."""
        executor = Mock()
        options = ProcessingOptions()
        photo = PhotoAI(executor, options)

        # Valid parameters should pass
        photo.validate_params(format="jpg", quality=95, compression=6)

        # Invalid format should raise error
        with pytest.raises(ValidationError, match="Invalid format"):
            photo.validate_params(format="invalid_format")

        # Invalid quality should raise error
        with pytest.raises(ValidationError, match="Quality must be between 0 and 100"):
            photo.validate_params(quality=150)

        # Invalid bit depth should raise error
        with pytest.raises(ValidationError, match="Bit depth must be 8 or 16"):
            photo.validate_params(bit_depth=32)

    @patch("topyaz.products.gigapixel.GigapixelAI.get_executable_path")
    @patch("topyaz.execution.local.LocalExecutor.execute")
    def test_dry_run_mode(self, mock_execute, mock_executable):
        """Test that dry run mode works correctly."""
        mock_executable.return_value = Path("/fake/gigapixel")
        mock_execute.return_value = (0, "dry-run-output", "")

        wrapper = TopyazCLI(verbose=False, dry_run=True)

        # Should succeed without actually executing
        result = wrapper.gp("test_input.jpg", output="test_output.jpg")

        assert result is True
        # Should not have called the real executor
        mock_execute.assert_called_once()
        call_args = mock_execute.call_args
        assert "dry-run" in str(call_args).lower() or wrapper.options.dry_run

    def test_supported_formats(self):
        """Test that products report correct supported formats."""
        executor = Mock()
        options = ProcessingOptions()

        gp = GigapixelAI(executor, options)
        video = VideoAI(executor, options)
        photo = PhotoAI(executor, options)

        # Check that common formats are supported
        assert "jpg" in gp.supported_formats
        assert "png" in gp.supported_formats
        assert "tiff" in gp.supported_formats

        assert "mp4" in video.supported_formats
        assert "mov" in video.supported_formats
        assert "avi" in video.supported_formats

        assert "jpg" in photo.supported_formats
        assert "png" in photo.supported_formats
        assert "dng" in photo.supported_formats

    def test_command_building(self):
        """Test that command building works correctly."""
        executor = Mock()
        options = ProcessingOptions(verbose=True)

        with patch("topyaz.products.gigapixel.GigapixelAI.get_executable_path") as mock_path:
            mock_path.return_value = Path("/fake/gigapixel")

            gp = GigapixelAI(executor, options)
            cmd = gp.build_command(Path("input.jpg"), Path("output.jpg"), model="std", scale=2, denoise=50)

            # Check that command contains expected elements
            cmd_str = " ".join(cmd)
            assert "/fake/gigapixel" in cmd_str
            assert "--cli" in cmd_str
            assert "-i" in cmd_str
            assert "input.jpg" in cmd_str
            assert "-o" in cmd_str
            assert "output.jpg" in cmd_str
            assert "-m" in cmd_str
            assert "std" in cmd_str
            assert "--scale" in cmd_str
            assert "2" in cmd_str
            assert "--denoise" in cmd_str
            assert "50" in cmd_str

    def test_backward_compatibility(self):
        """Test that the new CLI maintains backward compatibility."""
        wrapper = TopyazCLI(verbose=False, dry_run=True)

        # These method signatures should match the original
        assert hasattr(wrapper, "gp")
        assert hasattr(wrapper, "video")
        assert hasattr(wrapper, "photo")
        assert hasattr(wrapper, "system_info")

        # Methods should be callable
        assert callable(wrapper.gp)
        assert callable(wrapper.video)
        assert callable(wrapper.photo)
        assert callable(wrapper.system_info)
</file>

<file path=".cursorindexingignore">
# Don't index SpecStory auto-save files, but allow explicit context inclusion via @ references
.specstory/**
</file>

<file path=".pre-commit-config.yaml">
repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.3.4
    hooks:
      - id: ruff
        args: [--fix]
      - id: ruff-format
        args: [--respect-gitignore]
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: check-yaml
      - id: check-toml
      - id: check-added-large-files
      - id: debug-statements
      - id: check-case-conflict
      - id: mixed-line-ending
        args: [--fix=lf]
</file>

<file path="CHANGELOG.md">
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased] - Phase 1 Refactoring Complete ✅ - 2025-06-08

### Added - Phase 1 Complete Refactoring (18/18 Modules)

**Major Achievement**: Successfully refactored monolithic `topyaz.py` (1750+ lines) into a clean, modular architecture with 18+ focused modules.

#### ✅ **Phase 1a: Core Infrastructure** (4/4 COMPLETED)

- `core/errors.py`: Custom exception hierarchy with 6 error types (TopazError, AuthenticationError, EnvironmentError, ProcessingError, RemoteExecutionError, ValidationError)
- `core/types.py`: Comprehensive type definitions with dataclasses, enums (Product, LogLevel), and type aliases using Python 3.10+ union syntax
- `core/config.py`: YAML configuration management with environment variable support and dot notation access
- `utils/logging.py`: Professional logging with loguru integration, file rotation, and multiple handlers

#### ✅ **Phase 1b: System Components** (4/4 COMPLETED)

- `system/environment.py`: Environment validation for macOS versions, memory (16GB+), and disk space (80GB+)
- `system/gpu.py`: Multi-platform GPU detection (NVIDIA, AMD, Intel, Apple Metal) with utilization monitoring
- `system/memory.py`: Intelligent memory management with batch size optimization for different operations
- `system/paths.py`: Robust path validation with permission checks and cross-platform compatibility

#### ✅ **Phase 1c: Execution Layer** (4/4 COMPLETED)

- `execution/base.py`: Abstract interfaces with CommandExecutor and ProgressAwareExecutor base classes
- `execution/local.py`: Local command execution with real-time progress monitoring and subprocess management
- `execution/remote.py`: SSH remote execution with paramiko, connection pooling, and SFTP file transfer
- `execution/progress.py`: Rich progress monitoring with console, logging, and silent callback modes

#### ✅ **Phase 1d: Product Implementations** (4/4 COMPLETED)

- `products/base.py`: Abstract product interfaces with TopazProduct and MacOSTopazProduct base classes
- `products/gigapixel.py`: Gigapixel AI implementation with Pro license validation and all CLI parameters
- `products/video_ai.py`: Video AI implementation with FFmpeg integration and environment variable setup
- `products/photo_ai.py`: Photo AI implementation with intelligent 450-image batch limit handling

#### ✅ **Phase 1e: Integration** (2/2 COMPLETED)

- `cli.py`: Simplified TopyazCLI class with dependency injection and component delegation
- Entry points: Updated `__main__.py` and `__init__.py` with backward compatibility and proper exports

#### ✅ **Phase 1f: Testing & Validation** (2/2 COMPLETED)

- `tests/test_refactoring.py`: Comprehensive test suite validating all new modules
- Backward compatibility: Full CLI interface compatibility maintained with original topyaz.py behavior

### Architectural Benefits Achieved

- **Modularity**: 18+ focused modules following Single Responsibility Principle
- **Type Safety**: Comprehensive type hints throughout with mypy compatibility
- **Testability**: Injectable dependencies and abstract interfaces enable unit testing
- **Maintainability**: Clear module structure with excellent code discoverability
- **Extensibility**: Abstract base classes enable easy addition of new products
- **Performance**: Memory-aware batch processing and GPU utilization optimization
- **Configuration**: Flexible YAML configuration with environment variable override
- **Error Handling**: Structured exception hierarchy with informative error messages
- **Remote Execution**: Production-ready SSH execution with connection management
- **Progress Monitoring**: Beautiful console progress bars and configurable logging

## [0.1.0-dev3] - 2024-12-10

### Fixed

- **Critical Issue #1**: Fixed Gigapixel AI executable not found error

  - Updated `_find_executable` function with correct macOS application paths
  - Gigapixel AI now correctly found at `/Applications/Topaz Gigapixel AI.app/Contents/Resources/bin/gigapixel`
  - Photo AI now correctly found at `/Applications/Topaz Photo AI.app/Contents/Resources/bin/tpai`
  - Video AI now correctly found at `/Applications/Topaz Video AI.app/Contents/MacOS/ffmpeg`

- **Critical Issue #2**: Fixed Photo AI "Invalid argument" error (return code 253)

  - Corrected boolean parameter formatting for Photo AI CLI
  - When enabling features: pass just the flag (e.g., `--upscale`)
  - When disabling features: pass flag with `enabled=false` (e.g., `--upscale enabled=false`)

- **Critical Issue #3**: Improved Video AI authentication validation
  - Enhanced `_validate_video_ai_auth` function to check multiple auth file locations
  - Added correct auth file path: `/Applications/Topaz Video AI.app/Contents/Resources/models/auth.tpz`
  - Improved logging levels (debug vs warning vs info) for better user experience
  - Authentication validation now continues processing even if auth files not found (normal for GUI login)
  - Only warns if auth files exist but are invalid

### Changed

- Updated executable path detection logic for all three Topaz products on macOS
- Improved error handling and user feedback throughout the codebase
- Enhanced authentication validation to be more robust and user-friendly

### Technical

- Cleaned up import statements and code formatting using ruff and autoflake
- Fixed various linter warnings and code style issues
- Maintained backward compatibility while improving functionality

All three critical issues identified in the TODO list have been resolved. The CLI should now work correctly with properly installed Topaz applications on macOS.

## [0.1.0-dev2] - 2024-12-09

### Added

- Initial implementation of unified CLI wrapper for Topaz Labs products
- Support for Gigapixel AI, Photo AI, and Video AI processing
- SSH remote execution capabilities
- Progress monitoring and error recovery mechanisms
- Comprehensive logging with loguru
- CLI interface using Python Fire

### Documentation

- Extensive specification document (SPEC.md)
- Detailed README with installation and usage instructions
- TODO roadmap for future development

### Architecture

- Unified `TopyazCLI` class design
- Modular approach for different Topaz products
- Environment validation and setup
- GPU monitoring and resource management
</file>

<file path="cleanup.sh">
#!/usr/bin/env bash

python -m uzpy run -e src
fd -e py -x autoflake {}
fd -e py -x pyupgrade --py311-plus {}
fd -e py -x ruff check --output-format=github --fix --unsafe-fixes {}
fd -e py -x ruff format --respect-gitignore --target-version py311 {}
repomix -i varia,.specstory,AGENT.md,CLAUDE.md,PLAN.md,llms.txt,.cursorrules -o llms.txt .
python -m pytest
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Adam Twardoch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="package.toml">
# Package configuration
[package]
include_cli = true        # Include CLI boilerplate
include_logging = true    # Include logging setup
use_pydantic = true      # Use Pydantic for data validation
use_rich = true          # Use Rich for terminal output

[features]
mkdocs = false           # Enable MkDocs documentation
vcs = true              # Initialize Git repository
github_actions = true   # Add GitHub Actions workflows
</file>

<file path="PLAN.md">
# Plan for refactoring 

## Preliminary analysis

### **High-Level Refactoring Goals**

1.  **Simplify & De-clutter:** Remove non-essential "fluff" like complex logging, progress bars, and detailed system monitoring to focus on the core task of processing files.
2.  **Consolidate & Reduce Duplication:** Centralize common logic from the individual `products` modules into the `products/base.py` abstract class using the Template Method pattern.
3.  **Isolate Complex Subsystems:** Decouple the complex macOS `.plist` manipulation for Photo AI into a dedicated, self-contained component to improve clarity and testability.
4.  **Enhance Clarity & Robustness:** Improve input validation and error handling to make the application more resilient and predictable.

---

### **Phase 1: Simplification and Fluff Removal**

This phase focuses on removing components that add complexity without being essential to the core processing workflow.

#### **Step 1.1: Remove Obsolete Monolithic File**
The file `src/topyaz/topyaz.py` is the old monolithic version and is no longer used by the modular architecture. It must be removed.

*   **Action:** Delete the file `src/topyaz/topyaz.py`.
*   **Action:** Delete the test file `tests/test_package.py`, as it primarily tests the old monolithic structure and imports. A new, focused test suite will be built around the modular components.

#### **Step 1.2: Simplify Logging Subsystem**
The current logging in `src/topyaz/utils/logging.py` is overly complex with multiple formatters and a manager class. This will be simplified to a single setup function.

*   **In `src/topyaz/utils/logging.py`:**
    1.  Remove the `LoggingManager` and `ProgressLogger` classes.
    2.  Replace the entire file content with a simplified version:

        ```python
        # src/topyaz/utils/logging.py
        import sys
        from loguru import logger

        def setup_logging(verbose: bool = True):
            """
            Configure logging for topyaz.
            """
            logger.remove()
            log_level = "DEBUG" if verbose else "INFO"
            log_format = (
                "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
                "<level>{level: <8}</level> | "
                "<cyan>{name}:{function}:{line}</cyan> - <level>{message}</level>"
            )
            logger.add(sys.stderr, format=log_format, level=log_level, colorize=True)
            logger.info(f"Logging configured at {log_level} level.")

        # Re-export logger for convenience
        __all__ = ["logger", "setup_logging"]
        ```

*   **In `src/topyaz/cli.py`:**
    1.  Remove the import: `from topyaz.utils.logging import LoggingManager`.
    2.  Add the new import: `from topyaz.utils.logging import setup_logging`.
    3.  In the `TopyazCLI.__init__` method, replace the `self.logging_manager` block:
        *   **Remove:**
            ```python
            self.logging_manager = LoggingManager()
            self.logging_manager.setup(verbose=verbose)
            ```
        *   **Add:**
            ```python
            setup_logging(verbose=verbose)
            ```

#### **Step 1.3: Remove Complex Progress Reporting**
The real-time progress parsing and rich progress bars add significant complexity. We will simplify this to just stream the command's raw output when in verbose mode.

*   **Action:** Delete the file `src/topyaz/execution/progress.py`.
*   **In `src/topyaz/execution/base.py`:**
    1.  Remove the `ProgressCallback` and `ProgressAwareExecutor` classes.
    2.  The `CommandExecutor` class should be the only executor base class. Remove the `supports_progress` method from it.
*   **In `src/topyaz/execution/local.py`:**
    1.  The `LocalExecutor` should inherit directly from `CommandExecutor`, not `ProgressAwareExecutor`.
    2.  Remove the `execute_with_progress` method and its helper `_extract_progress`.
    3.  Remove the `SimpleProgressCallback` and `QuietProgressCallback` classes.
*   **In `src/topyaz/products/base.py`:**
    1.  Modify the `TopazProduct.process` method. It should call `self.executor.execute(...)` directly. The logic for progress reporting will be removed. The `stdout` and `stderr` from the execution result will be logged for debugging.

---

### **Phase 2: Consolidate Product Processing Logic**

This phase will centralize the file processing workflow (temp directory creation, execution, file moving) into the base product class.

#### **Step 2.1: Implement Template Method in `TopazProduct`**
The `process` methods in `gigapixel.py` and `photo_ai.py` are very similar. This logic will be moved to `products/base.py`.

*   **In `src/topyaz/products/base.py` (`TopazProduct` class):**
    1.  Make the existing `process` method non-abstract and implement the full workflow logic there. It will be the "template method."
    2.  This new `process` method will handle:
        *   Input and parameter validation.
        *   Creating a temporary directory for output.
        *   Calling `self.build_command(...)` to get the command.
        *   Executing the command.
        *   Calling a *new* abstract method `_find_output_file(self, temp_dir: Path, input_path: Path) -> Path` to locate the generated file in the temporary directory.
        *   Moving the found file to its final destination.
        *   Returning a `ProcessingResult`.
    3.  Define the new abstract method:
        ```python
        from abc import abstractmethod
        from pathlib import Path

        @abstractmethod
        def _find_output_file(self, temp_dir: Path, input_path: Path) -> Path:
            """
            Find the generated output file within a temporary directory.
            This must be implemented by subclasses that use the temp dir workflow.
            """
            pass
        ```

*   **In `src/topyaz/products/gigapixel.py` (`GigapixelAI` class):**
    1.  Remove the `process` method entirely. The base class implementation will be used.
    2.  Implement the `_find_output_file` method. This method will contain the logic to glob the temp directory for the expected output file (e.g., `*.jpg`, `*.png`).
    3.  The `build_command` method needs a slight adjustment: its `output_path` parameter should now be named `temp_output_dir` to reflect that it's writing to a temporary location.

*   **In `src/topyaz/products/photo_ai.py` (`PhotoAI` class):**
    1.  Follow the same steps as for `GigapixelAI`: remove `process`, implement `_find_output_file`, and adjust `build_command`.
    2.  The `_find_output_file` implementation will contain the logic to find filenames like `original-stem-tpai.ext`.

*   **In `src/topyaz/products/video_ai.py` (`VideoAI` class):**
    1.  `VideoAI` does not use a temporary directory; it writes directly to the final output file.
    2.  Therefore, `VideoAI` will **override** the base `process` method with its current, direct-writing implementation. It will not need to implement `_find_output_file`.

---

### **Phase 3: Isolate and Refine Photo AI Preferences**

The logic for manipulating Photo AI's `.plist` file is a major source of complexity and should be isolated.

#### **Step 3.1: Create a Dedicated Preferences Context Manager**
This will encapsulate the backup/update/restore workflow.

*   **Action:** No new file is needed, the existing `src/topyaz/system/photo_ai_prefs.py` is well-placed. The key is to refine its *usage*.
*   **In `src/topyaz/system/preferences.py` (`PreferenceHandler` class):**
    1.  Ensure the `__enter__` and `__exit__` methods are robust. `__enter__` should perform the backup and `__exit__` should perform the restore. This makes it a true context manager.
        ```python
        # In src/topyaz/system/preferences.py
        
        def __enter__(self):
            """Context manager entry."""
            self._backup_id_for_context = self.backup() # Store the backup_id
            return self
        
        def __exit__(self, exc_type, exc_val, exc_tb):
            """Context manager exit - restore from backup."""
            if hasattr(self, '_backup_id_for_context'):
                self.restore(self._backup_id_for_context)
            self.cleanup_all_backups()
        ```

*   **In `src/topyaz/products/photo_ai.py` (`PhotoAI` class):**
    1.  Refactor the `process` method (which, after Phase 2, is now `_process_with_preferences`).
    2.  The logic for checking `if autopilot_params:` and then calling the preferences handler should be clean and use a `with` statement.

        ```python
        # In src/topyaz/products/photo_ai.py
        
        def _process_with_preferences(self, input_path: Path, final_output_path: Path, **kwargs) -> ProcessingResult:
            """Processes image using the preferences context manager."""
            from topyaz.system.photo_ai_prefs import PhotoAIPreferences, PhotoAIAutopilotSettings
            
            try:
                # Build settings from kwargs
                autopilot_settings = self._build_autopilot_settings(**kwargs)

                # Use the handler as a context manager
                with PhotoAIPreferences() as prefs:
                    prefs.update_autopilot_settings(autopilot_settings)
                    logger.info("Temporarily applied enhanced autopilot settings.")
                    
                    # The actual processing happens here
                    result = self._process_standard(input_path, final_output_path, **kwargs)

                # The __exit__ method of PhotoAIPreferences will automatically restore settings
                logger.info("Original Photo AI preferences have been restored.")
                return result

            except ImportError:
                logger.warning("Photo AI preferences system not available, falling back to standard processing.")
                return self._process_standard(input_path, final_output_path, **kwargs)
            except Exception as e:
                logger.error(f"Error during preferences-based processing: {e}")
                # Fallback to standard processing to ensure functionality
                return self._process_standard(input_path, final_output_path, **kwargs)
        ```
    This change makes the workflow explicit and guarantees restoration even if processing fails.

---

### **Phase 4: Enhance Robustness and Final Cleanup**

This phase focuses on improving validation and ensuring the CLI is clean and robust.

#### **Step 4.1: Strengthen Input Validation**
Move file extension validation to the centralized `PathValidator` to ensure it's checked early and consistently.

*   **In `src/topyaz/system/paths.py` (`PathValidator` class):**
    1.  The `validate_input_path` method already has a `file_type: Product | None = None` parameter. Ensure this is used effectively.
    2.  The implementation should be:
        ```python
        # In src/topyaz/system/paths.py
        if path_obj.is_file() and file_type:
            ext = path_obj.suffix.lower()
            supported_extensions = self.IMAGE_EXTENSIONS.get(file_type, set())
            if file_type == Product.VIDEO_AI:
                supported_extensions = self.VIDEO_EXTENSIONS

            if ext not in supported_extensions:
                msg = f"Unsupported file type '{ext}' for {file_type.value}."
                raise ValidationError(msg)
        ```
*   **In `src/topyaz/products/base.py` (`TopazProduct` class):**
    1.  The `validate_input_path` method can now be simplified to just call `self.path_validator.validate_input_path(input_path, file_type=self.product_type)`.
    2.  Remove the `supported_formats` property from the subclasses, as this logic is now centralized in `PathValidator`.

#### **Step 4.2: Final Review of CLI**
Ensure the main `cli.py` is clean and delegates responsibility correctly.

*   **In `src/topyaz/cli.py`:**
    1.  The `__init__` is already well-structured by grouping options into `ProcessingOptions` and `RemoteOptions`. This is good, no major change needed here.
    2.  The product-specific methods (`gp`, `video`, `photo`) correctly gather parameters and pass them to the product's `process` method. This delegation is the correct pattern.
    3.  **Action:** Remove the `system_info`, `validate_environment`, and `get_optimal_batch_size` methods. These are diagnostic/optimization features, not core processing, and add to the "fluff." This aligns with the goal of a lean, focused tool. If desired, they can be added back later under a separate `topyaz diagnose` command.

## Task: 

Based on the above analysis, analyze the codebase of `topyaz`. 

Prepare a refactoring plan that will: 

- remove fluff: keep only code that's relevant to the core functionality, remove "decorational" code like custom fancy logging etc. 
- reduce the cognitive load
- itemize the code so that the functions, classes, modules are focused on a single task, and are well-structured
- ensure that the actual core functionality remains and does not break
- ensure that the code fails gracefully on files that don't comply
- ensure that the code that can be shared is shared

Make the plan very very specific, like a detailed spec for a junior dev who will actually perform the refactoring.
</file>

<file path=".cursorrules">
# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


The topyaz project implements a unified command-line interface for Topaz Labs' AI products, focusing on three key business domains:

### Product Integration (Importance: 95)
Core business logic integrating Topaz Labs' AI products:
- Video AI processing capabilities in `topyaz/products/video_ai.py`
- Gigapixel AI upscaling features in `topyaz/products/gigapixel_ai.py`  
- Photo AI enhancement tools in `topyaz/products/photo_ai.py`

### Remote Processing Architecture (Importance: 85)
Remote execution system enabling distributed processing:
- SSH-based remote task execution in `topyaz/execution/remote.py`
- Secure file transfer protocols for media processing
- Hardware optimization detection for Apple Silicon/Intel systems

### Batch Processing Engine (Importance: 80) 
Intelligent batch operations management:
- Progress monitoring with ETA calculations
- Error handling and recovery mechanisms
- Model-specific processing parameter management

### License and Security (Importance: 75)
Business policy enforcement:
- Pro license verification for Gigapixel AI features
- SSH key-based authentication
- Command injection prevention
- System requirement validation

### Configuration Management (Importance: 70)
Domain-specific settings control:
- YAML-based configuration system
- Remote host configurations
- Product-specific default parameters
- Community tool integration settings

The project focuses on abstracting complex AI processing workflows into a unified interface while maintaining security and performance optimization across distributed systems.

$END$
</file>

<file path=".gitignore">
_private/
resources/
*_autogen/
.DS_Store
__version__.py
__pycache__/
_Chutzpah*
_deps
_NCrunch_*
_pkginfo.txt
_Pvt_Extensions
_ReSharper*/
_TeamCity*
_UpgradeReport_Files/
!?*.[Cc]ache/
!.axoCover/settings.json
!.vscode/extensions.json
!.vscode/launch.json
!.vscode/settings.json
!.vscode/tasks.json
!**/[Pp]ackages/build/
!Directory.Build.rsp
.*crunch*.local.xml
.axoCover/*
.builds
.cr/personal
.fake/
.history/
.ionide/
.localhistory/
.mfractor/
.ntvs_analysis.dat
.paket/paket.exe
.sass-cache/
.vs/
.vscode
.vscode/*
.vshistory/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
[Bb]in/
[Bb]uild[Ll]og.*
[Dd]ebug/
[Dd]ebugPS/
[Dd]ebugPublic/
[Ee]xpress/
[Ll]og/
[Ll]ogs/
[Oo]bj/
[Rr]elease/
[Rr]eleasePS/
[Rr]eleases/
[Tt]est[Rr]esult*/
[Ww][Ii][Nn]32/
*_h.h
*_i.c
*_p.c
*_wpftmp.csproj
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl
*- [Bb]ackup.rdl
*.[Cc]ache
*.[Pp]ublish.xml
*.[Rr]e[Ss]harper
*.a
*.app
*.appx
*.appxbundle
*.appxupload
*.aps
*.azurePubxml
*.bim_*.settings
*.bim.layout
*.binlog
*.btm.cs
*.btp.cs
*.build.csdef
*.cab
*.cachefile
*.code-workspace
*.coverage
*.coveragexml
*.d
*.dbmdl
*.dbproj.schemaview
*.dll
*.dotCover
*.DotSettings.user
*.dsp
*.dsw
*.dylib
*.e2e
*.exe
*.gch
*.GhostDoc.xml
*.gpState
*.ilk
*.iobj
*.ipdb
*.jfm
*.jmconfig
*.la
*.lai
*.ldf
*.lib
*.lo
*.log
*.mdf
*.meta
*.mm.*
*.mod
*.msi
*.msix
*.msm
*.msp
*.ncb
*.ndf
*.nuget.props
*.nuget.targets
*.nupkg
*.nvuser
*.o
*.obj
*.odx.cs
*.opendb
*.opensdf
*.opt
*.out
*.pch
*.pdb
*.pfx
*.pgc
*.pgd
*.pidb
*.plg
*.psess
*.publishproj
*.publishsettings
*.pubxml
*.pyc
*.rdl.data
*.rptproj.bak
*.rptproj.rsuser
*.rsp
*.rsuser
*.sap
*.sbr
*.scc
*.sdf
*.sln.docstates
*.sln.iml
*.slo
*.smod
*.snupkg
*.so
*.suo
*.svclog
*.tlb
*.tlh
*.tli
*.tlog
*.tmp
*.tmp_proj
*.tss
*.user
*.userosscache
*.userprefs
*.vbp
*.vbw
*.VC.db
*.VC.VC.opendb
*.VisualState.xml
*.vsp
*.vspscc
*.vspx
*.vssscc
*.xsd.cs
**/[Pp]ackages/*
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.HTMLClient/GeneratedArtifacts
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
*~
~$*
$tf/
AppPackages/
artifacts/
ASALocalRun/
AutoTest.Net/
Backup*/
BenchmarkDotNet.Artifacts/
bld/
BundleArtifacts/
ClientBin/
cmake_install.cmake
CMakeCache.txt
CMakeFiles
CMakeLists.txt.user
CMakeScripts
CMakeUserPresets.json
compile_commands.json
coverage*.info
coverage*.json
coverage*.xml
csx/
CTestTestfile.cmake
dlldata.c
DocProject/buildhelp/
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/*.HxC
DocProject/Help/*.HxT
DocProject/Help/html
DocProject/Help/Html2
ecf/
FakesAssemblies/
FodyWeavers.xsd
Generated_Code/
Generated\ Files/
healthchecksdb
install_manifest.txt
ipch/
Makefile
MigrationBackup/
mono_crash.*
nCrunchTemp_*
node_modules/
nunit-*.xml
OpenCover/
orleans.codegen.cs
Package.StoreAssociation.xml
paket-files/
project.fragment.lock.json
project.lock.json
publish/
PublishScripts/
rcf/
ScaffoldingReadMe.txt
ServiceFabricBackup/
StyleCopReport.xml
Testing
TestResult.xml
UpgradeLog*.htm
UpgradeLog*.XML
x64/
x86/
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Distribution / packaging
!dist/.gitkeep

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
.ruff_cache/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.idea/
.vscode/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
__version__.py
_private
VERSION.txt
</file>

<file path="AGENT.md">
## TLDR: topyaz Project

**topyaz** is a Python CLI wrapper that unifies Topaz Labs' three AI products (Video AI, Gigapixel AI, Photo AI) into a single command-line interface for professional batch processing workflows.

**🎯 Core Purpose:**
- Single CLI tool for all Topaz products instead of using separate GUIs
- Enable remote processing via SSH on powerful machines
- Batch operations with progress monitoring and error recovery

**📋 Requirements:**
- macOS 11+ (Topaz products are Mac-focused)
- Gigapixel AI Pro license ($499/year) for CLI access
- 16GB+ RAM, 80GB+ storage for models

**🚧 Current Status:**
- **Planning Stage**: Extensive specification (SPEC.md) and documentation written
- **Implementation**: Minimal skeleton code - most features in TODO.md are unimplemented
- **Architecture**: Designed around unified `TopyazCLI` class using Python Fire for CLI generation

**💡 Key Value:**
- ~2x faster than GUI for batch operations
- Remote execution on GPU servers
- Unified interface across Video AI (upscaling), Gigapixel AI (image enhancement), Photo AI (auto-enhancement)
- Production-ready error handling and recovery mechanisms

**Target Users:** Video/photo professionals, content creators, automated workflow developers who need efficient batch processing of large media collections.

# When you write code

- Iterate gradually, avoiding major changes
- Minimize confirmations and checks
- Preserve existing code/structure unless necessary
- Use constants over magic numbers
- Check for existing solutions in the codebase before starting
- Check often the coherence of the code you’re writing with the rest of the code.
- Focus on minimal viable increments and ship early
- Write explanatory docstrings/comments that explain what and WHY this does, explain where and how the code is used/referred to elsewhere in the code
- Analyze code line-by-line
- Handle failures gracefully with retries, fallbacks, user guidance
- Address edge cases, validate assumptions, catch errors early
- Let the computer do the work, minimize user decisions
- Reduce cognitive load, beautify code
- Modularize repeated logic into concise, single-purpose functions
- Favor flat over nested structures
- Consistently keep, document, update and consult the holistic overview mental image of the codebase. 

## Keep track of paths

In each source file, maintain the up-to-date `this_file` record that shows the path of the current file relative to project root. Place the `this_file` record near the top of the file, as a comment after the shebangs, or in the YAML Markdown frontmatter.

## When you write Python

- Use `uv pip`, never `pip`
- Use `python -m` when running code
- PEP 8: Use consistent formatting and naming
- Write clear, descriptive names for functions and variables
- PEP 20: Keep code simple and explicit. Prioritize readability over cleverness
- Use type hints in their simplest form (list, dict, | for unions)
- PEP 257: Write clear, imperative docstrings
- Use f-strings. Use structural pattern matching where appropriate
- ALWAYS add "verbose" mode logugu-based logging, & debug-log
- For CLI Python scripts, use fire & rich, and start the script with

```
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["PKG1", "PKG2"]
# ///
# this_file: PATH_TO_CURRENT_FILE
```

Work in rounds: 

- Create `PLAN.md` as a detailed flat plan with `[ ]` items. 
- Identify the most important TODO items, and create `TODO.md` with `[ ]` items. 
- Implement the changes. 
- Update `PLAN.md` and `TODO.md` as you go. 
- After each round of changes, update `CHANGELOG.md` with the changes.
- Update `README.md` to reflect the changes.

Ask before extending/refactoring existing code in a way that may add complexity or break things.

When you’re finished, print "Wait, but" to go back, think & reflect, revise & improvement what you’ve done (but don’t invent functionality freely). Repeat this. But stick to the goal of "minimal viable next version". Lead two experts: "Ideot" for creative, unorthodox ideas, and "Critin" to critique flawed thinking and moderate for balanced discussions. The three of you shall illuminate knowledge with concise, beautiful responses, process methodically for clear answers, collaborate step-by-step, sharing thoughts and adapting. If errors are found, step back and focus on accuracy and progress.

## After Python changes run:

```
./cleanup.sh
```

Be creative, diligent, critical, relentless & funny!




# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


The topyaz project implements a unified command-line interface for Topaz Labs' AI products, focusing on three key business domains:

### Product Integration (Importance: 95)
Core business logic integrating Topaz Labs' AI products:
- Video AI processing capabilities in `topyaz/products/video_ai.py`
- Gigapixel AI upscaling features in `topyaz/products/gigapixel_ai.py`  
- Photo AI enhancement tools in `topyaz/products/photo_ai.py`

### Remote Processing Architecture (Importance: 85)
Remote execution system enabling distributed processing:
- SSH-based remote task execution in `topyaz/execution/remote.py`
- Secure file transfer protocols for media processing
- Hardware optimization detection for Apple Silicon/Intel systems

### Batch Processing Engine (Importance: 80) 
Intelligent batch operations management:
- Progress monitoring with ETA calculations
- Error handling and recovery mechanisms
- Model-specific processing parameter management

### License and Security (Importance: 75)
Business policy enforcement:
- Pro license verification for Gigapixel AI features
- SSH key-based authentication
- Command injection prevention
- System requirement validation

### Configuration Management (Importance: 70)
Domain-specific settings control:
- YAML-based configuration system
- Remote host configurations
- Product-specific default parameters
- Community tool integration settings

The project focuses on abstracting complex AI processing workflows into a unified interface while maintaining security and performance optimization across distributed systems.

$END$
</file>

<file path="CLAUDE.md">
## TLDR: topyaz Project

**topyaz** is a Python CLI wrapper that unifies Topaz Labs' three AI products (Video AI, Gigapixel AI, Photo AI) into a single command-line interface for professional batch processing workflows.

**🎯 Core Purpose:**
- Single CLI tool for all Topaz products instead of using separate GUIs
- Enable remote processing via SSH on powerful machines
- Batch operations with progress monitoring and error recovery

**📋 Requirements:**
- macOS 11+ (Topaz products are Mac-focused)
- Gigapixel AI Pro license ($499/year) for CLI access
- 16GB+ RAM, 80GB+ storage for models

**🚧 Current Status:**
- **Planning Stage**: Extensive specification (SPEC.md) and documentation written
- **Implementation**: Minimal skeleton code - most features in TODO.md are unimplemented
- **Architecture**: Designed around unified `TopyazCLI` class using Python Fire for CLI generation

**💡 Key Value:**
- ~2x faster than GUI for batch operations
- Remote execution on GPU servers
- Unified interface across Video AI (upscaling), Gigapixel AI (image enhancement), Photo AI (auto-enhancement)
- Production-ready error handling and recovery mechanisms

**Target Users:** Video/photo professionals, content creators, automated workflow developers who need efficient batch processing of large media collections.

# When you write code

- Iterate gradually, avoiding major changes
- Minimize confirmations and checks
- Preserve existing code/structure unless necessary
- Use constants over magic numbers
- Check for existing solutions in the codebase before starting
- Check often the coherence of the code you’re writing with the rest of the code.
- Focus on minimal viable increments and ship early
- Write explanatory docstrings/comments that explain what and WHY this does, explain where and how the code is used/referred to elsewhere in the code
- Analyze code line-by-line
- Handle failures gracefully with retries, fallbacks, user guidance
- Address edge cases, validate assumptions, catch errors early
- Let the computer do the work, minimize user decisions
- Reduce cognitive load, beautify code
- Modularize repeated logic into concise, single-purpose functions
- Favor flat over nested structures
- Consistently keep, document, update and consult the holistic overview mental image of the codebase. 

## Keep track of paths

In each source file, maintain the up-to-date `this_file` record that shows the path of the current file relative to project root. Place the `this_file` record near the top of the file, as a comment after the shebangs, or in the YAML Markdown frontmatter.

## When you write Python

- Use `uv pip`, never `pip`
- Use `python -m` when running code
- PEP 8: Use consistent formatting and naming
- Write clear, descriptive names for functions and variables
- PEP 20: Keep code simple and explicit. Prioritize readability over cleverness
- Use type hints in their simplest form (list, dict, | for unions)
- PEP 257: Write clear, imperative docstrings
- Use f-strings. Use structural pattern matching where appropriate
- ALWAYS add "verbose" mode logugu-based logging, & debug-log
- For CLI Python scripts, use fire & rich, and start the script with

```
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["PKG1", "PKG2"]
# ///
# this_file: PATH_TO_CURRENT_FILE
```

Work in rounds: 

- Create `PLAN.md` as a detailed flat plan with `[ ]` items. 
- Identify the most important TODO items, and create `TODO.md` with `[ ]` items. 
- Implement the changes. 
- Update `PLAN.md` and `TODO.md` as you go. 
- After each round of changes, update `CHANGELOG.md` with the changes.
- Update `README.md` to reflect the changes.

Ask before extending/refactoring existing code in a way that may add complexity or break things.

When you’re finished, print "Wait, but" to go back, think & reflect, revise & improvement what you’ve done (but don’t invent functionality freely). Repeat this. But stick to the goal of "minimal viable next version". Lead two experts: "Ideot" for creative, unorthodox ideas, and "Critin" to critique flawed thinking and moderate for balanced discussions. The three of you shall illuminate knowledge with concise, beautiful responses, process methodically for clear answers, collaborate step-by-step, sharing thoughts and adapting. If errors are found, step back and focus on accuracy and progress.

## After Python changes run:

```
./cleanup.sh
```


Be creative, diligent, critical, relentless & funny!




# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


The topyaz project implements a unified command-line interface for Topaz Labs' AI products, focusing on three key business domains:

### Product Integration (Importance: 95)
Core business logic integrating Topaz Labs' AI products:
- Video AI processing capabilities in `topyaz/products/video_ai.py`
- Gigapixel AI upscaling features in `topyaz/products/gigapixel_ai.py`  
- Photo AI enhancement tools in `topyaz/products/photo_ai.py`

### Remote Processing Architecture (Importance: 85)
Remote execution system enabling distributed processing:
- SSH-based remote task execution in `topyaz/execution/remote.py`
- Secure file transfer protocols for media processing
- Hardware optimization detection for Apple Silicon/Intel systems

### Batch Processing Engine (Importance: 80) 
Intelligent batch operations management:
- Progress monitoring with ETA calculations
- Error handling and recovery mechanisms
- Model-specific processing parameter management

### License and Security (Importance: 75)
Business policy enforcement:
- Pro license verification for Gigapixel AI features
- SSH key-based authentication
- Command injection prevention
- System requirement validation

### Configuration Management (Importance: 70)
Domain-specific settings control:
- YAML-based configuration system
- Remote host configurations
- Product-specific default parameters
- Community tool integration settings

The project focuses on abstracting complex AI processing workflows into a unified interface while maintaining security and performance optimization across distributed systems.

$END$
</file>

<file path="TODO.md">
# TODO
</file>

<file path="src/topyaz/topyaz.py">
#!/usr/bin/env python3
# this_file: src/topyaz/topyaz.py
"""
topyaz: Unified Python CLI wrapper for Topaz Labs products.

This module provides the main TopyazCLI class that serves as a unified interface
for Topaz Video AI, Gigapixel AI, and Photo AI products with support for local and
remote execution via SSH.

Created by Adam Twardoch

"""

import os
import platform
import shutil
import subprocess
import tempfile
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple, Union

import psutil
import yaml
from loguru import logger
from tqdm import tqdm

try:
    from topyaz.__version__ import __version__
except ImportError:
    __version__ = "0.1.0-dev"


class TopazError(Exception):
    """Base exception for topyaz errors.

    Used in:
    - topyaz/__init__.py
    """

    pass


class AuthenticationError(TopazError):
    """Authentication-related errors.

    Used in:
    - topyaz/__init__.py
    """

    pass


class EnvironmentError(TopazError):
    """Environment validation errors.

    Used in:
    - topyaz/__init__.py
    """

    pass


class ProcessingError(TopazError):
    """Processing-related errors.

    Used in:
    - topyaz/__init__.py
    """

    pass


class TopyazCLI:
    """
    Unified wrapper for Topaz Labs products (Video AI, Gigapixel AI, Photo AI).

    Provides a consistent interface across all three products with support for:
    - Local and remote execution via SSH
    - Comprehensive error handling and validation
    - Progress monitoring and logging
    - Configuration management

    Used in:
    - topyaz/__init__.py
    - topyaz/__main__.py
    """

    def __init__(
        self,
        remote_host: str | None = None,
        ssh_user: str | None = None,
        ssh_key: str | None = None,
        verbose: bool = True,
        dry_run: bool = False,
        log_level: str = "INFO",
        timeout: int = 3600,
        parallel_jobs: int = 1,
        output_dir: str | None = None,
        preserve_structure: bool = True,
        backup_originals: bool = False,
        config_file: str | None = None,
    ):
        """
        Initialize the topyaz wrapper with unified options.

        Args:
            remote_host: Remote machine hostname/IP for SSH execution
            ssh_user: SSH username for remote execution
            ssh_key: Path to SSH private key file
            verbose: Enable detailed output and progress reporting
            dry_run: Show commands without executing them
            log_level: Logging level (DEBUG, INFO, WARNING, ERROR)
            timeout: Maximum execution time in seconds per operation
            parallel_jobs: Number of concurrent operations (where supported)
            output_dir: Default output directory for processed files
            preserve_structure: Maintain input directory structure in output
            backup_originals: Create backup copies before processing
            config_file: Path to YAML configuration file

        """
        # Store initialization parameters
        self.remote_host = remote_host
        self.ssh_user = ssh_user
        self.ssh_key = ssh_key
        self.verbose = verbose
        self.dry_run = dry_run
        self.timeout = timeout
        self.parallel_jobs = parallel_jobs
        self.output_dir = output_dir
        self.preserve_structure = preserve_structure
        self.backup_originals = backup_originals

        # Initialize logging
        self._setup_logging(log_level)

        # Load configuration
        self.config = self._load_config(config_file)

        # Initialize product executables
        self._gigapixel_exe = None
        self._video_ai_ffmpeg = None
        self._photo_ai_exe = None

        # Initialize environment
        self._validate_environment()

        logger.info(f"topyaz v{__version__} initialized")
        if self.dry_run:
            logger.info("DRY RUN MODE: Commands will be shown but not executed")

    def _setup_logging(self, log_level: str) -> None:
        """Configure loguru logging system."""
        logger.remove()  # Remove default handler

        log_format = (
            "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
            "<level>{level: <8}</level> | "
            "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - "
            "<level>{message}</level>"
        )

        # Console handler
        logger.add(
            lambda msg: print(msg, end=""),
            format=log_format,
            level=log_level,
            colorize=True,
        )

        # File handler if verbose mode
        if self.verbose:
            log_file = Path.home() / ".topyaz" / "logs" / "topyaz.log"
            log_file.parent.mkdir(parents=True, exist_ok=True)
            logger.add(
                log_file,
                format=log_format,
                level="DEBUG",
                rotation="10 MB",
                retention="1 week",
            )

    def _load_config(self, config_file: str | None) -> dict[str, Any]:
        """Load configuration from YAML file."""
        config_path = Path(config_file) if config_file else Path.home() / ".topyaz" / "config.yaml"

        if config_path.exists():
            try:
                with open(config_path) as f:
                    config = yaml.safe_load(f) or {}
                logger.debug(f"Loaded configuration from {config_path}")
                return config
            except Exception as e:
                logger.warning(f"Failed to load config from {config_path}: {e}")

        # Return default configuration
        return {
            "defaults": {
                "output_dir": "~/processed",
                "preserve_structure": True,
                "backup_originals": False,
                "log_level": "INFO",
            },
            "video": {"default_model": "amq-13", "default_codec": "hevc_videotoolbox", "default_quality": 18},
            "gigapixel": {"default_model": "std", "default_format": "preserve", "parallel_read": 4},
            "photo": {"default_format": "jpg", "default_quality": 95},
        }

    def _validate_environment(self) -> None:
        """Validate system environment and requirements."""
        # Check macOS version
        if platform.system() == "Darwin":
            version = platform.mac_ver()[0]
            major, minor = map(int, version.split(".")[:2])
            if major < 11:
                logger.warning("macOS 11+ recommended for full Topaz support")

        # Check available memory
        memory_gb = psutil.virtual_memory().total / (1024**3)
        if memory_gb < 16:
            logger.warning(f"Low memory detected ({memory_gb:.1f}GB). 16GB+ recommended")

        # Check available disk space
        disk_free_gb = psutil.disk_usage(Path.home()).free / (1024**3)
        if disk_free_gb < 80:
            logger.warning(f"Low disk space ({disk_free_gb:.1f}GB). 80GB+ recommended for Video AI")

    def _check_memory_constraints(self, operation_type: str = "processing") -> dict[str, Any]:
        """Check current memory constraints and suggest optimizations."""
        memory = psutil.virtual_memory()

        constraints = {
            "available_gb": memory.available / (1024**3),
            "total_gb": memory.total / (1024**3),
            "percent_used": memory.percent,
            "recommendations": [],
        }

        # Memory constraint detection
        if memory.percent > 85:
            constraints["recommendations"].append("High memory usage detected - consider reducing batch size")

        if constraints["available_gb"] < 8:
            constraints["recommendations"].append("Low available memory - process files in smaller batches")

        if operation_type == "video" and constraints["available_gb"] < 16:
            constraints["recommendations"].append("Video processing requires 16GB+ RAM for optimal performance")

        if operation_type == "gigapixel" and constraints["available_gb"] < 4:
            constraints["recommendations"].append("Gigapixel processing may fail with less than 4GB available RAM")

        logger.debug(
            f"Memory check: {constraints['available_gb']:.1f}GB available, {constraints['percent_used']:.1f}% used"
        )

        return constraints

    def _get_optimal_batch_size(self, file_count: int, operation_type: str = "processing") -> int:
        """Calculate optimal batch size based on available system resources."""
        memory_constraints = self._check_memory_constraints(operation_type)
        available_gb = memory_constraints["available_gb"]

        # Base batch sizes by operation type and available memory
        if operation_type == "video":
            if available_gb >= 32:
                base_batch = 4
            elif available_gb >= 16:
                base_batch = 2
            else:
                base_batch = 1
        elif operation_type == "gigapixel":
            if available_gb >= 32:
                base_batch = 50
            elif available_gb >= 16:
                base_batch = 25
            elif available_gb >= 8:
                base_batch = 10
            else:
                base_batch = 5
        elif operation_type == "photo":
            # Photo AI has a hard limit of ~450 images per batch
            if available_gb >= 16:
                base_batch = 400
            elif available_gb >= 8:
                base_batch = 200
            else:
                base_batch = 100
        else:
            base_batch = min(10, file_count)

        # Don't exceed available files
        optimal_batch = min(base_batch, file_count)

        logger.debug(f"Optimal batch size for {operation_type}: {optimal_batch} (from {file_count} files)")

        return optimal_batch

    def _handle_processing_error(self, error: Exception, operation_type: str, retry_count: int = 0) -> bool:
        """Handle processing errors with intelligent recovery strategies."""
        max_retries = 3

        if retry_count >= max_retries:
            logger.error(f"Max retries ({max_retries}) exceeded for {operation_type}")
            return False

        error_msg = str(error).lower()

        # Memory-related errors
        if any(keyword in error_msg for keyword in ["memory", "ram", "allocation", "out of memory"]):
            logger.warning(f"Memory error detected in {operation_type} - suggesting batch size reduction")

            # Log memory recovery suggestions
            memory_constraints = self._check_memory_constraints(operation_type)
            for recommendation in memory_constraints["recommendations"]:
                logger.info(f"Recovery suggestion: {recommendation}")

            return True  # Suggest retry with smaller batch

        # GPU-related errors
        if any(keyword in error_msg for keyword in ["gpu", "cuda", "opencl", "metal", "device"]):
            logger.warning(f"GPU error detected in {operation_type} - consider CPU fallback")
            logger.info("Recovery suggestion: Try running with device=-1 to force CPU processing")
            return True

        # Authentication errors
        if any(keyword in error_msg for keyword in ["auth", "login", "token", "license"]):
            logger.error(f"Authentication error in {operation_type} - please login via GUI")
            logger.info("Recovery suggestion: Open the Topaz app and ensure you're logged in")
            return False  # Don't retry auth errors automatically

        # File permission errors
        if any(keyword in error_msg for keyword in ["permission", "access", "denied", "readonly"]):
            logger.error(f"File permission error in {operation_type}")
            logger.info("Recovery suggestion: Check file/directory permissions and disk space")
            return False  # Don't retry permission errors

        # Unknown errors - allow one retry
        if retry_count == 0:
            logger.warning(f"Unknown error in {operation_type}, attempting retry: {error}")
            return True

        logger.error(f"Unrecoverable error in {operation_type}: {error}")
        return False

    def _get_gpu_info(self) -> dict[str, Any]:
        """Get GPU information and utilization statistics."""
        gpu_info = {"available": False, "devices": [], "utilization": {}, "memory": {}, "errors": []}

        try:
            # Try NVIDIA GPUs first
            if shutil.which("nvidia-smi"):
                gpu_info.update(self._get_nvidia_gpu_info())

            # Try AMD GPUs
            elif shutil.which("rocm-smi"):
                gpu_info.update(self._get_amd_gpu_info())

            # Try Intel GPUs
            elif shutil.which("intel_gpu_top"):
                gpu_info.update(self._get_intel_gpu_info())

            # macOS Metal performance (Apple Silicon)
            elif platform.system() == "Darwin":
                gpu_info.update(self._get_metal_gpu_info())

        except Exception as e:
            gpu_info["errors"].append(f"GPU detection error: {e}")
            logger.debug(f"GPU detection failed: {e}")

        return gpu_info

    def _get_nvidia_gpu_info(self) -> dict[str, Any]:
        """Get NVIDIA GPU information using nvidia-smi."""
        import subprocess

        try:
            # Query GPU information
            cmd = [
                "nvidia-smi",
                "--query-gpu=name,memory.total,memory.used,utilization.gpu,temperature.gpu,power.draw",
                "--format=csv,noheader,nounits",
            ]

            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10, check=False)

            if result.returncode != 0:
                return {"available": False, "errors": [f"nvidia-smi failed: {result.stderr}"]}

            devices = []
            for line in result.stdout.strip().split("\n"):
                if line.strip():
                    parts = [p.strip() for p in line.split(",")]
                    if len(parts) >= 6:
                        devices.append(
                            {
                                "name": parts[0],
                                "memory_total_mb": int(parts[1]) if parts[1].isdigit() else 0,
                                "memory_used_mb": int(parts[2]) if parts[2].isdigit() else 0,
                                "utilization_percent": int(parts[3]) if parts[3].isdigit() else 0,
                                "temperature_c": int(parts[4]) if parts[4].isdigit() else 0,
                                "power_draw_w": float(parts[5]) if parts[5].replace(".", "").isdigit() else 0.0,
                            }
                        )

            return {"available": True, "type": "nvidia", "devices": devices, "count": len(devices)}

        except Exception as e:
            return {"available": False, "errors": [f"NVIDIA GPU detection error: {e}"]}

    def _get_amd_gpu_info(self) -> dict[str, Any]:
        """Get AMD GPU information using rocm-smi."""
        import subprocess

        try:
            # Query basic GPU information
            result = subprocess.run(
                ["rocm-smi", "--showid", "--showtemp", "--showuse"],
                capture_output=True,
                text=True,
                timeout=10,
                check=False,
            )

            if result.returncode != 0:
                return {"available": False, "errors": [f"rocm-smi failed: {result.stderr}"]}

            # Basic parsing - AMD output format is more complex
            devices = []
            lines = result.stdout.strip().split("\n")

            for line in lines:
                if "GPU" in line and "%" in line:
                    # Simple extraction - would need more sophisticated parsing for production
                    devices.append({"name": "AMD GPU", "type": "amd", "utilization_info": line.strip()})

            return {"available": True, "type": "amd", "devices": devices, "count": len(devices)}

        except Exception as e:
            return {"available": False, "errors": [f"AMD GPU detection error: {e}"]}

    def _get_intel_gpu_info(self) -> dict[str, Any]:
        """Get Intel GPU information."""
        # Intel GPU monitoring is less standardized
        return {
            "available": True,
            "type": "intel",
            "devices": [{"name": "Intel GPU", "note": "Limited monitoring available"}],
            "count": 1,
        }

    def _get_metal_gpu_info(self) -> dict[str, Any]:
        """Get macOS Metal GPU information for Apple Silicon."""
        try:
            # Use system_profiler to get GPU info
            import subprocess

            result = subprocess.run(
                ["system_profiler", "SPDisplaysDataType", "-json"],
                capture_output=True,
                text=True,
                timeout=10,
                check=False,
            )

            if result.returncode != 0:
                return {"available": False, "errors": ["system_profiler failed"]}

            import json

            data = json.loads(result.stdout)

            devices = []
            displays = data.get("SPDisplaysDataType", [])

            for display in displays:
                if "sppci_model" in display or "spdisplays_chipset" in display:
                    gpu_name = display.get("sppci_model", display.get("spdisplays_chipset", "Unknown GPU"))

                    # Extract VRAM if available
                    vram = display.get("spdisplays_vram", "Unknown")

                    devices.append({"name": gpu_name, "vram": vram, "type": "metal"})

            return {"available": True, "type": "metal", "devices": devices, "count": len(devices)}

        except Exception as e:
            return {"available": False, "errors": [f"Metal GPU detection error: {e}"]}

    def _monitor_gpu_during_processing(self, duration_seconds: int = 60) -> dict[str, Any]:
        """Monitor GPU utilization during processing for specified duration."""
        import threading
        import time

        monitoring_data = {
            "samples": [],
            "peak_utilization": 0,
            "average_utilization": 0,
            "peak_memory_usage": 0,
            "monitoring_duration": duration_seconds,
        }

        start_time = time.time()
        sample_interval = 2  # seconds

        while time.time() - start_time < duration_seconds:
            gpu_info = self._get_gpu_info()

            if gpu_info["available"] and gpu_info["devices"]:
                sample = {"timestamp": time.time(), "devices": []}

                for device in gpu_info["devices"]:
                    if "utilization_percent" in device:
                        utilization = device["utilization_percent"]
                        monitoring_data["peak_utilization"] = max(monitoring_data["peak_utilization"], utilization)

                        sample["devices"].append(
                            {
                                "name": device["name"],
                                "utilization": utilization,
                                "memory_used": device.get("memory_used_mb", 0),
                            }
                        )

                        memory_used = device.get("memory_used_mb", 0)
                        monitoring_data["peak_memory_usage"] = max(monitoring_data["peak_memory_usage"], memory_used)

                monitoring_data["samples"].append(sample)

            time.sleep(sample_interval)

        # Calculate average utilization
        if monitoring_data["samples"]:
            total_utilization = sum(
                device["utilization"] for sample in monitoring_data["samples"] for device in sample["devices"]
            )
            total_measurements = sum(len(sample["devices"]) for sample in monitoring_data["samples"])

            if total_measurements > 0:
                monitoring_data["average_utilization"] = total_utilization / total_measurements

        return monitoring_data

    def _find_executable(self, product: str) -> str | None:
        """Find executable for specified Topaz product."""
        if platform.system() == "Darwin":  # macOS
            paths = {
                "gigapixel": [
                    "/Applications/Topaz Gigapixel AI.app/Contents/Resources/bin/gigapixel",
                    "/Applications/Topaz Gigapixel AI.app/Contents/MacOS/Topaz Gigapixel AI",
                ],
                "video_ai": ["/Applications/Topaz Video AI.app/Contents/MacOS/ffmpeg"],
                "photo_ai": [
                    "/Applications/Topaz Photo AI.app/Contents/Resources/bin/tpai",
                    "/Applications/Topaz Photo AI.app/Contents/MacOS/Topaz Photo AI",
                ],
            }
        elif platform.system() == "Windows":
            paths = {
                "gigapixel": ["C:\\Program Files\\Topaz Labs LLC\\Topaz Gigapixel AI\\bin\\gigapixel.exe"],
                "video_ai": ["C:\\Program Files\\Topaz Labs LLC\\Topaz Video AI\\ffmpeg.exe"],
                "photo_ai": ["C:\\Program Files\\Topaz Labs LLC\\Topaz Photo AI\\tpai.exe"],
            }
        else:
            logger.error(f"Unsupported platform: {platform.system()}")
            return None

        for path in paths.get(product, []):
            if Path(path).exists():
                logger.debug(f"Found {product} executable: {path}")
                return path

        logger.warning(f"Could not find {product} executable")
        return None

    def _execute_command(self, command: list[str], input_data: str | None = None) -> tuple[int, str, str]:
        """Execute a command locally or remotely."""
        if self.dry_run:
            logger.info(f"DRY RUN: {' '.join(command)}")
            return 0, "dry-run-output", ""

        if self.remote_host:
            return self._execute_remote(command, input_data)
        return self._execute_local(command, input_data)

    def _execute_local(self, command: list[str], input_data: str | None = None) -> tuple[int, str, str]:
        """Execute command locally."""
        try:
            logger.debug(f"Executing: {' '.join(command)}")

            result = subprocess.run(
                command,
                input=input_data,
                capture_output=True,
                text=True,
                timeout=self.timeout,
                encoding="utf-8",
                errors="ignore",
                check=False,
            )

            logger.debug(f"Return code: {result.returncode}")
            if result.stdout:
                logger.debug(f"STDOUT: {result.stdout}")
            if result.stderr:
                logger.debug(f"STDERR: {result.stderr}")

            return result.returncode, result.stdout, result.stderr

        except subprocess.TimeoutExpired:
            msg = f"Command timed out after {self.timeout} seconds"
            raise ProcessingError(msg)
        except Exception as e:
            msg = f"Command execution failed: {e}"
            raise ProcessingError(msg)

    def _execute_remote(self, command: list[str], input_data: str | None = None) -> tuple[int, str, str]:
        """Execute command on remote host via SSH."""
        if not self.ssh_user:
            msg = "SSH user required for remote execution"
            raise OSError(msg)

        import io

        import paramiko

        try:
            # Create SSH client
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

            # Connect to remote host
            connect_kwargs = {"hostname": self.remote_host, "username": self.ssh_user, "timeout": 30}

            if self.ssh_key:
                connect_kwargs["key_filename"] = self.ssh_key

            logger.debug(f"Connecting to {self.remote_host} as {self.ssh_user}")
            ssh.connect(**connect_kwargs)

            # Execute command
            command_str = " ".join(f'"{arg}"' if " " in arg else arg for arg in command)
            logger.debug(f"Remote command: {command_str}")

            stdin, stdout, stderr = ssh.exec_command(command_str, timeout=self.timeout)

            if input_data:
                stdin.write(input_data)
                stdin.flush()

            # Get results
            exit_status = stdout.channel.recv_exit_status()
            stdout_data = stdout.read().decode("utf-8", errors="ignore")
            stderr_data = stderr.read().decode("utf-8", errors="ignore")

            logger.debug(f"Remote exit status: {exit_status}")
            if stdout_data:
                logger.debug(f"Remote STDOUT: {stdout_data}")
            if stderr_data:
                logger.debug(f"Remote STDERR: {stderr_data}")

            ssh.close()
            return exit_status, stdout_data, stderr_data

        except paramiko.AuthenticationException:
            msg = f"SSH authentication failed for {self.ssh_user}@{self.remote_host}"
            raise AuthenticationError(msg)
        except paramiko.SSHException as e:
            msg = f"SSH connection error: {e}"
            raise ProcessingError(msg)
        except Exception as e:
            msg = f"Remote execution failed: {e}"
            raise ProcessingError(msg)

    def _execute_command_with_progress(self, command: list[str], task_name: str) -> tuple[int, str, str]:
        """Execute command with progress monitoring."""
        import subprocess
        import threading
        import time

        try:
            logger.debug(f"Executing with progress: {' '.join(command)}")

            # Start process
            process = subprocess.Popen(
                command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, encoding="utf-8", errors="ignore"
            )

            # Progress bar setup
            progress_bar = tqdm(
                desc=task_name,
                unit=" frames" if "video" in task_name.lower() else " images",
                bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}]",
            )

            stdout_data = []
            stderr_data = []

            def read_output(pipe, data_list):
                for line in iter(pipe.readline, ""):
                    data_list.append(line)
                    # Update progress based on output patterns
                    if "Processing" in line or "frame=" in line:
                        progress_bar.update(1)
                pipe.close()

            # Start output reading threads
            stdout_thread = threading.Thread(target=read_output, args=(process.stdout, stdout_data))
            stderr_thread = threading.Thread(target=read_output, args=(process.stderr, stderr_data))

            stdout_thread.start()
            stderr_thread.start()

            # Wait for process with timeout
            try:
                exit_code = process.wait(timeout=self.timeout)
            except subprocess.TimeoutExpired:
                process.kill()
                progress_bar.close()
                msg = f"Command timed out after {self.timeout} seconds"
                raise ProcessingError(msg)

            # Wait for threads to finish
            stdout_thread.join(timeout=5)
            stderr_thread.join(timeout=5)

            progress_bar.close()

            stdout_str = "".join(stdout_data)
            stderr_str = "".join(stderr_data)

            logger.debug(f"Return code: {exit_code}")
            if stdout_str:
                logger.debug(f"STDOUT: {stdout_str}")
            if stderr_str:
                logger.debug(f"STDERR: {stderr_str}")

            return exit_code, stdout_str, stderr_str

        except Exception as e:
            if "progress_bar" in locals():
                progress_bar.close()
            msg = f"Command execution failed: {e}"
            raise ProcessingError(msg)

    def _validate_paths(self, input_path: str, output_path: str | None = None) -> tuple[Path, Path]:
        """Validate and normalize input/output paths."""
        # Expand and resolve input path
        input_path_obj = Path(input_path).expanduser().resolve()

        if not input_path_obj.exists():
            msg = f"Input path does not exist: {input_path}"
            raise ValueError(msg)

        # Determine output path
        if output_path:
            output_path_obj = Path(output_path).expanduser().resolve()
        elif self.output_dir:
            output_path_obj = Path(self.output_dir).expanduser().resolve()
        # Default to input directory with '_processed' suffix
        elif input_path_obj.is_file():
            output_path_obj = input_path_obj.parent / f"{input_path_obj.stem}_processed"
        else:
            output_path_obj = input_path_obj.parent / f"{input_path_obj.name}_processed"

        # Create output directory if it doesn't exist
        output_path_obj.mkdir(parents=True, exist_ok=True)

        logger.debug(f"Input path: {input_path_obj}")
        logger.debug(f"Output path: {output_path_obj}")

        return input_path_obj, output_path_obj

    def _validate_gigapixel_params(
        self,
        model: str,
        scale: int,
        denoise: int | None,
        sharpen: int | None,
        compression: int | None,
        detail: int | None,
        creativity: int | None,
        texture: int | None,
        face_recovery: int | None,
        face_recovery_version: int,
        format: str,
        quality: int,
        bit_depth: int,
        parallel_read: int,
    ) -> None:
        """Validate Gigapixel AI parameters."""
        # Valid models
        valid_models = {
            "std",
            "standard",
            "hf",
            "high fidelity",
            "fidelity",
            "low",
            "lowres",
            "low resolution",
            "low res",
            "art",
            "cg",
            "cgi",
            "lines",
            "compression",
            "very compressed",
            "high compression",
            "vc",
            "text",
            "txt",
            "text refine",
            "recovery",
            "redefine",
        }
        if model not in valid_models:
            msg = f"Invalid model '{model}'. Valid models: {', '.join(sorted(valid_models))}"
            raise ValueError(msg)

        # Scale validation
        if scale < 1 or scale > 6:
            msg = "Scale must be between 1 and 6"
            raise ValueError(msg)

        # Parameter range validations
        for param_name, param_value, min_val, max_val in [
            ("denoise", denoise, 1, 100),
            ("sharpen", sharpen, 1, 100),
            ("compression", compression, 1, 100),
            ("detail", detail, 1, 100),
            ("creativity", creativity, 1, 6),
            ("texture", texture, 1, 6),
            ("face_recovery", face_recovery, 1, 100),
            ("quality", quality, 1, 100),
            ("parallel_read", parallel_read, 1, 10),
        ]:
            if param_value is not None and (param_value < min_val or param_value > max_val):
                msg = f"{param_name} must be between {min_val} and {max_val}"
                raise ValueError(msg)

        # Face recovery version validation
        if face_recovery_version not in [1, 2]:
            msg = "Face recovery version must be 1 or 2"
            raise ValueError(msg)

        # Format validation
        valid_formats = {"preserve", "jpg", "jpeg", "png", "tif", "tiff"}
        if format not in valid_formats:
            msg = f"Invalid format '{format}'. Valid formats: {', '.join(sorted(valid_formats))}"
            raise ValueError(msg)

        # Bit depth validation
        valid_bit_depths = {0, 8, 16}
        if bit_depth not in valid_bit_depths:
            msg = f"Invalid bit depth '{bit_depth}'. Valid values: {', '.join(map(str, sorted(valid_bit_depths)))}"
            raise ValueError(msg)

    def _setup_video_ai_environment(self) -> None:
        """Set up required environment variables for Video AI."""

        # Set model directories
        if platform.system() == "Darwin":  # macOS
            model_dir = "/Applications/Topaz Video AI.app/Contents/Resources/models"
            data_dir = os.path.expanduser("~/Library/Application Support/Topaz Labs LLC/Topaz Video AI/")
        else:  # Windows
            model_dir = "C:\\Program Files\\Topaz Labs LLC\\Topaz Video AI\\models"
            data_dir = os.path.expanduser("~/AppData/Local/Topaz Labs LLC/Topaz Video AI/")

        os.environ["TVAI_MODEL_DIR"] = model_dir
        os.environ["TVAI_MODEL_DATA_DIR"] = data_dir

        logger.debug(f"Set TVAI_MODEL_DIR: {model_dir}")
        logger.debug(f"Set TVAI_MODEL_DATA_DIR: {data_dir}")

        # Validate authentication file
        self._validate_video_ai_auth(data_dir)

    def _validate_video_ai_auth(self, data_dir: str) -> None:
        """Validate Video AI authentication file exists and is valid."""
        import json
        import time

        # Check multiple possible auth file locations and formats
        auth_files = [
            # User data directory locations
            Path(data_dir) / "auth.tpz",
            Path(data_dir) / "auth.json",
            Path(data_dir) / "login.json",
            Path(data_dir) / "user.json",
            Path(data_dir) / ".auth",
            # Application bundle locations (actual location found by user)
            Path("/Applications/Topaz Video AI.app/Contents/Resources/models/auth.tpz"),
            Path("/Applications/Topaz Video AI.app/Contents/Resources/auth.tpz"),
        ]

        auth_found = False
        for auth_file in auth_files:
            if auth_file.exists():
                auth_found = True
                logger.debug(f"Found Video AI auth file: {auth_file}")

                try:
                    # Try to read and parse auth file
                    with open(auth_file) as f:
                        auth_data = json.load(f)

                    # Check if token exists and is not expired
                    if "token" not in auth_data:
                        logger.debug("Video AI authentication token missing in this file")
                        continue

                    # Check expiration if available
                    if "expires" in auth_data:
                        expires_timestamp = auth_data["expires"]
                        current_time = int(time.time())

                        if current_time >= expires_timestamp:
                            logger.debug("Video AI authentication token expired in this file")
                            continue

                        # Calculate time until expiration
                        time_remaining = expires_timestamp - current_time
                        days_remaining = time_remaining // (24 * 3600)

                        if days_remaining < 7:
                            logger.warning(
                                f"Video AI authentication expires in {days_remaining} days - consider refreshing"
                            )
                        else:
                            logger.debug(f"Video AI authentication valid for {days_remaining} days")

                    logger.debug("Video AI authentication validated successfully")
                    return

                except (json.JSONDecodeError, FileNotFoundError, KeyError) as e:
                    logger.debug(f"Video AI authentication file {auth_file} invalid: {e}")
                    continue

        # If we found auth files but none were valid, show a warning
        # If no auth files found at all, show a more informative message
        if auth_found:
            logger.warning("Video AI authentication files found but none are valid - you may need to login via the GUI")
        else:
            logger.info(
                "Video AI authentication files not found - this is normal if you're logged in via GUI. Processing will continue."
            )
            logger.debug(f"Checked auth file locations: {[str(f) for f in auth_files]}")

    def _validate_video_ai_params(
        self,
        model: str,
        scale: int,
        fps: int | None,
        codec: str,
        quality: int,
        denoise: int | None,
        details: int | None,
        halo: int | None,
        blur: int | None,
        compression: int | None,
        device: int,
    ) -> None:
        """Validate Video AI parameters."""
        # Valid models
        valid_models = {
            "amq-13",
            "ahq-10",
            "ahq-11",
            "ahq-12",
            "alq-10",
            "alq-12",
            "alq-13",
            "alqs-1",
            "alqs-2",
            "amqs-1",
            "amqs-2",
            "aaa-9",
            "aaa-10",
            "prob-2",
            "prap-2",
            "ddv-1",
            "ddv-2",
            "ddv-3",
            "dtd-1",
            "dtd-3",
            "dtd-4",
            "dtds-1",
            "dtds-2",
            "dtv-1",
            "dtv-3",
            "dtv-4",
            "dtvs-1",
            "dtvs-2",
            "gcg-5",
            "ghq-5",
            "thd-3",
            "thf-4",
            "apo-8",
            "apf-1",
            "chr-1",
            "chr-2",
            "chf-1",
            "chf-2",
            "chf-3",
            "cpe-1",
            "cpe-2",
            "ref-2",
        }
        if model not in valid_models:
            msg = f"Invalid model '{model}'. Valid models: {', '.join(sorted(valid_models))}"
            raise ValueError(msg)

        # Scale validation
        if scale < 1 or scale > 4:
            msg = "Scale must be between 1 and 4 for Video AI"
            raise ValueError(msg)

        # Parameter range validations
        for param_name, param_value, min_val, max_val in [
            ("fps", fps, 1, 240),
            ("quality", quality, 1, 51),
            ("denoise", denoise, 0, 100),
            ("details", details, -100, 100),
            ("halo", halo, 0, 100),
            ("blur", blur, 0, 100),
            ("compression", compression, 0, 100),
            ("device", device, -1, 10),
        ]:
            if param_value is not None and (param_value < min_val or param_value > max_val):
                msg = f"{param_name} must be between {min_val} and {max_val}"
                raise ValueError(msg)

    def _build_video_ai_command(
        self,
        input_file: Path,
        output_file: Path,
        model: str,
        scale: int,
        fps: int | None,
        codec: str,
        quality: int,
        denoise: int | None,
        details: int | None,
        halo: int | None,
        blur: int | None,
        compression: int | None,
        stabilize: bool,
        interpolate: bool,
        custom_filters: str | None,
        device: int,
    ) -> list[str]:
        """Build FFmpeg command for Video AI processing."""
        cmd = [self._video_ai_ffmpeg, "-hide_banner", "-nostdin", "-y"]

        # Hardware acceleration
        if platform.system() == "Darwin":
            cmd.extend(["-strict", "2", "-hwaccel", "auto"])

        # Input
        cmd.extend(["-i", str(input_file)])

        # Build filter chain
        filters = []

        # Main upscaling filter
        upscale_filter = f"tvai_up=model={model}:scale={scale}"
        if denoise is not None:
            upscale_filter += f":denoise={denoise}"
        if details is not None:
            upscale_filter += f":details={details}"
        if halo is not None:
            upscale_filter += f":halo={halo}"
        if blur is not None:
            upscale_filter += f":blur={blur}"
        if compression is not None:
            upscale_filter += f":compression={compression}"
        if device >= 0:
            upscale_filter += f":device={device}"

        filters.append(upscale_filter)

        # Frame interpolation
        if interpolate and fps:
            filters.append(f"tvai_fi=model=chr-2:fps={fps}")

        # Custom filters
        if custom_filters:
            filters.append(custom_filters)

        # Add filter chain to command
        if filters:
            cmd.extend(["-vf", ",".join(filters)])

        # Codec and encoding options
        if codec == "hevc_videotoolbox":
            cmd.extend(["-c:v", "hevc_videotoolbox", "-profile:v", "main"])
            cmd.extend(["-pix_fmt", "yuv420p", "-allow_sw", "1"])
        elif codec == "hevc_nvenc":
            cmd.extend(["-c:v", "hevc_nvenc", "-profile", "main", "-preset", "medium"])
            cmd.extend(["-pix_fmt", "yuv420p", "-movflags", "frag_keyframe+empty_moov"])
        elif codec == "hevc_amf":
            cmd.extend(["-c:v", "hevc_amf", "-profile", "main"])
            cmd.extend(["-pix_fmt", "yuv420p", "-movflags", "frag_keyframe+empty_moov"])
        else:
            # Default software encoding
            cmd.extend(["-c:v", "libx265", "-preset", "medium", "-pix_fmt", "yuv420p"])

        # Quality setting
        cmd.extend(["-crf", str(quality)])

        # Output file
        cmd.append(str(output_file))

        return cmd

    def _validate_photo_ai_params(
        self, format: str, quality: int, compression: int, bit_depth: int, tiff_compression: str
    ) -> None:
        """Validate Photo AI parameters."""
        # Format validation
        valid_formats = {"preserve", "jpg", "jpeg", "png", "tif", "tiff", "dng"}
        if format not in valid_formats:
            msg = f"Invalid format '{format}'. Valid formats: {', '.join(sorted(valid_formats))}"
            raise ValueError(msg)

        # Parameter range validations
        if quality < 0 or quality > 100:
            msg = "Quality must be between 0 and 100"
            raise ValueError(msg)

        if compression < 0 or compression > 10:
            msg = "PNG compression must be between 0 and 10"
            raise ValueError(msg)

        if bit_depth not in [8, 16]:
            msg = "TIFF bit depth must be 8 or 16"
            raise ValueError(msg)

        # TIFF compression validation
        valid_tiff_compression = {"none", "lzw", "zip"}
        if tiff_compression not in valid_tiff_compression:
            msg = f"Invalid TIFF compression '{tiff_compression}'. Valid values: {', '.join(sorted(valid_tiff_compression))}"
            raise ValueError(msg)

    def gp(
        self,
        input_path: str,
        model: str = "std",
        scale: int = 2,
        denoise: int | None = None,
        sharpen: int | None = None,
        compression: int | None = None,
        detail: int | None = None,
        creativity: int | None = None,
        texture: int | None = None,
        prompt: str | None = None,
        face_recovery: int | None = None,
        face_recovery_version: int = 2,
        format: str = "preserve",
        quality: int = 95,
        bit_depth: int = 0,
        parallel_read: int = 1,
        output: str | None = None,
        **kwargs,
    ) -> bool:
        """
        Process images using Topaz Gigapixel AI.

        Args:
            input_path: Path to input image(s) or directory
            model: AI model to use (std, hf, low, art, lines, recovery, redefine, etc.)
            scale: Upscale factor (1-6)
            denoise: Denoise strength (1-100)
            sharpen: Sharpen strength (1-100)
            compression: Compression reduction (1-100)
            detail: Detail enhancement (1-100)
            creativity: Creativity level for generative models (1-6)
            texture: Texture level for generative models (1-6)
            prompt: Text prompt for generative models
            face_recovery: Face recovery strength (1-100)
            face_recovery_version: Face recovery version (1 or 2)
            format: Output format (preserve, jpg, png, tiff)
            quality: JPEG quality (1-100)
            bit_depth: Bit depth (0=preserve, 8, 16)
            parallel_read: Parallel file loading (1-10)
            output: Output directory path

        Returns:
            True if processing succeeded, False otherwise

        """
        logger.info(f"Starting Gigapixel AI processing: {input_path}")

        # Validate parameters
        self._validate_gigapixel_params(
            model,
            scale,
            denoise,
            sharpen,
            compression,
            detail,
            creativity,
            texture,
            face_recovery,
            face_recovery_version,
            format,
            quality,
            bit_depth,
            parallel_read,
        )

        # Find Gigapixel executable
        if not self._gigapixel_exe:
            self._gigapixel_exe = self._find_executable("gigapixel")
            if not self._gigapixel_exe:
                msg = "Gigapixel AI executable not found"
                raise OSError(msg)

        # Validate paths
        input_path_obj, output_path_obj = self._validate_paths(input_path, output)

        # Build command arguments
        cmd = [self._gigapixel_exe, "--cli"]

        # Input/output
        cmd.extend(["-i", str(input_path_obj)])
        cmd.extend(["-o", str(output_path_obj)])
        cmd.extend(["--create-folder"])

        # Model and scale
        cmd.extend(["-m", model])
        cmd.extend(["--scale", str(scale)])

        # Optional parameters
        if denoise is not None:
            cmd.extend(["--denoise", str(denoise)])
        if sharpen is not None:
            cmd.extend(["--sharpen", str(sharpen)])
        if compression is not None:
            cmd.extend(["--compression", str(compression)])
        if detail is not None:
            cmd.extend(["--detail", str(detail)])
        if creativity is not None:
            cmd.extend(["--creativity", str(creativity)])
        if texture is not None:
            cmd.extend(["--texture", str(texture)])
        if prompt:
            cmd.extend(["--prompt", prompt])
        if face_recovery is not None:
            cmd.extend(["--face-recovery", str(face_recovery)])
            cmd.extend(["--face-recovery-version", str(face_recovery_version)])

        # Output format options
        cmd.extend(["-f", format])
        if format.lower() in ["jpg", "jpeg"]:
            cmd.extend(["--jpeg-quality", str(quality)])
        if bit_depth > 0:
            cmd.extend(["--bit-depth", str(bit_depth)])

        # Performance options
        if parallel_read > 1:
            cmd.extend(["-p", str(parallel_read)])

        # Processing options
        if input_path_obj.is_dir():
            cmd.append("--recursive")
        if self.verbose:
            cmd.append("--verbose")

        # Execute command with progress monitoring
        try:
            if self.verbose and not self.dry_run:
                returncode, stdout, stderr = self._execute_command_with_progress(cmd, "Gigapixel AI")
            else:
                returncode, stdout, stderr = self._execute_command(cmd)

            if returncode == 0:
                logger.success("Gigapixel AI processing completed successfully")
                return True
            logger.error(f"Gigapixel AI processing failed (code {returncode}): {stderr}")
            return False

        except Exception as e:
            logger.error(f"Gigapixel AI processing error: {e}")
            return False

    def video(
        self,
        input_path: str,
        model: str = "amq-13",
        scale: int = 2,
        fps: int | None = None,
        codec: str = "hevc_videotoolbox",
        quality: int = 18,
        denoise: int | None = None,
        details: int | None = None,
        halo: int | None = None,
        blur: int | None = None,
        compression: int | None = None,
        stabilize: bool = False,
        interpolate: bool = False,
        custom_filters: str | None = None,
        device: int = 0,
        output: str | None = None,
        **kwargs,
    ) -> bool:
        """
        Process videos using Topaz Video AI.

        Args:
            input_path: Path to input video file
            model: AI model to use (amq-13, prob-2, etc.)
            scale: Upscale factor (1-4)
            fps: Target frame rate for interpolation
            codec: Video codec (hevc_videotoolbox, hevc_nvenc, etc.)
            quality: Video quality/CRF value
            denoise: Denoise strength
            details: Detail enhancement
            halo: Halo reduction
            blur: Blur reduction
            compression: Compression artifact reduction
            stabilize: Enable stabilization
            interpolate: Enable frame interpolation
            custom_filters: Custom FFmpeg filters
            device: GPU device index
            output: Output file path

        Returns:
            True if processing succeeded, False otherwise

        """
        logger.info(f"Starting Video AI processing: {input_path}")

        # Find Video AI FFmpeg
        if not self._video_ai_ffmpeg:
            self._video_ai_ffmpeg = self._find_executable("video_ai")
            if not self._video_ai_ffmpeg:
                msg = "Video AI FFmpeg not found"
                raise OSError(msg)

        # Set up Video AI environment variables
        self._setup_video_ai_environment()

        # Validate parameters
        self._validate_video_ai_params(
            model, scale, fps, codec, quality, denoise, details, halo, blur, compression, device
        )

        # Validate paths
        input_path_obj, output_path_obj = self._validate_paths(input_path, output)
        if input_path_obj.is_dir():
            msg = "Video AI only supports single video files, not directories"
            raise ValueError(msg)

        # Determine output filename
        if output_path_obj.is_dir():
            output_file = output_path_obj / f"{input_path_obj.stem}_processed{input_path_obj.suffix}"
        else:
            output_file = output_path_obj

        # Build FFmpeg command
        cmd = self._build_video_ai_command(
            input_path_obj,
            output_file,
            model,
            scale,
            fps,
            codec,
            quality,
            denoise,
            details,
            halo,
            blur,
            compression,
            stabilize,
            interpolate,
            custom_filters,
            device,
        )

        # Execute command
        try:
            returncode, stdout, stderr = self._execute_command(cmd)

            if returncode == 0:
                logger.success("Video AI processing completed successfully")
                return True
            logger.error(f"Video AI processing failed (code {returncode}): {stderr}")
            return False

        except Exception as e:
            logger.error(f"Video AI processing error: {e}")
            return False

    def photo(
        self,
        input_path: str,
        autopilot_preset: str = "default",
        format: str = "preserve",
        quality: int = 95,
        compression: int = 2,
        bit_depth: int = 16,
        tiff_compression: str = "zip",
        show_settings: bool = False,
        skip_processing: bool = False,
        override_autopilot: bool = False,
        upscale: bool | None = None,
        noise: bool | None = None,
        sharpen: bool | None = None,
        lighting: bool | None = None,
        color: bool | None = None,
        output: str | None = None,
        **kwargs,
    ) -> bool:
        """
        Process images using Topaz Photo AI.

        Args:
            input_path: Path to input image(s) or directory
            autopilot_preset: Autopilot preset to use
            format: Output format (preserve, jpg, png, tiff, dng)
            quality: JPEG quality (0-100)
            compression: PNG compression (0-10)
            bit_depth: TIFF bit depth (8 or 16)
            tiff_compression: TIFF compression (none, lzw, zip)
            show_settings: Show Autopilot settings before processing
            skip_processing: Skip processing (just show settings)
            override_autopilot: Override Autopilot with manual settings
            upscale: Enable/disable upscale enhancement
            noise: Enable/disable denoise enhancement
            sharpen: Enable/disable sharpen enhancement
            lighting: Enable/disable lighting adjustment
            color: Enable/disable color balance
            output: Output directory path

        Returns:
            True if processing succeeded, False otherwise

        """
        logger.info(f"Starting Photo AI processing: {input_path}")

        # Find Photo AI executable
        if not self._photo_ai_exe:
            self._photo_ai_exe = self._find_executable("photo_ai")
            if not self._photo_ai_exe:
                msg = "Photo AI executable not found"
                raise OSError(msg)

        # Validate parameters
        self._validate_photo_ai_params(format, quality, compression, bit_depth, tiff_compression)

        # Validate paths
        input_path_obj, output_path_obj = self._validate_paths(input_path, output)

        # Build command arguments
        cmd = [self._photo_ai_exe, "--cli"]

        # Input/output
        cmd.extend(["-i", str(input_path_obj)])
        cmd.extend(["-o", str(output_path_obj)])

        # Format options
        cmd.extend(["-f", format])
        if format.lower() in ["jpg", "jpeg"]:
            cmd.extend(["-q", str(quality)])
        elif format.lower() == "png":
            cmd.extend(["-c", str(compression)])
        elif format.lower() in ["tif", "tiff"]:
            cmd.extend(["-d", str(bit_depth)])
            cmd.extend(["-tc", tiff_compression])

        # Debug options
        if show_settings:
            cmd.append("--showSettings")
        if skip_processing:
            cmd.append("--skipProcessing")
        if self.verbose:
            cmd.append("--verbose")

        # Processing options
        if input_path_obj.is_dir():
            cmd.append("--recursive")

        # Experimental settings override
        if override_autopilot:
            cmd.append("--override")

            if upscale is not None:
                if upscale:
                    cmd.append("--upscale")
                else:
                    cmd.extend(["--upscale", "enabled=false"])
            if noise is not None:
                if noise:
                    cmd.append("--noise")
                else:
                    cmd.extend(["--noise", "enabled=false"])
            if sharpen is not None:
                if sharpen:
                    cmd.append("--sharpen")
                else:
                    cmd.extend(["--sharpen", "enabled=false"])
            if lighting is not None:
                if lighting:
                    cmd.append("--lighting")
                else:
                    cmd.extend(["--lighting", "enabled=false"])
            if color is not None:
                if color:
                    cmd.append("--color")
                else:
                    cmd.extend(["--color", "enabled=false"])

        # Execute command with batch handling for directories
        try:
            if input_path_obj.is_dir():
                return self._execute_photo_ai_batch(cmd, input_path_obj)
            returncode, stdout, stderr = self._execute_command(cmd)
            return self._handle_photo_ai_result(returncode, stdout, stderr)

        except Exception as e:
            if self._handle_processing_error(e, "photo"):
                logger.info("Photo AI error recovery suggested - consider retrying with adjusted parameters")
            logger.error(f"Photo AI processing error: {e}")
            return False

    def _execute_photo_ai_batch(self, base_cmd: list[str], input_dir: Path) -> bool:
        """Execute Photo AI processing in batches to handle the ~450 image limit."""
        import glob

        # Find all supported image files
        image_extensions = ["*.jpg", "*.jpeg", "*.png", "*.tiff", "*.tif", "*.bmp", "*.webp", "*.dng", "*.raw"]
        all_files = []

        for ext in image_extensions:
            all_files.extend(glob.glob(str(input_dir / "**" / ext), recursive=True))

        if not all_files:
            logger.warning("No supported image files found in directory")
            return False

        file_count = len(all_files)
        logger.info(f"Found {file_count} images to process")

        # Calculate optimal batch size (Photo AI limit is ~450 images)
        max_batch_size = 400  # Conservative limit
        optimal_batch = self._get_optimal_batch_size(file_count, "photo")
        batch_size = min(optimal_batch, max_batch_size)

        if file_count > batch_size:
            logger.info(f"Processing in batches of {batch_size} images")

        # Process in batches
        total_success = True
        processed_count = 0

        for i in range(0, file_count, batch_size):
            batch_files = all_files[i : i + batch_size]
            batch_num = (i // batch_size) + 1
            total_batches = (file_count + batch_size - 1) // batch_size

            logger.info(f"Processing batch {batch_num}/{total_batches} ({len(batch_files)} images)")

            # Create temporary directory for this batch

            with tempfile.TemporaryDirectory() as temp_dir:
                temp_path = Path(temp_dir)

                # Create symlinks to batch files (to avoid copying large files)
                for file_path in batch_files:
                    file_obj = Path(file_path)
                    link_path = temp_path / file_obj.name

                    # Handle duplicate names by adding suffix
                    counter = 1
                    while link_path.exists():
                        name_parts = file_obj.stem, counter, file_obj.suffix
                        link_path = temp_path / f"{name_parts[0]}_{name_parts[1]}{name_parts[2]}"
                        counter += 1

                    try:
                        link_path.symlink_to(file_obj.resolve())
                    except OSError:
                        # Fallback to copying if symlink fails
                        import shutil

                        shutil.copy2(file_obj, link_path)

                # Update command for this batch
                batch_cmd = base_cmd.copy()
                # Replace input path with temp directory
                for idx, arg in enumerate(batch_cmd):
                    if arg == str(input_dir):
                        batch_cmd[idx] = str(temp_path)
                        break

                # Execute batch
                try:
                    returncode, stdout, stderr = self._execute_command(batch_cmd)
                    batch_success = self._handle_photo_ai_result(returncode, stdout, stderr, batch_num)

                    if batch_success:
                        processed_count += len(batch_files)
                    else:
                        total_success = False
                        logger.error(f"Batch {batch_num} failed")

                except Exception as e:
                    logger.error(f"Batch {batch_num} error: {e}")
                    total_success = False

        if total_success:
            logger.success(f"Photo AI batch processing completed: {processed_count}/{file_count} images processed")
        else:
            logger.warning(
                f"Photo AI batch processing completed with errors: {processed_count}/{file_count} images processed"
            )

        return total_success

    def _handle_photo_ai_result(self, returncode: int, stdout: str, stderr: str, batch_num: int | None = None) -> bool:
        """Handle Photo AI result codes with proper logging."""
        batch_prefix = f"Batch {batch_num}: " if batch_num else ""

        # Handle Photo AI specific return codes
        if returncode == 0:
            logger.success(f"{batch_prefix}Photo AI processing completed successfully")
            return True
        if returncode == 1:
            logger.warning(f"{batch_prefix}Photo AI processing completed with some failures")
            return True  # Partial success is still success
        if returncode == 255:  # -1
            logger.error(f"{batch_prefix}Photo AI: No valid files found")
            return False
        if returncode == 254:  # -2
            logger.error(f"{batch_prefix}Photo AI: Invalid log token - please open the app to login")
            return False
        if returncode == 253:  # -3
            logger.error(f"{batch_prefix}Photo AI: Invalid argument")
            return False

        logger.error(f"{batch_prefix}Photo AI processing failed (code {returncode}): {stderr}")
        return False

    def version(self) -> str:
        """Return topyaz version information."""
        return f"topyaz v{__version__}"

    def validate(
        self, check_licenses: bool = True, check_environment: bool = True, check_connectivity: bool = False
    ) -> dict[str, Any]:
        """
        Validate system setup and requirements.

        Args:
            check_licenses: Check license status for all products
            check_environment: Check system environment
            check_connectivity: Check network connectivity for remote hosts

        Returns:
            Validation results dictionary

        """
        results = {"system": {}, "licenses": {}, "connectivity": {}, "overall": True}

        # System validation
        if check_environment:
            logger.info("Validating system environment...")
            results["system"] = {
                "platform": platform.system(),
                "version": platform.version(),
                "memory_gb": psutil.virtual_memory().total / (1024**3),
                "disk_free_gb": psutil.disk_usage(Path.home()).free / (1024**3),
            }

        # License validation
        if check_licenses:
            logger.info("Validating licenses...")
            # TODO: Implement license checking
            results["licenses"] = {"gigapixel": "unknown", "video_ai": "unknown", "photo_ai": "unknown"}

        # Connectivity validation
        if check_connectivity and self.remote_host:
            logger.info("Validating connectivity...")
            # TODO: Implement connectivity checking
            results["connectivity"] = {"remote_host": self.remote_host, "reachable": False}

        return results

    def examples(self) -> None:
        """Show usage examples for all products."""

    def troubleshoot(self) -> None:
        """Run diagnostic checks and provide troubleshooting guidance."""
        logger.info("Running diagnostics...")

        # Check executables
        logger.info("Checking Topaz product installations...")
        products = ["gigapixel", "video_ai", "photo_ai"]
        for product in products:
            exe = self._find_executable(product)
            if exe:
                logger.success(f"✓ {product}: {exe}")
            else:
                logger.error(f"✗ {product}: Not found")

        # Check system resources
        memory_gb = psutil.virtual_memory().total / (1024**3)
        disk_gb = psutil.disk_usage(Path.home()).free / (1024**3)

        logger.info(f"System memory: {memory_gb:.1f}GB")
        logger.info(f"Free disk space: {disk_gb:.1f}GB")

        if memory_gb < 16:
            logger.warning("Consider upgrading to 16GB+ RAM for better performance")
        if disk_gb < 80:
            logger.warning("Free up disk space - Video AI requires ~80GB for models")

        # Check GPU information
        logger.info("Checking GPU resources...")
        gpu_info = self._get_gpu_info()

        if gpu_info["available"]:
            gpu_type = gpu_info.get("type", "unknown")
            device_count = gpu_info.get("count", 0)
            logger.success(f"✓ GPU: {device_count} {gpu_type.upper()} device(s) detected")

            for i, device in enumerate(gpu_info["devices"]):
                device_name = device.get("name", f"GPU {i}")
                logger.info(f"  - {device_name}")

                if "memory_total_mb" in device:
                    total_mem = device["memory_total_mb"] / 1024
                    used_mem = device.get("memory_used_mb", 0) / 1024
                    logger.info(f"    Memory: {used_mem:.1f}GB / {total_mem:.1f}GB")

                if "utilization_percent" in device:
                    util = device["utilization_percent"]
                    logger.info(f"    Utilization: {util}%")

                if "temperature_c" in device:
                    temp = device["temperature_c"]
                    if temp > 0:
                        logger.info(f"    Temperature: {temp}°C")
        else:
            logger.warning("✗ No compatible GPU detected")
            if gpu_info["errors"]:
                for error in gpu_info["errors"]:
                    logger.debug(f"GPU detection error: {error}")

        logger.info("Diagnostics complete")
</file>

<file path="tests/test_package.py">
"""Test suite for topyaz."""

from unittest.mock import patch


def test_version():
    """Verify package exposes version."""
    import topyaz

    assert topyaz.__version__


def test_imports():
    """Test that all expected classes and functions can be imported."""
    from topyaz import (
        AuthenticationError,
        ProcessingError,
        TopazError,
        TopyazCLI,
    )
    from topyaz.topyaz import EnvironmentError as TopyazEnvironmentError

    # Check classes exist
    assert TopyazCLI
    assert TopazError
    assert AuthenticationError
    assert TopyazEnvironmentError
    assert ProcessingError

    # Check inheritance
    assert issubclass(AuthenticationError, TopazError)
    assert issubclass(TopyazEnvironmentError, TopazError)
    assert issubclass(ProcessingError, TopazError)


def test_wrapper_initialization():
    """Test TopyazCLI can be initialized with basic parameters."""
    from topyaz import TopyazCLI

    with patch("topyaz.topyaz.logger"):
        wrapper = TopyazCLI(verbose=False, dry_run=True, log_level="ERROR")

        assert wrapper.verbose is False
        assert wrapper.dry_run is True
        assert wrapper.timeout == 3600


def test_version_command():
    """Test version command returns version string."""
    from topyaz import TopyazCLI

    with patch("topyaz.topyaz.logger"):
        wrapper = TopyazCLI(verbose=False)
        version_str = wrapper.version()
        assert "topyaz v" in version_str


def test_executable_finding():
    """Test executable finding logic."""
    from topyaz import TopyazCLI

    with patch("topyaz.topyaz.logger"):
        wrapper = TopyazCLI(verbose=False)

        # Test with mock paths
        with patch("topyaz.topyaz.Path") as mock_path:
            mock_path.return_value.exists.return_value = False
            result = wrapper._find_executable("gigapixel")
            assert result is None


def test_dry_run_mode():
    """Test dry run mode doesn't execute actual commands."""
    from topyaz import TopyazCLI

    with patch("topyaz.topyaz.logger"):
        wrapper = TopyazCLI(dry_run=True, verbose=False)

        # Test command execution in dry run mode
        result = wrapper._execute_command(["echo", "test"])
        assert result == (0, "dry-run-output", "")
</file>

<file path="pyproject.toml">
# this_file: pyproject.toml
#==============================================================================
# TOPYAZ PACKAGE CONFIGURATION
# This pyproject.toml defines the package metadata, dependencies, build system,
# and development environment for the topyaz package.
#==============================================================================

#------------------------------------------------------------------------------
# PROJECT METADATA
# Core package information used by PyPI and package managers.
#------------------------------------------------------------------------------
[project]
name = 'topyaz' # Package name on PyPI
description = '' # Short description
readme = 'README.md' # Path to README file
requires-python = '>=3.10' # Minimum Python version
keywords = [
] # Keywords for PyPI search
dynamic = ["version"] # Fields set dynamically at build time

# PyPI classifiers for package categorization
classifiers = [
    'Development Status :: 4 - Beta', # Package maturity level
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Python :: Implementation :: PyPy',
    'Operating System :: OS Independent',
    'License :: OSI Approved :: MIT License',
    'Intended Audience :: Developers',
]

dependencies = [
    "fire>=0.4.0",           # CLI framework
    "paramiko>=2.7.0",       # SSH functionality
    "pyyaml>=5.4.0",         # Configuration files
    "tqdm>=4.60.0",          # Progress bars
    "psutil>=5.8.0",         # System monitoring
    "loguru>=0.6.0",         # Logging system
    "rich>=13.0.0",          # CLI output formatting
    "pathlib>=1.0.0",        # Path handling
    "typing-extensions>=3.7.0",  # Type hints
]

# Author information
[[project.authors]]
name = 'Adam Twardoch'
email = 'adam+github@twardoch.com'

# License information
[project.license]
text = 'MIT'

# Project URLs
[project.urls]
Documentation = 'https://github.com/twardoch/topyaz#readme'
Issues = 'https://github.com/twardoch/topyaz/issues'
Source = 'https://github.com/twardoch/topyaz'

#------------------------------------------------------------------------------
# OPTIONAL DEPENDENCIES
# Additional dependencies for optional features, development, and testing.
#------------------------------------------------------------------------------
[project.optional-dependencies]

# Development tools
dev = [
    'pre-commit>=4.1.0', # Pre-commit hook manager - Keep pre-commit as is, update if newer pre-commit version is required
    'ruff>=0.9.7', # Linting and formatting - Keep ruff as is, update if newer ruff version is required
    'mypy>=1.15.0', # Type checking - Keep mypy as is, update if newer mypy version is required
    'absolufy-imports>=0.3.1', # Convert relative imports to absolute - Keep absolufy-imports as is, update if newer absolufy-imports version is required
    'pyupgrade>=3.19.1', # Upgrade Python syntax - Keep pyupgrade as is, update if newer pyupgrade version is required
    'isort>=6.0.1', # Sort imports - Keep isort as is, update if newer isort version is required
]

# Testing tools and frameworks
test = [
    'pytest>=8.3.4', # Testing framework - Keep pytest as is, update if newer pytest version is required
    'pytest-cov>=6.0.0', # Coverage plugin for pytest - Keep pytest-cov as is, update if newer pytest-cov version is required
    'pytest-xdist>=3.6.1', # Parallel test execution - Keep pytest-xdist as is, update if newer pytest-xdist version is required
    'pytest-benchmark[histogram]>=5.1.0', # Benchmarking plugin - Keep pytest-benchmark as is, update if newer pytest-benchmark version is required
    'pytest-asyncio>=0.25.3', # Async test support - Keep pytest-asyncio as is, update if newer pytest-asyncio version is required
    'coverage[toml]>=7.6.12',
]

docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.0.0",
    "myst-parser>=3.0.0", # Markdown support in Sphinx
]

# All optional dependencies combined
all = [
]

#------------------------------------------------------------------------------
# COMMAND-LINE SCRIPTS
# Entry points for command-line executables installed with the package.
#------------------------------------------------------------------------------
[project.scripts]
topyaz = "topyaz.__main__:main"

#------------------------------------------------------------------------------
# BUILD SYSTEM CONFIGURATION
# Defines the tools required to build the package and the build backend.
#------------------------------------------------------------------------------
[build-system]
# Hatchling is a modern build backend for Python packaging
# hatch-vcs integrates with version control systems for versioning
requires = [
    'hatchling>=1.27.0', # Keep hatchling as is, update if newer hatchling version is required
    'hatch-vcs>=0.4.0', # Keep hatch-vcs as is, update if newer hatch-vcs version is required
]
build-backend = 'hatchling.build' # Specifies Hatchling as the build backend


#------------------------------------------------------------------------------
# HATCH BUILD CONFIGURATION
# Configures the build process, specifying which packages to include and
# how to handle versioning.
#------------------------------------------------------------------------------
[tool.hatch.build]
# Include package data files
include = [
    "src/topyaz/py.typed", # For better type checking support
    "src/topyaz/data/**/*", # Include data files if any

]
exclude = ["**/__pycache__", "**/.pytest_cache", "**/.mypy_cache"]

[tool.hatch.build.targets.wheel]
packages = ["src/topyaz"]
reproducible = true


# Version control system hook configuration
# Automatically updates the version file from git tags
[tool.hatch.build.hooks.vcs]
version-file = "src/topyaz/__version__.py"

# Version source configuration
[tool.hatch.version]
source = 'vcs' # Get version from git tags or other VCS info

# Metadata handling configuration
[tool.hatch.metadata]
allow-direct-references = true # Allow direct references in metadata (useful for local dependencies)


#------------------------------------------------------------------------------
# DEVELOPMENT ENVIRONMENTS

[tool.hatch.envs.default]
features = ['dev', 'test', 'all']
dependencies = [
]

# Commands available in the default environment
[tool.hatch.envs.default.scripts]
# Run tests with optional arguments
test = 'pytest {args:tests}'
# Run tests with coverage reporting
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/topyaz --cov=tests {args:tests}"
# Run type checking
type-check = "mypy src/topyaz tests"
# Run linting and formatting
lint = ["ruff check src/topyaz tests", "ruff format --respect-gitignore src/topyaz tests"]
# Format and fix style issues
fmt = ["ruff format --respect-gitignore src/topyaz tests", "ruff check --fix src/topyaz tests"]
fix = ["ruff check --fix --unsafe-fixes src/topyaz tests", "ruff format --respect-gitignore src/topyaz tests"]

# Matrix configuration to test across multiple Python versions

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

#------------------------------------------------------------------------------
# SPECIALIZED ENVIRONMENTS
# Additional environments for specific development tasks.
#------------------------------------------------------------------------------

# Dedicated environment for linting and code quality checks
[tool.hatch.envs.lint]
detached = true # Create a separate, isolated environment
features = ['dev'] # Use dev extras  dependencies 

# Linting environment commands
[tool.hatch.envs.lint.scripts]
# Type checking with automatic type installation
typing = "mypy --install-types --non-interactive {args:src/topyaz tests}"
# Check style and format code
style = ["ruff check {args:.}", "ruff format --respect-gitignore {args:.}"]
# Format and fix style issues
fmt = ["ruff format --respect-gitignore {args:.}", "ruff check --fix {args:.}"]
fix = ["ruff check --fix --unsafe-fixes {args:.}", "ruff format --respect-gitignore {args:.}"]
# Run all ops
all = ["style", "typing", "fix"]

# Dedicated environment for testing
[tool.hatch.envs.test]
features = ['test'] # Use test extras as dependencies

# Testing environment commands
[tool.hatch.envs.test.scripts]
# Run tests in parallel
test = "python -m pytest -n auto {args:tests}"
# Run tests with coverage in parallel
test-cov = "python -m pytest -n auto --cov-report=term-missing --cov-config=pyproject.toml --cov=src/topyaz --cov=tests {args:tests}"
# Run benchmarks
bench = "python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only"
# Run benchmarks and save results
bench-save = "python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only --benchmark-json=benchmark/results.json"

# Documentation environment
[tool.hatch.envs.docs]
features = ['docs']

# Documentation environment commands
[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs/source docs/build"

# GitHub Actions workflow configuration
[tool.hatch.envs.ci]
features = ['test']


[tool.hatch.envs.ci.scripts]
test = "pytest --cov=src/topyaz --cov-report=xml"


#------------------------------------------------------------------------------
# CODE QUALITY TOOLS
# Configuration for linting, formatting, and code quality enforcement.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# COVERAGE CONFIGURATION
# Settings for test coverage measurement and reporting.
#------------------------------------------------------------------------------

# Path mapping for coverage in different environments
[tool.coverage.paths]
topyaz = ["src/topyaz", "*/topyaz/src/topyaz"]
tests = ["tests", "*/topyaz/tests"]

# Coverage report configuration
[tool.coverage.report]
# Lines to exclude from coverage reporting
exclude_lines = [
    'no cov', # Custom marker to skip coverage
    'if __name__ == .__main__.:', # Script execution guard
    'if TYPE_CHECKING:', # Type checking imports and code
    'pass', # Empty pass statements
    'raise NotImplementedError', # Unimplemented method placeholders
    'raise ImportError', # Import error handling
    'except ImportError', # Import error handling
    'except KeyError', # Common error handling
    'except AttributeError', # Common error handling
    'except NotImplementedError', # Common error handling
]

[tool.coverage.run]
source_pkgs = ["topyaz", "tests"]
branch = true # Measure branch coverage (if/else statements)
parallel = true # Support parallel test execution
omit = [
    "src/topyaz/__about__.py",
]

#------------------------------------------------------------------------------
# MYPY CONFIGURATION
# Configuration for type checking with mypy.
#------------------------------------------------------------------------------

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

#------------------------------------------------------------------------------
# PYTEST CONFIGURATION
# Configuration for pytest, including markers, options, and benchmark settings.
#------------------------------------------------------------------------------

[tool.pytest.ini_options]
addopts = "-v --durations=10 -p no:briefcase"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
console_output_style = "progress"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
log_cli = true
log_cli_level = "INFO"
markers = [
    "benchmark: marks tests as benchmarks (select with '-m benchmark')",
    "unit: mark a test as a unit test",
    "integration: mark a test as an integration test",
    "permutation: tests for permutation functionality", 
    "parameter: tests for parameter parsing",
    "prompt: tests for prompt parsing",
]
norecursedirs = [
    ".*",
    "build",
    "dist", 
    "venv",
    "__pycache__",
    "*.egg-info",
    "_private",
]
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]

[tool.pytest-benchmark]
min_rounds = 100
min_time = 0.1
histogram = true
storage = "file"
save-data = true
compare = [
    "min",    # Minimum time
    "max",    # Maximum time
    "mean",   # Mean time
    "stddev", # Standard deviation
    "median", # Median time
    "iqr",    # Inter-quartile range
    "ops",    # Operations per second
    "rounds", # Number of rounds
]

#------------------------------------------------------------------------------
# RUFF CONFIGURATION
# Configuration for Ruff, including linter and formatter settings.
#------------------------------------------------------------------------------ 

# Ruff linter and formatter configuration
[tool.ruff]
target-version = "py310"
line-length = 120

# Linting rules configuration
[tool.ruff.lint]
# Rule sets to enable, organized by category
select = [
    # flake8 plugins and extensions
    'A', # flake8-builtins: checks for shadowed builtins
    'ARG', # flake8-unused-arguments: checks for unused function arguments
    'ASYNC', # flake8-async: checks for async/await issues
    'B', # flake8-bugbear: finds likely bugs and design problems
    'C', # flake8-comprehensions: helps write better list/dict comprehensions
    'DTZ', # flake8-datetimez: checks for datetime timezone issues
    'E', # pycodestyle errors: PEP 8 style guide errors
    'EM', # flake8-errmsg: checks for better error messages
    'F', # pyflakes: detects various errors
    'FBT', # flake8-boolean-trap: checks for boolean traps in function signatures
    'I', # isort: sorts imports
    'ICN', # flake8-import-conventions: checks for import conventions
    'ISC', # flake8-implicit-str-concat: checks for implicit string concatenation
    'LOG', # flake8-logging: checks for logging issues
    'N', # pep8-naming: checks naming conventions
    'PLC', # pylint convention: checks for convention issues
    'PLE', # pylint error: checks for errors
    'PLR', # pylint refactor: suggests refactors
    'PLW', # pylint warning: checks for suspicious code
    'PT', # flake8-pytest-style: checks pytest-specific style
    'PTH', # flake8-use-pathlib: checks for stdlib path usage vs pathlib
    'PYI', # flake8-pyi: checks stub files
    'RET', # flake8-return: checks return statement consistency
    'RSE', # flake8-raise: checks raise statements
    'RUF', # Ruff-specific rules
    'S', # flake8-bandit: checks for security issues
    'SIM', # flake8-simplify: checks for code simplification opportunities
    'T', # flake8-print: checks for print statements
    'TCH', # flake8-type-checking: helps with type-checking
    'TID', # flake8-tidy-imports: checks for tidy import statements
    'UP', # pyupgrade: checks for opportunities to use newer Python features
    'W', # pycodestyle warnings: PEP 8 style guide warnings
    'YTT', # flake8-2020: checks for misuse of sys.version or sys.version_info

]
# Rules to ignore (with reasons)
ignore = [
    'B027', # Empty method in abstract base class - sometimes needed for interfaces
    'C901', # Function is too complex - sometimes complexity is necessary
    'FBT003', # Boolean positional argument in function definition - sometimes unavoidable
    'PLR0911', # Too many return statements - sometimes needed for readability
    'PLR0912', # Too many branches - sometimes needed for complex logic
    'PLR0913', # Too many arguments - sometimes needed in APIs
    'PLR0915', # Too many statements - sometimes needed for comprehensive functions
    'PLR1714', # Consider merging multiple comparisons - sometimes less readable
    'PLW0603', # Using the global statement - sometimes necessary
    'PT013', # Pytest explicit test parameter - sometimes clearer
    'PTH123', # Path traversal - sometimes needed
    'PYI056', # Calling open() in pyi file - sometimes needed in type stubs
    'S105', # Possible hardcoded password - often false positives
    'S106', # Possible hardcoded password - often false positives
    'S107', # Possible hardcoded password - often false positives
    'S110', # try-except-pass - sometimes valid for suppressing exceptions
    'SIM102'
    # Nested if statements - sometimes more readable than combined conditions
]
# Rules that should not be automatically fixed
unfixable = [
    'F401', # Don't automatically remove unused imports - may be needed later

]
# Configure exclude to ignore specific directories
exclude = [".git", ".venv", "venv", "dist", "build"]

# isort configuration within Ruff
[tool.ruff.lint.isort]
known-first-party = ['topyaz'] # Treat as first-party imports for sorting

# flake8-tidy-imports configuration within Ruff
[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = 'all' # Ban all relative imports for consistency

# Per-file rule exceptions
[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
'tests/**/*' = [
    'PLR2004', # Allow magic values in tests for readability
    'S101', # Allow assertions in tests
    'TID252'
    # Allow relative imports in tests for convenience
]
</file>

<file path="README.md">
# topyaz: Unified CLI Wrapper for Topaz Labs Products

**topyaz** is a Python CLI wrapper that unifies Topaz Labs' three AI products (Video AI, Gigapixel AI, Photo AI) into a single command-line interface for professional batch processing workflows.

**🎯 Core Purpose:**

- Single CLI tool for all Topaz products instead of using separate GUIs
- Enable remote processing via SSH on powerful machines
- Batch operations with progress monitoring and error recovery

**📋 Requirements:**

- macOS 11+ (Topaz products are Mac-focused)
- Gigapixel AI Pro license ($499/year) for CLI access
- 16GB+ RAM, 80GB+ storage for models

**✅ Current Status:**

- **Phase 1 Complete**: Comprehensive refactoring from monolithic to modular architecture
- **Implementation**: Clean, production-ready codebase with 18+ focused modules
- **Architecture**: Modular design with dependency injection, abstract interfaces, and excellent testability

**💡 Key Value:**

- ~2x faster than GUI for batch operations
- Remote execution on GPU servers
- Unified interface across Video AI (upscaling), Gigapixel AI (image enhancement), Photo AI (auto-enhancement)
- Production-ready error handling and recovery mechanisms

**Target Users:** Video/photo professionals, content creators, automated workflow developers who need efficient batch processing of large media collections.

## ✨ Features

- **🎯 Unified Interface**: Single command-line tool for all three Topaz products
- **🌐 Remote Execution**: Run processing on remote machines via SSH
- **🔄 Batch Processing**: Intelligent batch operations with progress monitoring
- **🛡️ Failsafe Design**: Comprehensive error handling and recovery mechanisms
- **📊 Progress Tracking**: Real-time progress with ETA calculations
- **⚙️ Hardware Optimization**: Automatic detection and optimization for your system
- **🔧 Flexible Configuration**: YAML-based configuration with preset workflows

## 🚀 Quick Start

### Installation

```bash
pip install topyaz
```

### Basic Usage

```bash
# Upscale a video using Video AI
topyaz video input.mp4 --scale 2 --model amq-13

# Batch upscale images with Gigapixel AI (Pro license required)
topyaz gp photos/ --scale 4 --model recovery --denoise 40

# Enhance photos with Photo AI Autopilot
topyaz photo raw_photos/ --format jpg --quality 95

# Remote processing on a powerful machine
topyaz video large_video.mp4 --remote-host gpu-server --scale 4
```

## 📋 Requirements

### System Requirements

- **macOS**: 11.0 Big Sur or higher
  - macOS 13 Ventura+ for advanced Video AI models (Rhea, Aion)
  - macOS 14 Sonoma+ for Gigapixel AI generative models
- **Python**: 3.8 or higher
- **Memory**: 16GB RAM minimum (32GB recommended for 4K video)
- **Storage**: 80GB+ free space for Video AI models
- **GPU**: 2GB+ VRAM for GPU acceleration

### Topaz Products

- **Topaz Video AI**: Any valid license
- **Topaz Gigapixel AI**: Pro license required for CLI access ($499/year)
- **Topaz Photo AI**: Any valid license

## 🔧 Configuration

Create a configuration file at `~/.topyaz/config.yaml`:

```yaml
defaults:
  output_dir: '~/processed'
  preserve_structure: true
  backup_originals: false
  log_level: 'INFO'

video:
  default_model: 'amq-13'
  default_codec: 'hevc_videotoolbox'
  default_quality: 18

gigapixel:
  default_model: 'std'
  default_format: 'preserve'
  parallel_read: 4

photo:
  default_format: 'jpg'
  default_quality: 95

remote_hosts:
  gpu-server:
    host: '192.168.1.100'
    user: 'admin'
    key: '~/.ssh/topaz_key'
```

## 📖 Documentation

### Video AI Processing

```bash
# Basic upscaling
topyaz video input.mp4 --scale 2 --model amq-13

# Advanced processing with stabilization and interpolation
topyaz video shaky_video.mp4 \
    --stabilize \
    --scale 2 \
    --interpolate \
    --fps 60 \
    --denoise 50

# Batch processing with custom output
topyaz video videos/ \
    --scale 2 \
    --model prob-3 \
    --output-dir ./enhanced \
    --recursive
```

**Supported Models:**

- **Artemis**: amq-13, ahq-10/11/12, alq-10/12/13, alqs-1/2, amqs-1/2, aaa-9/10
- **Proteus**: prob-2, prap-2
- **Dione**: ddv-1/2/3, dtd-1/3/4, dtds-1/2, dtv-1/3/4, dtvs-1/2
- **Gaia**: gcg-5, ghq-5
- **Theia**: thd-3, thf-4
- **Interpolation**: chr-1/2, chf-1/2/3, apo-8, apf-1

### Gigapixel AI Processing

```bash
# Standard upscaling
topyaz gp images/ --scale 4 --model std

# Art & CG optimization
topyaz gp artwork/ --scale 2 --model art --sharpen 30

# Generative upscaling with prompts
topyaz gp photos/ \
    --model redefine \
    --scale 2 \
    --creativity 4 \
    --texture 3 \
    --prompt "high resolution portrait photography"

# Face recovery enhancement
topyaz gp portraits/ \
    --scale 2 \
    --model recovery \
    --face-recovery 80 \
    --face-recovery-creativity 1
```

**Available Models:**

- **Standard**: std, hf (high fidelity), low (low resolution)
- **Specialized**: art/cg (Art & CG), lines, text, vc (very compressed)
- **Recovery**: recovery (with face enhancement)
- **Generative**: redefine (with AI prompts)

### Photo AI Processing

```bash
# Autopilot enhancement
topyaz photo raw_photos/ --format jpg --quality 95

# Custom format conversion
topyaz photo images/ \
    --format tiff \
    --bit-depth 16 \
    --tiff-compression zip

# Show current Autopilot settings
topyaz photo test_image.jpg --show-settings --skip-processing
```

### Remote Execution

```bash
# Process on remote machine
topyaz video large_file.mp4 \
    --remote-host gpu-server \
    --ssh-user processor \
    --ssh-key ~/.ssh/render_key \
    --scale 4

# Distributed processing across multiple machines
topyaz gp large_collection/ \
    --remote-host server1,server2,server3 \
    --parallel-jobs 3 \
    --load-balance
```

## 🔍 Troubleshooting

### Common Issues

**"No such filter: tvai_up" Error**

```bash
# Check Video AI installation
topyaz validate --check-video-ai

# Verify environment variables
topyaz diagnose --show-env
```

**Authentication Failures**

```bash
# Re-authenticate with Topaz products
topyaz setup --verify-licenses

# Check Pro license for Gigapixel AI
topyaz validate --check-gigapixel-pro
```

**Memory Issues**

```bash
# Process with smaller batches
topyaz video large_video.mp4 --scale 2 --segment-size 60

# Monitor memory usage
topyaz profile --memory --operation video
```

### Diagnostic Tools

```bash
# System diagnostic report
topyaz diagnose --full-report

# Performance benchmark
topyaz benchmark --test-local --test-remote

# Validate system requirements
topyaz validate --check-all
```

## 🤝 Community Integration

topyaz integrates with popular community tools:

- **[vai-docker](https://github.com/jojje/vai-docker)**: Docker containerization for Video AI
- **[ComfyUI-TopazVideoAI](https://github.com/sh570655308/ComfyUI-TopazVideoAI)**: ComfyUI workflow integration
- **[gigapixel-automator](https://github.com/halfSpinDoctor/gigapixel-automator)**: Legacy AppleScript automation

## 📊 Performance

Performance benchmarks on Apple M3 Max (128GB RAM):

| Operation      | Files      | Size | Time   | Speed                 |
| -------------- | ---------- | ---- | ------ | --------------------- |
| Video AI 2x    | 10 videos  | 50GB | 45 min | ~2x faster than GUI   |
| Gigapixel 4x   | 100 images | 5GB  | 16 min | ~2x faster than GUI   |
| Photo AI batch | 500 images | 10GB | 8 min  | ~1.5x faster than GUI |

## 🔒 Security

- SSH key-based authentication only
- No password storage or transmission
- Secure file transfer protocols
- Command injection prevention
- Audit logging for all operations

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- [Topaz Labs](https://www.topazlabs.com/) for their excellent AI-powered tools
- Community contributors and tool developers
- Beta testers and early adopters

## 📞 Support

- **Documentation**: [docs.topyaz.org](https://docs.topyaz.org)
- **Issues**: [GitHub Issues](https://github.com/username/topyaz/issues)
- **Discussions**: [GitHub Discussions](https://github.com/username/topyaz/discussions)
- **Community**: [Topaz Labs Community](https://community.topazlabs.com/)

---

**Note**: This project is not officially affiliated with Topaz Labs. It's a community-driven wrapper around their CLI tools.
</file>

</files>
